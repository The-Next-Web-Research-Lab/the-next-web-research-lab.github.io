import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,e as h}from"./app-e7b3b96f.js";const i={},d=h('<h1 id="도서-리뷰-시리즈-클린-코드" tabindex="-1"><a class="header-anchor" href="#도서-리뷰-시리즈-클린-코드" aria-hidden="true">#</a> 도서 리뷰 시리즈 - 클린 코드</h1><h2 id="출처" tabindex="-1"><a class="header-anchor" href="#출처" aria-hidden="true">#</a> 출처</h2><p>『클린 코드』 로버트 C. 마틴 저/박재호, 이해영 역 | 인사이트(insight) | 2013년 12월</p><h2 id="한-줄-리뷰" tabindex="-1"><a class="header-anchor" href="#한-줄-리뷰" aria-hidden="true">#</a> 한 줄 리뷰</h2><p>군더더기 없는 코드를 작성하고 싶을때 스승이 되어주는 도서</p><h2 id="_6장-객체와-자료-구조" tabindex="-1"><a class="header-anchor" href="#_6장-객체와-자료-구조" aria-hidden="true">#</a> 6장 객체와 자료 구조</h2><h4 id="자료-객체-비대칭" tabindex="-1"><a class="header-anchor" href="#자료-객체-비대칭" aria-hidden="true">#</a> 자료/객체 비대칭</h4><p>객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 공개한다. 자료 구조는 자료를 그대로 공개하며 별 다른 함수는 제공하지 않는 다.</p><p>그래서 객체와 자료 구조는 근본적으로 양분된다.</p><p>절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다.</p><p>반대쪽도 참이다.</p><p>절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다.</p><p>다시 말해, 객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다.</p><h4 id="자료-전달-객체-data-transfer-object-dto" tabindex="-1"><a class="header-anchor" href="#자료-전달-객체-data-transfer-object-dto" aria-hidden="true">#</a> 자료 전달 객체(Data Transfer Object, DTO)</h4><p>자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스다. 이런 자료 구조체를 때로는 자료 전달 객체(Data Transfer Object, DTO)라 한다. DTO는 굉장히 유용한 구조체다. 특히 데이터베이스와 통신하거나 소켓에서 받은 메시지의 구문을 분석할 때 유용하다.</p><p>흔히 DTO는 데이터베이스에 저장된 가공되지 않은 정보를 애플리케이션 코드에서 사용할 객체로 변환하는 일련의 단계에서 가장 처음으로 사용하는 구조체다.</p><h2 id="_10장-클래스" tabindex="-1"><a class="header-anchor" href="#_10장-클래스" aria-hidden="true">#</a> 10장 클래스</h2><h3 id="클래스는-작아야-한다" tabindex="-1"><a class="header-anchor" href="#클래스는-작아야-한다" aria-hidden="true">#</a> 클래스는 작아야 한다</h3><p>클래스를 만들 때 첫 번째 규칙은 크기다. 클래스는 작아야 한다. 두 번째 규칙도 크기다. 더 작아야 한다. 앞서 함수 장에서 했던 이야기를 되풀어할 의도는 없다. 단지 클래스를 설계할 때도, 함수와 마찬가지로, &#39;작게&#39;가 기본 규칙이라는 의미다. 그렇자면 가장 먼저 떠오르는 의문은, 함수와 마찬가지로, &quot;얼마나 작아야 하는가?&quot;겠다.</p><p>함수는 물리적인 행 수로 크기를 측정했다. 클래스는 다른 척도를 사용한다. 클래스가 맡은 책임을 센다.</p><p>클래스 이름은 해당 클래스 책임을 기술해야 한다. 실제로 작명은 클래스 크기를 줄이는 첫 번째 관문이다. 간결한 이름이 떠오르지 않는다면 책임이 너무 많아서다.</p><h4 id="단일-책임-원칙-single-responsibility-principle-srp" tabindex="-1"><a class="header-anchor" href="#단일-책임-원칙-single-responsibility-principle-srp" aria-hidden="true">#</a> 단일 책임 원칙(Single Responsibility Principle, SRP)</h4><p>단일 책임 원칙은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다. SRP는 책임이라는 개념을 정의하여 적절한 클래스 크기를 제시한다. 클래스는 책임, 즉 변경할 이유가 하나여야 한다는 의미다.</p><p>SRP는 객체 지향 설계에서 더욱 중요한 개념이다. 또한 이해하고 지키기 수월한 개념이기도 한다. 하지만 이상하게도 SRP는 클래스 설계자가 가장 무시하는 규칙 중 하나다. 우리는 수많은 책임을 떠안은 클래스를 꾸준하게 접한다. 왜일까?</p><p>소프트웨어를 돌아가게 만드는 활동과 소프트웨어를 깨끗하게 만드는 활동은 완전히 별개다. 우리들 대다수는 두뇌 용량에 한계가 있어 &#39;깨끗하고 체계적인 소프트웨어&#39;보다 &#39;돌아가는 소프트웨어&#39;에 초점을 맞춘다. 전적으로 올바른 태도다. 관심사를 분리하는 작업은 프로그램만이 아니라 프로그래밍 활동에서도 마찬가지로 중요하다.</p><p>문제는 우리들 대다수가 프로그램이 돌아가면 일이 끝났다고 여기는 데 있다. &#39;깨끗하고 체계적인 소프트웨어&#39;라는 다음 관심사로 전환하지 않는다. 프로그램으로 되돌아가 만든 클래스를 단일 책임 클래스 여럿으로 분리하는 대신 다음 문제로 넘어가버린다.</p><p>게다가 많은 개발자는 자잘한 단일 책임 클래스가 많아지면 큰 그림을 이해하기 어려워진다고 우려한다. 큰 그림을 이해하려면 이 클래스 저 클래스를 수없이 넘나들어야 한다고 걱정한다.</p><p>하지만 작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다. 어느 시스템이든 익힐 내용은 그 양이 비슷하다.</p><h2 id="_11장-시스템" tabindex="-1"><a class="header-anchor" href="#_11장-시스템" aria-hidden="true">#</a> 11장 시스템</h2><h3 id="도시를-세운다면" tabindex="-1"><a class="header-anchor" href="#도시를-세운다면" aria-hidden="true">#</a> 도시를 세운다면?</h3><p>도시를 세운다면 혼자서 직접 관리하는 것은 아마도 불가능하다. 그럼에도 불구하고 도시는 잘 돌아간다. 이유는 각 분야를 관리하는 팀이 있기 때문이다. 도시에는 큰 그림을 그리는 사람들도 있으며 작은 사항에 집중하는 사람들도 있다.</p><p>도시가 돌아가는 또 다른 이유는 적절한 추상화와 모듈화 때문이다. 그래서 큰 그림을 이해하지 못할지라도 개인과 개인이 관리하는 구성요소는 효율적으로 돌아간다.</p><p>흔히 소프트웨어 팀도 도시처럼 구성한다. 그런데 막상 팀이 제작하는 시스템은 비슷한 수준으로 관심사를 분리하거나 추상화를 이뤄내지 못한다. 깨끗한 코드를 구현하면 낮은 추상화 수준에서 관심사를 분리하기 쉬워진다.</p><h3 id="시스템-제작과-시스템-사용을-분리하라" tabindex="-1"><a class="header-anchor" href="#시스템-제작과-시스템-사용을-분리하라" aria-hidden="true">#</a> 시스템 제작과 시스템 사용을 분리하라</h3><p>우선 제작은 사용과 아주 다르다는 사실을 명심한다. 시작 단계는 모든 어플리케이션이 풀어야 할 관심사다. 이것이 이 장에서 우리가 맨 처음 살펴볼 관심사다. 관심사 분리는 우리 분야에서 가장 오래되고 가장 중요한 설계 기법 중 하나다.</p><p>불행히도 대다수 애플리케이션은 시작 단계라는 관심사를 분리하지 않는다. 준비 과정 코드를 주먹구구식으로 구현할 뿐만 아니라 런타임 로직과 마구 뒤섞는다.</p><h4 id="main-분리" tabindex="-1"><a class="header-anchor" href="#main-분리" aria-hidden="true">#</a> Main 분리</h4><p>시스템 생성과 시스템 사용을 분리하는 한 가지 방법으로, 생성과 관련한 코드는 모두 main이나 main이 호출하는 모듈에 옮기고, 나머지 시스템은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다.</p><h4 id="팩토리" tabindex="-1"><a class="header-anchor" href="#팩토리" aria-hidden="true">#</a> 팩토리</h4><p>객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생긴다. 추상 팩토리 패턴을 사용하여 생성하는 시점을 애플리케이션에서 결정하지만 생성 코드는 애플리케이션에서 모르게 하는 것이다.</p><h4 id="의존성-주입" tabindex="-1"><a class="header-anchor" href="#의존성-주입" aria-hidden="true">#</a> 의존성 주입</h4><p>사용과 제작을 분리하는 강력한 메커니즘 하나가 의존성 주입이다. 의존성 주입은 제어 역전 기법을 의존성 관리에 적용한 메커니즘이다. 제어 역전에서는 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘긴다. 새로운 객체는 넘겨받은 책임만 맡으므로 단일 책임 원칙을 지키게 된다.</p><h4 id="확장" tabindex="-1"><a class="header-anchor" href="#확장" aria-hidden="true">#</a> 확장</h4><p>처음부터 올바르게 시스템을 만들 수 있다는 믿음은 미신이다. 대신에 우리는 오늘 주어진 사용자 스토리에 맞춰 시스템을 구현해야 한다. 내일은 새로운 스토리에 맞춰 시스템을 조정하고 확장하면 된다. 이것이 반복적이고 점짐적인 애자일 방식의 핵심이다. 테스트 주도 개발, 리펙터링, 깨끗한 코드는 코드 수준에서 시스템을 조정하고 확장하기 쉽게 만든다.</p><h3 id="의사결정을-최적화하라" tabindex="-1"><a class="header-anchor" href="#의사결정을-최적화하라" aria-hidden="true">#</a> 의사결정을 최적화하라</h3><p>모듈을 나누고 관심사를 분리하면 지엽적인 관리와 결정이 가능해진다. 도시든 소프트웨어 프로젝트든, 아주 큰 시스템에서는 한 사람이 모든 결정이 내리기 어렵다.</p><p>가장 적합한 사람에게 책임을 맡기면 가장 좋다. 우리는 때때로 가능한 마지막 순간까지 결정을 미루는 방법이 최선이라는 사실을 까먹곤 한다. 게으르거나 무책임해서가 아니다. 최대한 정보를 모아 최선의 결정을 내리기 위해서다.</p><p>성급한 결정은 불충분한 지식으로 내린 결정이다. 너무 일찍 결정하면 고객 피드백을 더 모으고, 프로젝트를 더 고민하고, 구현 방안을 더 탐험할 기회가 사라진다.</p><h2 id="_12장-창발적" tabindex="-1"><a class="header-anchor" href="#_12장-창발적" aria-hidden="true">#</a> 12장 창발적</h2><h3 id="창발적-설계로-깔끔한-코드를-구현하자" tabindex="-1"><a class="header-anchor" href="#창발적-설계로-깔끔한-코드를-구현하자" aria-hidden="true">#</a> 창발적 설계로 깔끔한 코드를 구현하자</h3><blockquote><p>창발 : 남이 모르거나 하지 아니한 것을 처음으로 또는 새롭게 밝혀내거나 이루는 일.</p></blockquote><p>우리들 대다수는 켄트 벡이 제시한 단순한 설계 규칙 네 가지가 소프트웨어 설계 품질을 크게 높여준다고 믿는다. 켄트 벡은 다음 규칙을 따르면 설계는 <strong>단순하다</strong>고 말한다.</p><ul><li>모든 테스트를 실행한다.</li><li>중복을 없앤다.</li><li>프로그래머 의도를 표현한다.</li><li>클래스와 메서드 수를 최소로 줄인다.</li></ul><h3 id="단순한-설계-규칙-1-모든-테스트를-실행하라" tabindex="-1"><a class="header-anchor" href="#단순한-설계-규칙-1-모든-테스트를-실행하라" aria-hidden="true">#</a> 단순한 설계 규칙 1 : 모든 테스트를 실행하라</h3><p>무엇보다 먼저, 설계는 의도한 대로 돌아가는 시스템을 내놓아야 한다. 문서로는 시스템을 완벽하게 설계했지만, 시스템이 의도한 대로 돌아가는지 검증할 간단한 방법이 없다면, 문서 작성을 위해 투자한 노력에 대한 가치는 인정받기 힘들다.</p><p>테스트를 철저히 거쳐 모든 테스트 케이스를 항상 통과하는 시스템은 <strong>테스트가 가능한 시스템</strong>이다. 당연하지만 중요한 말이다. 테스트가 불가능한 시스템은 검증도 불가능하다. 논란의 여지는 있지만, 검증이 불가능한 시스템은 절대 출시하면 안된다.</p><p>놀랍게도 <strong>테스트 케이스를 만들고 계속 돌려라</strong>라는 간단하고 단순한 규칙을 따르면 시스템은 낮은 결합도와 높은 응집력이라는, 객체 지향 방법론이 지향하는 목표를 저절로 달성한다. 즉, 테스트 케이스를 작성하면 설계 품질이 높아진다.</p><h3 id="단순한-설계-규칙-2-4-리팩토링" tabindex="-1"><a class="header-anchor" href="#단순한-설계-규칙-2-4-리팩토링" aria-hidden="true">#</a> 단순한 설계 규칙 2~4 : 리팩토링</h3><p>테스트 케이스를 모두 작성했다면 이제 코드와 클래스를 정리해도 괜찮다. 구체적으로 코드를 점진적으로 리팩토링 해나간다. 코드 몇 줄을 추가할 때마다 잠시 멈추고 설계를 조감한다. 새로 추가하는 코드가 설계 품질을 낮추는가? 그렇다면 깔끔히 정리한 후 테스트 케이스를 돌려 기존 기능을 깨뜨리지 않았다는 사실을 확인한다.</p><p>리팩토링 단계에서는 소프트웨어 설계 품질을 높이는 기법이라면 무엇이든 적용해도 괜찮다. 응집도를 높이고, 결합도를 낮추고, 관심사를 분리하고, 시스템 관심사를 모듈로 나누고, 함수와 클래스 크기를 줄이고, 더 나은 이름을 선택하는 등 다양한 기법을 동원한다. 또한 이 단계는 단순한 설계 규칙 중 나머지 3개를 적용해 중복을 제거하고, 프로그래머 의도를 표현하고, 클래스와 메서드수를 최소로 줄이는 단계이기도 하다.</p><h4 id="중복을-없애라" tabindex="-1"><a class="header-anchor" href="#중복을-없애라" aria-hidden="true">#</a> 중복을 없애라</h4><p>우수한 설계에서 중복은 커다란 적이다. 중복은 추가 작업, 추가 위험, 불필요한 복잡도를 뜻하기 때문이다. 중복은 여러 가지 형태로 표출된다. 똑같은 코드는 당연히 중복이다. 비슷한 코드는 더 비슷하게 고쳐주면 리팩토링이 쉬워진다.</p><h4 id="표현하라" tabindex="-1"><a class="header-anchor" href="#표현하라" aria-hidden="true">#</a> 표현하라</h4><p>소프트웨어 프로젝트 비용 중 대다수는 장기적인 유지보수에 들어간다. 코드를 변경하면서 버그의 싹을 심지 않으려면 유지보수 개발자가 시스템을 제대로 이해해야 한다. 하지만 시스템이 점차 복잡해지면서 유지보수 개발자가 시스템을 이해하느라 보내는 시간은 점점 늘어나고 동시에 코드를 오해할 가능성도 점점 커진다. 그러므로 코드는 개발자의 의도를 분명히 표현해야 한다. 개발자가 코드를 명백하게 짤수록 다른 사람이 그 코드를 이해하기 쉬워진다. 그래야 결함이 줄어들고 유지보수 비용이 적게 든다.</p><p><strong>우선</strong>, 좋은 이름을 선택한다. 이름과 기능이 완전히 딴판인 클래스나 함수로 유지보수 담당자를 놀라게 해서는 안 된다.</p><p><strong>둘째</strong>, 함수와 클래스 크기를 가능한 줄인다. 작은 클래스나 작은 함수는 이름 짓기도 쉽고, 구현하기도 쉽고, 이해하기도 쉽다.</p><p><strong>세째</strong>, 표준 명칭을 사용한다. 예를 들어, 디자인 패턴은 의사소통과 표현력 강화가 주요 목적이다. 클래스가 COMMAND나 VISITOR와 같은 표준 패턴을 사용해 구현된다면 클래스 이름에 패턴 이름을 넣어준다. 그러면 다른 개발자가 클래스 설계 의도를 이해하기 쉬워진다.</p><p><strong>네째</strong>, 단위 테스트 케이스를 꼼꼼히 작성한다. 테스트 케이스는 소위 <strong>예제로 보여주는 문서</strong>다. 다시 말해, 잘 만든 테스트 케이스를 읽어보면 클래스 기능이 한눈에 들어온다.</p><h4 id="클래스와-메서드-수를-최소로-줄여라" tabindex="-1"><a class="header-anchor" href="#클래스와-메서드-수를-최소로-줄여라" aria-hidden="true">#</a> 클래스와 메서드 수를 최소로 줄여라</h4><p>중복을 제거하고, 의도를 표현하고, SRP를 준수한다는 기본적인 개념도 극단으로 치달으면 득보다 실이 많아진다. 클래스와 메서드 크기를 줄이자고 조그만 클래서와 메서드를 수업이 만드는 사례도 없지 않다. 그래서 이 규칙은 함수와 클래스 수를 가능한 줄이라고 제안한다.</p>',70),n=[d];function p(t,s){return e(),r("div",null,n)}const l=a(i,[["render",p],["__file","1.html.vue"]]);export{l as default};
