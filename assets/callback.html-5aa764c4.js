const n=JSON.parse('{"key":"v-03046781","path":"/fe-dev/javascript/callback.html","title":"콜백 타입 추론하기","lang":"ko-KR","frontmatter":{"title":"콜백 타입 추론하기","description":"콜백 타입 추론하기 서사 REST API에 HTTP 요청할 때 각 컴포넌트 파일에서 동시에 실행하는 경우가 있었다. 이때 사용측을 수정하는 것 보다는 함수 정의측을 수정하는 게 수정을 최소화 할 수 있다고 판단해서 debounce 함수를 만들어서 해결했다. 함수 인자가 없는 경우도 있고, 함수 인자를 필요한 경우도 있어서 콜백 타입 추론하도록 처리했다. 타입 추론 코드 export const debounce = &lt; Prop, Callback extends PropCallback | VoidCallback, VoidCallback = () =&gt; void, PropCallback = (prop: Prop) =&gt; void, &gt;( callback: Callback extends (prop: Prop) =&gt; void ? (prop: Prop) =&gt; void : () =&gt; void, ms = 0, ) =&gt; { let timer: null | ReturnType&lt;typeof setTimeout&gt; = null; return (...props: Prop[]) =&gt; { timer &amp;&amp; clearTimeout(timer); timer = setTimeout(() =&gt; { callback(props[0]); }, ms); }; };","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://the-next-web-research-lab.github.io/en/fe-dev/javascript/callback.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/javascript/callback.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"콜백 타입 추론하기"}],["meta",{"property":"og:description","content":"콜백 타입 추론하기 서사 REST API에 HTTP 요청할 때 각 컴포넌트 파일에서 동시에 실행하는 경우가 있었다. 이때 사용측을 수정하는 것 보다는 함수 정의측을 수정하는 게 수정을 최소화 할 수 있다고 판단해서 debounce 함수를 만들어서 해결했다. 함수 인자가 없는 경우도 있고, 함수 인자를 필요한 경우도 있어서 콜백 타입 추론하도록 처리했다. 타입 추론 코드 export const debounce = &lt; Prop, Callback extends PropCallback | VoidCallback, VoidCallback = () =&gt; void, PropCallback = (prop: Prop) =&gt; void, &gt;( callback: Callback extends (prop: Prop) =&gt; void ? (prop: Prop) =&gt; void : () =&gt; void, ms = 0, ) =&gt; { let timer: null | ReturnType&lt;typeof setTimeout&gt; = null; return (...props: Prop[]) =&gt; { timer &amp;&amp; clearTimeout(timer); timer = setTimeout(() =&gt; { callback(props[0]); }, ms); }; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-08-02T18:42:22.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"콜백 타입 추론하기"}],["meta",{"property":"article:modified_time","content":"2023-08-02T18:42:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"콜백 타입 추론하기\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-08-02T18:42:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"서사","slug":"서사","link":"#서사","children":[]},{"level":2,"title":"타입 추론 코드","slug":"타입-추론-코드","link":"#타입-추론-코드","children":[]},{"level":2,"title":"사용 예제","slug":"사용-예제","link":"#사용-예제","children":[]}],"git":{"createdTime":1691001742000,"updatedTime":1691001742000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":0.36,"words":109},"filePathRelative":"fe-dev/javascript/callback.md","localizedDate":"2023년 8월 3일","excerpt":"<h1> 콜백 타입 추론하기</h1>\\n<h2> 서사</h2>\\n<p>REST API에 HTTP 요청할 때 각 컴포넌트 파일에서 동시에 실행하는 경우가 있었다.\\n이때 사용측을 수정하는 것 보다는 함수 정의측을 수정하는 게 수정을 최소화 할 수 있다고 판단해서 debounce 함수를 만들어서 해결했다.\\n함수 인자가 없는 경우도 있고, 함수 인자를 필요한 경우도 있어서 콜백 타입 추론하도록 처리했다.</p>\\n<h2> 타입 추론 코드</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> debounce <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&lt;</span>\\n  Prop<span class=\\"token punctuation\\">,</span>\\n  Callback <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">PropCallback</span> <span class=\\"token operator\\">|</span> VoidCallback<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">VoidCallback</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">PropCallback</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>prop<span class=\\"token operator\\">:</span> Prop<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>\\n  callback<span class=\\"token operator\\">:</span> Callback <span class=\\"token keyword\\">extends</span> <span class=\\"token punctuation\\">(</span>prop<span class=\\"token operator\\">:</span> Prop<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span>\\n    <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">(</span>prop<span class=\\"token operator\\">:</span> Prop<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function-variable function\\">void</span>\\n    <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">,</span>\\n  ms <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> timer<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">|</span> ReturnType<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">typeof</span> setTimeout<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>props<span class=\\"token operator\\">:</span> Prop<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    timer <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    timer <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">callback</span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> ms<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
