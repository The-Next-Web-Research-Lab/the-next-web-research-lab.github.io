const e=JSON.parse('{"key":"v-63c2eaf1","path":"/essay/compiler-theory.html","title":"컴파일러 이론 정리","lang":"ko-KR","frontmatter":{"title":"컴파일러 이론 정리","description":"컴파일러 이론 한장에 정리 이 포스트는 컴파일러 개념과 문법이 어떻게 만들어지는 학습하고자 정리한 자료다. 우선 컴파일러는 밑바닥부터 구현하는 경우는 드물다. 보통 토큰화 모듈이나 문법 분석기를 만들 때, Flex(어휘분석기)와 bison(파서 생성기)같은 컴파일러 생성기 도구들을 이용해서 만든다. 이 도구들은 문맥 자유 문법를 입력하면, 그 문법으로 작성된 프로그램을 토큰화하고 분석하는 문법 분석 코드를 출력한다. 그리고 컴파일 조건에 맞춰 생성 코드를 수정할 수 있다.","head":[["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/essay/compiler-theory.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"컴파일러 이론 정리"}],["meta",{"property":"og:description","content":"컴파일러 이론 한장에 정리 이 포스트는 컴파일러 개념과 문법이 어떻게 만들어지는 학습하고자 정리한 자료다. 우선 컴파일러는 밑바닥부터 구현하는 경우는 드물다. 보통 토큰화 모듈이나 문법 분석기를 만들 때, Flex(어휘분석기)와 bison(파서 생성기)같은 컴파일러 생성기 도구들을 이용해서 만든다. 이 도구들은 문맥 자유 문법를 입력하면, 그 문법으로 작성된 프로그램을 토큰화하고 분석하는 문법 분석 코드를 출력한다. 그리고 컴파일 조건에 맞춰 생성 코드를 수정할 수 있다."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-07-12T15:16:51.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"컴파일러 이론 정리"}],["meta",{"property":"article:modified_time","content":"2023-07-12T15:16:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"컴파일러 이론 정리\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-07-12T15:16:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"컴파일러 개념","slug":"컴파일러-개념","link":"#컴파일러-개념","children":[{"level":3,"title":"Step 1. 문법 분석기(Syntax Analyzer)","slug":"step-1-문법-분석기-syntax-analyzer","link":"#step-1-문법-분석기-syntax-analyzer","children":[]},{"level":3,"title":"Step 2. 코드 생성기(Code Generator)","slug":"step-2-코드-생성기-code-generator","link":"#step-2-코드-생성기-code-generator","children":[]}]},{"level":2,"title":"문법 정의","slug":"문법-정의","link":"#문법-정의","children":[{"level":3,"title":"문법은 어떻게 정의될까?","slug":"문법은-어떻게-정의될까","link":"#문법은-어떻게-정의될까","children":[]},{"level":3,"title":"문법 명세 작성","slug":"문법-명세-작성","link":"#문법-명세-작성","children":[]},{"level":3,"title":"문법 분석하는 방법","slug":"문법-분석하는-방법","link":"#문법-분석하는-방법","children":[]}]},{"level":2,"title":"참고 도서","slug":"참고-도서","link":"#참고-도서","children":[]}],"git":{"createdTime":1689175011000,"updatedTime":1689175011000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"essay/compiler-theory.md","localizedDate":"2023년 7월 13일","excerpt":"<h1> 컴파일러 이론 한장에 정리</h1>\\n<p>이 포스트는 컴파일러 개념과 문법이 어떻게 만들어지는 학습하고자 정리한 자료다.</p>\\n<p>우선 컴파일러는 밑바닥부터 구현하는 경우는 드물다. 보통 토큰화 모듈이나 문법 분석기를 만들 때, <a href=\\"https://ko.wikipedia.org/wiki/Flex_(%EC%96%B4%ED%9C%98%EB%B6%84%EC%84%9D%EA%B8%B0)\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Flex(어휘분석기)</a>와 <a href=\\"https://ko.wikipedia.org/wiki/GNU_bison\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">bison(파서 생성기)</a>같은 <strong>컴파일러 생성기</strong> 도구들을 이용해서 만든다. 이 도구들은 <a href=\\"https://ko.wikipedia.org/wiki/%EB%AC%B8%EB%A7%A5_%EC%9E%90%EC%9C%A0_%EB%AC%B8%EB%B2%95\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">문맥 자유 문법</a>를 입력하면, 그 문법으로 작성된 프로그램을 토큰화하고 분석하는 문법 분석 코드를 출력한다. 그리고 컴파일 조건에 맞춰 생성 코드를 수정할 수 있다.</p>","autoDesc":true}');export{e as data};
