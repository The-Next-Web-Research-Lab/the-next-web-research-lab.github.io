import{_ as e,c as a,o,a3 as t}from"./chunks/framework.9Buaa5aL.js";const n="/assets/64397753-3c341580-d09d-11e9-8146-51d7ff241682.CbQeJzuw.png",r="/assets/64397754-3c341580-d09d-11e9-84ec-8be60ad9c031.CwK-w88J.png",b=JSON.parse('{"title":"의존성 역전! 한장에 정리","description":"","frontmatter":{"title":"의존성 역전! 한장에 정리"},"headers":[],"relativePath":"fe-dev/good-code/dependency-inversion.md","filePath":"fe-dev/good-code/dependency-inversion.md"}'),d={name:"fe-dev/good-code/dependency-inversion.md"},s=t('<h1 id="의존성-역전-한장에-정리" tabindex="-1">의존성 역전! 한장에 정리 <a class="header-anchor" href="#의존성-역전-한장에-정리" aria-label="Permalink to &quot;의존성 역전! 한장에 정리&quot;">​</a></h1><h2 id="일반적인-상황의-제어흐름" tabindex="-1">일반적인 상황의 제어흐름 <a class="header-anchor" href="#일반적인-상황의-제어흐름" aria-label="Permalink to &quot;일반적인 상황의 제어흐름&quot;">​</a></h2><p>일반적인 상황에서 프로그램은 Top-Down으로 제어흐름이 흐른다.</p><p><img src="'+n+'" alt="normal-flow"></p><h2 id="다형성으로-인한-의존성-역전-현상" tabindex="-1">다형성으로 인한 의존성 역전 현상 <a class="header-anchor" href="#다형성으로-인한-의존성-역전-현상" aria-label="Permalink to &quot;다형성으로 인한 의존성 역전 현상&quot;">​</a></h2><p>다형성이 끼어들면 <strong>의존성 역전</strong> 현상이 발생한다.</p><p><img src="'+r+'" alt="di-flow"></p><ul><li>HL1 모듈은 인터페이스를 통해 F()를 호출한다.</li><li>ML1과 I 인터페이스 사이의 소스코드 의존성이 제어흐름과 반대이다.</li></ul><h2 id="결론" tabindex="-1">결론 <a class="header-anchor" href="#결론" aria-label="Permalink to &quot;결론&quot;">​</a></h2><p>객체지향 언어가 다형성을 안전하고 편리하게 제공한다는 사실은 소스 코드 의존성을 어디에서든 역전시킬 수 있다는 뜻이기도 하다. 결국 소스 코드 의존성이 제어흐름의 방향과 일치되도록 제한되지 않는다.</p>',10),i=[s];function c(l,_,p,h,f,m){return o(),a("div",null,i)}const g=e(d,[["render",c]]);export{b as __pageData,g as default};
