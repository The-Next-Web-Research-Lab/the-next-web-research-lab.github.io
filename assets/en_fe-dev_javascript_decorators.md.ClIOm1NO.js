import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.9Buaa5aL.js";const g=JSON.parse('{"title":"JavaScript - Decorators","description":"","frontmatter":{"title":"JavaScript - Decorators"},"headers":[],"relativePath":"en/fe-dev/javascript/decorators.md","filePath":"en/fe-dev/javascript/decorators.md"}'),t={name:"en/fe-dev/javascript/decorators.md"},n=e(`<h1 id="javascript-decorators" tabindex="-1">JavaScript - Decorators <a class="header-anchor" href="#javascript-decorators" aria-label="Permalink to &quot;JavaScript - Decorators&quot;">​</a></h1><h2 id="decorators-proposal" tabindex="-1">Decorators Proposal <a class="header-anchor" href="#decorators-proposal" aria-label="Permalink to &quot;Decorators Proposal&quot;">​</a></h2><ul><li>Proposal defined in <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">tc39/proposal-decorators</a></li><li><a href="https://github.com/erights/Orthogonal-Classes" target="_blank" rel="noreferrer">Orthogonal Classes</a>and <a href="https://onedrive.live.com/view.aspx?resid=A7BBCE1FC8EE16DB!442046&amp;app=PowerPoint&amp;authkey=!AEeXmhZASk50KjA" target="_blank" rel="noreferrer">Class Evaluation Order</a> Based on the proposal, Decorators and <a href="https://tc39.github.io/proposal-class-fields/" target="_blank" rel="noreferrer">Class Field</a> and <a href="https://github.com/tc39/proposal-private-methods" target="_blank" rel="noreferrer">Private methods</a> propose a combined vision of how to make them work together</li><li>Decorators are useful for adding functionality without modifying the code of already defined classes, functions, and variables.</li><li>It is used for memoization, access control, authentication, instrumentation, timing processing, logging, rate limiting, etc.</li></ul><h2 id="decorators-practicality" tabindex="-1">Decorators Practicality <a class="header-anchor" href="#decorators-practicality" aria-label="Permalink to &quot;Decorators Practicality&quot;">​</a></h2><p>Decorators are not available in JavaScript, but <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">Decorators in TypeScript</a> You can use it. That&#39;s why Node.js Framework <a href="https://docs.nestjs.com/controllers" target="_blank" rel="noreferrer">nestjs</a> and Front-end Framework <a href="https://angular.kr/guide/what-is-angular" target="_blank" rel="noreferrer">Angular</a> is officially in use.</p><h3 id="code-usage-examples" tabindex="-1">Code Usage Examples <a class="header-anchor" href="#code-usage-examples" aria-label="Permalink to &quot;Code Usage Examples&quot;">​</a></h3><ul><li><code>@defineElement</code>: Ability to create custom elements</li><li><code>@bound</code>: Debounce processing function</li><li><code>@observed</code>: A function that monitors the field and automatically calls when it changes.</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;num-counter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @observed </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">#x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @bound</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clicked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#clicked;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  connectedCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @bound</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8),l=[n];function r(h,p,o,k,c,d){return i(),a("div",null,l)}const y=s(t,[["render",r]]);export{g as __pageData,y as default};
