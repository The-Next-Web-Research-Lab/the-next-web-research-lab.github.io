const e=JSON.parse('{"key":"v-4b8a590d","path":"/en/fe-dev/paradigm/functional.html","title":"Functional programming theorem","lang":"en-US","frontmatter":{"title":"Functional programming theorem","description":"Functional programming theorem Understanding functions is half the job. The functions discussed in functional types are functions handled in mathematics. Functions in mathematics calculate input values ​​and return output values. And the input value always corresponds to the same output value. The functions discussed in functional types work the same way. A function receives input values ​​called arguments, calculates them, and returns an output value called a return value.","head":[["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://the-next-web-research-lab.github.io/fe-dev/paradigm/functional.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/en/fe-dev/paradigm/functional.html"}],["meta",{"property":"og:site_name","content":"TheNextWebResearchLab"}],["meta",{"property":"og:title","content":"Functional programming theorem"}],["meta",{"property":"og:description","content":"Functional programming theorem Understanding functions is half the job. The functions discussed in functional types are functions handled in mathematics. Functions in mathematics calculate input values ​​and return output values. And the input value always corresponds to the same output value. The functions discussed in functional types work the same way. A function receives input values ​​called arguments, calculates them, and returns an output value called a return value."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-02-01T14:00:12.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Functional programming theorem"}],["meta",{"property":"article:modified_time","content":"2024-02-01T14:00:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Functional programming theorem\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2024-02-01T14:00:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Understanding functions is half the job.","slug":"understanding-functions-is-half-the-job","link":"#understanding-functions-is-half-the-job","children":[]},{"level":2,"title":"What is a function","slug":"what-is-a-function","link":"#what-is-a-function","children":[{"level":3,"title":"Arguments and return values","slug":"arguments-and-return-values","link":"#arguments-and-return-values","children":[]},{"level":3,"title":"Procedures and Functions","slug":"procedures-and-functions","link":"#procedures-and-functions","children":[]},{"level":3,"title":"Pure and impure functions","slug":"pure-and-impure-functions","link":"#pure-and-impure-functions","children":[]}]},{"level":2,"title":"Assembling functions","slug":"assembling-functions","link":"#assembling-functions","children":[{"level":3,"title":"Assemble only with functions","slug":"assemble-only-with-functions","link":"#assemble-only-with-functions","children":[]},{"level":3,"title":"Assemble with Compose","slug":"assemble-with-compose","link":"#assemble-with-compose","children":[]},{"level":3,"title":"Assemble with Pipe","slug":"assemble-with-pipe","link":"#assemble-with-pipe","children":[]},{"level":3,"title":"Compare Compose and Pipe","slug":"compare-compose-and-pipe","link":"#compare-compose-and-pipe","children":[]}]},{"level":2,"title":"Tools that can be used to create functions","slug":"tools-that-can-be-used-to-create-functions","link":"#tools-that-can-be-used-to-create-functions","children":[{"level":3,"title":"closure","slug":"closure","link":"#closure","children":[]},{"level":3,"title":"curry","slug":"curry","link":"#curry","children":[]},{"level":3,"title":"Partial application","slug":"partial-application","link":"#partial-application","children":[]}]},{"level":2,"title":"What is the essence of functional types?","slug":"what-is-the-essence-of-functional-types","link":"#what-is-the-essence-of-functional-types","children":[{"level":3,"title":"first-class function","slug":"first-class-function","link":"#first-class-function","children":[]},{"level":3,"title":"container pattern","slug":"container-pattern","link":"#container-pattern","children":[]},{"level":3,"title":"state change","slug":"state-change","link":"#state-change","children":[]}]},{"level":2,"title":"So how do you do functional programming?","slug":"so-how-do-you-do-functional-programming","link":"#so-how-do-you-do-functional-programming","children":[{"level":3,"title":"mathematical function","slug":"mathematical-function","link":"#mathematical-function","children":[]},{"level":3,"title":"Think of everything as a function","slug":"think-of-everything-as-a-function","link":"#think-of-everything-as-a-function","children":[]},{"level":3,"title":"Use functions instead of values","slug":"use-functions-instead-of-values","link":"#use-functions-instead-of-values","children":[]},{"level":3,"title":"end","slug":"end","link":"#end","children":[]}]}],"git":{"createdTime":1706796012000,"updatedTime":1706796012000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":10.37,"words":3110},"filePathRelative":"en/fe-dev/paradigm/functional.md","localizedDate":"February 1, 2024","excerpt":"<h1> Functional programming theorem</h1>\\n<h2> Understanding functions is half the job.</h2>\\n<p>The functions discussed in functional types are functions handled in mathematics. Functions in mathematics calculate input values ​​and return output values. And the input value always corresponds to the same output value. The functions discussed in functional types work the same way. A function receives input values ​​called arguments, calculates them, and returns an output value called a return value.</p>","autoDesc":true}');export{e as data};
