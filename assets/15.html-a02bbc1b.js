import{_ as a,o as e,c as i,e as l}from"./app-de68466b.js";const n={},s=l(`<h1 id="도서-리뷰-시리즈-코딩을-지탱하는-기술" tabindex="-1"><a class="header-anchor" href="#도서-리뷰-시리즈-코딩을-지탱하는-기술" aria-hidden="true">#</a> 도서 리뷰 시리즈 - 코딩을 지탱하는 기술</h1><h2 id="출처" tabindex="-1"><a class="header-anchor" href="#출처" aria-hidden="true">#</a> 출처</h2><p>『코딩을 지탱하는 기술』 니시오 히로카즈 저 / 김완섭 역 | 비제이퍼블릭(BJ퍼블릭) | 2013년 10월</p><h2 id="한-줄-리뷰" tabindex="-1"><a class="header-anchor" href="#한-줄-리뷰" aria-hidden="true">#</a> 한 줄 리뷰</h2><p>매일 봤던 코드를 다르게 보이게 하는 도서</p><h2 id="문법의-역사" tabindex="-1"><a class="header-anchor" href="#문법의-역사" aria-hidden="true">#</a> 문법의 역사</h2><h4 id="if-while을-만든-이유" tabindex="-1"><a class="header-anchor" href="#if-while을-만든-이유" aria-hidden="true">#</a> if, while을 만든 이유</h4><p>사람이 편하게 쓰고 읽을 수 있는 프로그램을 만들기 위해 if, while과 같은 <code>구조화 프로그래밍</code>을 만들었다.</p><h4 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if else</h4><p>if의 조건식에 반대가 되는 조건식을 만들기 위해서는 뒤집어서 표현해야 됨으로 혼란 스러울 수 있기 때문에 if else를 만들었다.</p><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h4><ul><li>반복되는 if를 읽기 쉽게 표현한것</li><li>조건을 만족하고 있는 동안 블록 안의 내용을 반복하여 실행</li></ul><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h4><ul><li>수치를 증가시키는 while을 읽기 쉽게 표현</li><li>한곳에 &#39;시작값, 종료값, 증가값&#39; 3가지를 모두 정리가 되기 때문에 루프의 의도를 쉽게 이해할 수 있다.</li><li>반면에 while은 &#39;시작값, 종료값, 증가값&#39; 3가지가 분산되어 의도 파악이 힘들다.</li></ul><h4 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h4><ul><li>처리 대상으로 반복제어</li><li>어떤 대상의 요소 전부에 어떤 처리를 한다.</li></ul><h4 id="함수" tabindex="-1"><a class="header-anchor" href="#함수" aria-hidden="true">#</a> 함수</h4><ul><li>코드의 일부를 한 덩어리로 잘라내어 그것에 이름을 붙이는 기능</li><li>원래 위치로 돌아갈 위치를 저장해 함수 호출 후 돌아간다. <ul><li>이로 인해 Stack 이 등장한다.</li></ul></li><li>EDSAC에도 사용되었던 개념이다.</li></ul><h4 id="네이밍-변수명-함수명-등" tabindex="-1"><a class="header-anchor" href="#네이밍-변수명-함수명-등" aria-hidden="true">#</a> 네이밍(변수명, 함수명 등)</h4><p>메모리 주소를 지정하는 것보다. <code>알기 쉬운 이름</code>을 붙여 편리하게 사용하기 위해 만들었다.</p><h4 id="스코프" tabindex="-1"><a class="header-anchor" href="#스코프" aria-hidden="true">#</a> 스코프</h4><ul><li>이름의 유효 범위</li><li>전역 스코프만 있었던 시절에 명이 겹치는 이슈가 있어 만들어짐</li></ul><h2 id="형" tabindex="-1"><a class="header-anchor" href="#형" aria-hidden="true">#</a> 형</h2><p>어떤 종류의 값으로 해석 할지를 판단하기 위해 비트열에 <code>어떤 종류의 값 인가</code>라는 <code>추가 데이터</code>를 붙인것</p><h3 id="초기-fortran의-형" tabindex="-1"><a class="header-anchor" href="#초기-fortran의-형" aria-hidden="true">#</a> 초기 FORTRAN의 형</h3><p>메모리에 기록된 값이 정수인지 부동 소수점인지를 사람이 일일이 기억하는 것은 매우 피곤한 일이다. 편하게 할 방법은 없을까?</p><p>한 가지 방법은 변수명에 안에 든 것이 무엇인지 표현하기 위한 규칙을 만드는 것이다. 예를 들어 초기 FORTRAN에서는 변수명 선수가 I~N이면 정수, 그 이외이면 부동 소수점이 들어있다는 규칙을 사용했다.</p><h3 id="언어-처리계에-변수-종류를-알린다" tabindex="-1"><a class="header-anchor" href="#언어-처리계에-변수-종류를-알린다" aria-hidden="true">#</a> 언어 처리계에 변수 종류를 알린다</h3><p>다른 한 가지 방법은 언어 처리계에 <strong>이 변수는 정수다</strong>라고 알려서 사람이 아는 컴퓨터가 기억해두는 것이다.</p><p>이것이 변수형 선언이 탄생한 이유다. 예를 들어 C언어에서는 <code>int x;</code>라고 선언하면 <code>x</code>라는 이름이 가리키고 있는 메모리 영역은 정수로 해석하고, <code>float y;</code>라고 선언하면 <code>y</code>가 가리키고 있는 메모리는 부동 소수점으로 해석하게 된다.</p><p>이 <strong>형 정보</strong>가 주어짐으로, 처리계는 덧셈을 할 때 <strong>정수를 덧셈</strong>할지 <strong>부동 소수점을 덧셈</strong>할지 판단할 수 있게 된다. 사람이 일일이 지정하지 않아도 되는 것이다.</p><h3 id="사용자-정의형과-객체-지향" tabindex="-1"><a class="header-anchor" href="#사용자-정의형과-객체-지향" aria-hidden="true">#</a> 사용자 정의형과 객체 지향</h3><p>우선 <strong>언어가 가지고 있는 기본적인 형을 조합해서 새로운 형을 만드는 기능</strong>이 발명됐다. C언어의 구조체 등이 대표적인 예다. <strong>사용자 정의형</strong>이라고도 불린다.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="총칭형" tabindex="-1"><a class="header-anchor" href="#총칭형" aria-hidden="true">#</a> 총칭형</h4><p>다양한 형을 조합해서 만든 복잡한 형이 사용되면서 일부만 바꾸고 재사용하고 싶은 필요성이 생겼다. 그래서 <code>구성 요소의 형을 일부만 바꾸는 형</code>인 총칭형이 탄생했다. 다르게 설명하면 <code>형이 인수를 가지고 형을 만드는 함수</code>이다.</p><p>C++의 Template, Java의 Generics, Haskell의 형생성자 등이 그런 구조다.</p><h2 id="에러처리" tabindex="-1"><a class="header-anchor" href="#에러처리" aria-hidden="true">#</a> 에러처리</h2><p>사고 발생 시 큰 사고로 이어지지 않도록 예방하는 것이 필요하여 <code>실패를 알리는 구조</code>가 필요했다.</p><h4 id="실패를-전달하는-방법" tabindex="-1"><a class="header-anchor" href="#실패를-전달하는-방법" aria-hidden="true">#</a> 실패를 전달하는 방법</h4><ol><li>반환값으로 실패를 전달하면 호출처가 반환값을 체크해서 에러 처리를 하는 방법 <ul><li>실패를 놓친다 <ul><li>프로그래머가 반환값 확인을 잊어버렸을 때 실패를 놓치게 된다.</li><li>연쇄적으로 문제가 발생할 수 있다.</li></ul></li><li>에러 처리 때문에 코드를 해석하기 어렵다. <ul><li><code>원래 하고 싶은 것을 기술한 코드</code> 사이에 <code>실패했을 경우의 코드</code>가 채워져 흐름을 읽기 어렵다.</li></ul></li></ul></li><li>함수를 호출하기 전에 에러 처리 코드를 등록해두고, 실패 시 에러 처리 코드로 점프하는 방법</li><li>점프로 에러 처리를 한다. <ul><li><code>원래 하고 싶은 것을 기술한 코드</code>와 <code>실패했을 때의 처리</code>가 분리된다.</li></ul></li></ol><h3 id="예외-전파의-문제점" tabindex="-1"><a class="header-anchor" href="#예외-전파의-문제점" aria-hidden="true">#</a> 예외 전파의 문제점</h3><p>모든 함수의 소스 코드를 보지 않으면 함수가 어떤 예외를 던질 가능성이 있는 지 알 수 없다. 깜박하고 예외가 던져질 가능성이 놓치고 있다면 프로그램이 비정상 종료되어 버릴 수 있는 것이다.</p><h4 id="java의-검사-예외" tabindex="-1"><a class="header-anchor" href="#java의-검사-예외" aria-hidden="true">#</a> Java의 검사 예외</h4><p>이 문제를 피하기 위해선 <strong>어떤 예외를 던질지를 명시적으로 선언하는 것</strong>이 필요하다고 주장했다. Java에서는 <strong>throw에서 던질 수 있는 것</strong>, 즉 다른 수많은 언어들이 <strong>예외</strong>라고 부르고 있는 것을 다음과 같이 더 세분화하고 있다.</p><ul><li>예외 처리를 하지 않아도 되는 중요한 문제</li><li>예외 처리를 해도 좋은 실행 시 예외</li><li>예외 처리를 해도 좋은 기타 예외</li></ul><p>여기서 <strong>기타 예외</strong>는 검사 예외라고 불리며 메소드 정의 시 예외를 밖으로 던진다는 것을 선언해줄 필요가 있다. 그것을 위해 준비되어 있는 것이 throw 절이다. 다음 코드에는 <code>void shippai () throws MyException</code>라고 쓰여있다. 이것은 <strong>메소드는 MyException 예외를 던질 가능성이 있다</strong>는 선언이다.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> shippai <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyException</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>검사 예외 사용을 <strong>깜박하고 예외를 던질 가능성을 놓쳐버리는 일</strong> 따위는 발생하지 않게 된다. 예외를 던질 가능성이 있는 메소드를 호출할 경우 <strong>메소드가 던지는 예외를 그대로 호출처로 전달</strong>할지 아니면 <strong>메소드가 던지는 예외를 자신이 처리</strong>할지 둘 중 하나를 선택해서 구현하게 된다. 어느 쪽도 동작하지 않는 경우는 놓친 것을 컴파일러가 지정해준다.</p><h4 id="검사-예외가-잘-사용되지-않는-이유" tabindex="-1"><a class="header-anchor" href="#검사-예외가-잘-사용되지-않는-이유" aria-hidden="true">#</a> 검사 예외가 잘 사용되지 않는 이유</h4><p>검사 예외는 매우 좋은 기능 처럼 보이지만 다른 언어에서 잘 채용되지 않고 있다. 그 이유는 throws나 try/catch에 기술하는 예외의 갯수가 너무 방대해 지거나. 어떤 메소드에서 던질 예외를 하나 추가하면 그 메소드를 호출하고 있는 모든 메소드를 수정해야만 한다.</p><h2 id="객체지향" tabindex="-1"><a class="header-anchor" href="#객체지향" aria-hidden="true">#</a> 객체지향</h2><p>현실 세계의 사물을 컴퓨터에서 조작하기 위한 모델의 개념으로 생각하는 것이 객체지향의 목적이다.</p><ul><li>Alan Kay(객체 지향 발명가, Smallback 설계자) <ul><li>형/상속은 고생하고 좋지 않다.</li><li>객체지향은 <code>상태를 가진 객체가 메세지를 주고 받아서 커뮤니케이션 하는 것이다.</code>라고 설명한다.</li></ul></li><li>Bjarne Stroustrup(C++ 설계자) <ul><li>객체지향은 사용자 정의형과 상속을 사용한 프로그래밍이다.</li><li>Class는 사용자 정의형을 만들기 위한 도구이다.</li><li>Simula의 상속 구조가 문제 해결의 키이다.</li></ul></li><li>사물은 객체(Object), 모형은 모델(Model)이라 칭한다. <ul><li>모형으로 사물을 만들듯이, 모델로 객체를 만든다.</li><li>모형 : 모양이 같은 물건을 만들기 위한 틀</li></ul></li></ul><h4 id="모형을-만드는-방법" tabindex="-1"><a class="header-anchor" href="#모형을-만드는-방법" aria-hidden="true">#</a> 모형을 만드는 방법</h4><ol><li>Class 사용(C++, java) <ul><li>현실 세계 사물을 Class로 분류</li><li>세분화된 종류는 subclass로 정의</li></ul></li><li>Module 또는 Package <ul><li>함수를 하나로 모아두기 위한 기능</li></ul></li><li>Hash에 함수/변수를 정의 <ul><li>first-class citizen 을 사용 <ul><li>변수나 데이터 구조안에 담을 수 있다.</li><li>파라미터로 전달 할 수 있다.</li><li>반환값(return value)으로 사용할 수 있다.</li><li>할당에 사용된 이름과 관계없이 고유한 구별이 가능하다.</li><li>동적으로 프로퍼티 할당이 가능하다.</li></ul></li><li>javascript로 예를 들면 <code>{ fn: () =&gt; {}, data: 1 }</code> 이러한 형태이다.</li></ul></li><li>Closure <ul><li>함수 실행시의 이름 공간의 변수를 하나로 묶기 위해 사용하는 방법</li><li>함수형 프로그래밍에서 사용하는 방법</li><li>Closure 라고 불리는 이유? <ul><li>[1987 Ake Wikstrom] 자유 변수를 포함한 식을 &#39;열린 식&#39;이라고 부르고, 그 자유 변수의 바인딩을 조합함으로서 해당식을 닫고 있기 때문이다.</li></ul></li></ul></li></ol>`,56),r=[s];function d(o,c){return e(),i("div",null,r)}const h=a(n,[["render",d],["__file","15.html.vue"]]);export{h as default};
