import{_ as e,r as p,o,c,a as s,b as n,d as i,e as a}from"./app-c6410b09.js";const l={},u=a(`<h1 id="vuex-적용-경험-정리" tabindex="-1"><a class="header-anchor" href="#vuex-적용-경험-정리" aria-hidden="true">#</a> Vuex 적용 경험 정리</h1><blockquote><p>초안작성일: 2020.03.02</p></blockquote><h2 id="usestore" tabindex="-1"><a class="header-anchor" href="#usestore" aria-hidden="true">#</a> useStore</h2><p>Options API와 Class-based API에서는 <code>this</code> 컨텍스트가 존재 하므로 <code>this.$store</code>를 사용한다. 그러나 Composition API는 <code>this</code> 컨텍스트가 없기 때문에 <code>setup(props, context)</code>의 두 번째 인자로 전달되는 <code>context.root.$store</code>를 통하여 Vuex를 사용한다.</p><p><code>useXXX</code> 형태로 사용하면 다른 코드들과 잘 어울리리라 생각한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>SetupContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/composition-api&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">context</span><span class="token operator">:</span> SetupContext</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">$store</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">,</span>
        getters<span class="token punctuation">,</span>
        commit<span class="token punctuation">,</span>
        dispatch<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    getters<span class="token punctuation">,</span>
    commit<span class="token punctuation">,</span>
    dispatch<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>state</code>는 <code>reactive</code>와 <code>ref</code>를 통해 반응형 상태를 만들어도 <code>mutation</code>을 감지하지 못하기 때문에 <code>state</code>를 직접 사용해야 한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>

    <span class="token keyword">const</span> fetchCheckLogin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;auth/fetchCheckLogin&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> fetchLogout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;auth/fetchLogout&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> isLogin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token operator">?.</span>auth<span class="token operator">?.</span>auth<span class="token operator">?.</span>success
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> toAuthTitle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;로그아웃&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;로그인&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> logout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fetchLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fetchCheckLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      toAuthTitle<span class="token punctuation">,</span>
      logout
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="state-이름-충돌" tabindex="-1"><a class="header-anchor" href="#state-이름-충돌" aria-hidden="true">#</a> state 이름 충돌</h2><p><code>reactive</code>로 정의한 반응형 상태와 <code>useStore</code>를 통해 사용하는 스토어 상태의 변수명을 <code>state</code>로 사용하고 있다. <code>setup()</code> 내부에 사용할 경우 충돌이 되기 때문에 변수명의 변경이 필요하다.</p><p><code>store</code>를 네임스페이스로 가지는 것도 하나의 대안이다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// store.state로 접근</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="state-접근" tabindex="-1"><a class="header-anchor" href="#state-접근" aria-hidden="true">#</a> state 접근</h2><p>모듈 형태인 state는 사용 시 깊은 접근이 필요하다. <code>computed</code>를 사용하면 기존 옵션 API 처럼 사용가능하다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    auth<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>authModule<span class="token punctuation">.</span>auth<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="useaction" tabindex="-1"><a class="header-anchor" href="#useaction" aria-hidden="true">#</a> useAction</h2><p>사용측에서 모듈명과 액션명은 이벤트 기반이기 때문에 런타임에서만 정상 작동을 확인할 수 있다. <code>useAction</code>는 컴파일타임에 모듈명과 액션명이 정상적으로 사용되었음을 확인하기 위해 만들어졌다.</p><p><code>ModuleActions</code>에서 key는 모듈명, value는 액션명으로 타입을 정의했다.</p><ul><li>모듈명과 파일명이 동일하도록 하드코딩해야 한다.</li><li>액션명은 <code>keyof typeof T</code> 형태로 타입이 정의되기 때문에 액션이 추가되면 자동으로 반영된다.</li></ul><p>먼저 모듈명에 대해 타입 체크한 뒤, 해당 모듈의 액션명을 타입 체크한다. 하나라도 정의된 명을 사용하지 않으면 컴파일 타입 에러가 발생한다.</p><h3 id="use-usestoreaction-ts" tabindex="-1"><a class="header-anchor" href="#use-usestoreaction-ts" aria-hidden="true">#</a> /use/useStoreAction.ts</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Dispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> actions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;~/store/auth&#39;</span>
<span class="token keyword">import</span> notice <span class="token keyword">from</span> <span class="token string">&#39;~/store/notice&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">ModuleActions</span> <span class="token punctuation">{</span>
  auth<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> actions
  notice<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> notice<span class="token punctuation">.</span>actions
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">ActionHandle<span class="token operator">&lt;</span>Keys <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStoreAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token operator">:</span> Dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useAction</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ModuleActions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    moduleName<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    actions<span class="token operator">:</span> ModuleActions<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> ActionHandle<span class="token operator">&lt;</span>ModuleActions<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>actions<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> useAction <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),r={href:"https://vuex.vuejs.org/guide/actions.html#dispatching-actions-in-components",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> useAction <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStoreAction</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> fetchCheckLogin<span class="token punctuation">,</span> fetchLogout <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAction</span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;fetchCheckLogin&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;fetchLogout&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usegetter" tabindex="-1"><a class="header-anchor" href="#usegetter" aria-hidden="true">#</a> useGetter</h2><p><a href="#useAction">useAction</a>과 같은 이유로 만들어진 Getter를 사용하기 위한 함수이다.</p><h3 id="use-usestoregetter-ts" tabindex="-1"><a class="header-anchor" href="#use-usestoregetter-ts" aria-hidden="true">#</a> /use/useStoreGetter.ts</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;~/store/auth&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">ModuleGetters</span> <span class="token punctuation">{</span>
  auth<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> getters
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Getters<span class="token operator">&lt;</span>Keys <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStoreGetter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>getters<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useGetter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ModuleGetters<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    moduleName<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    moduleGetters<span class="token operator">:</span> ModuleGetters<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> Getters<span class="token operator">&lt;</span>ModuleGetters<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>moduleGetters<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> getters<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> useGetter <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getter는 인자를 받지 않는 함수로 만들어진다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> getters <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> useGetter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStoreGetter</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetter</span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;isLogin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> toAuthTitle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;로그아웃&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;로그인&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="useaction-usegetter-이점" tabindex="-1"><a class="header-anchor" href="#useaction-usegetter-이점" aria-hidden="true">#</a> useAction, useGetter 이점</h2><h3 id="타입-추론" tabindex="-1"><a class="header-anchor" href="#타입-추론" aria-hidden="true">#</a> 타입 추론</h3><p>Store 모듈에 정의된 <code>Action</code>과 <code>Getter</code>의 타입을 추론할 수 있다.</p><h3 id="ide-지원" tabindex="-1"><a class="header-anchor" href="#ide-지원" aria-hidden="true">#</a> IDE 지원</h3><p>정의부를 찾아주는 기능(Navigate to declaration)과 이름변경 기능(Rename 또는 Refactor)을 사용할 수 있다. 기존의 Vuex는 이러한 기능을 사용할 때 제한이 있었다.</p><h3 id="재사용성-향상" tabindex="-1"><a class="header-anchor" href="#재사용성-향상" aria-hidden="true">#</a> 재사용성 향상</h3><p>두 함수는 <code>setup()</code>의 Context에 의존하지 않는다. <code>useStoreAction</code>는 <code>Dispatch</code>에 의존하고, <code>useStoreGetter</code>는 <code>object</code> 타입에 의존한다. 즉, Middleware에서 재사용을 가능하게 해준다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStoreGetter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;~/use/useStoreGetter&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useStoreAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;~/use/useStoreAction&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> store<span class="token operator">:</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getters <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> useAction <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStoreAction</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStoreGetter</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> fetchCheckLogin<span class="token punctuation">,</span> fetchLogout <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAction</span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;fetchCheckLogin&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;fetchLogout&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetter</span><span class="token punctuation">(</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;isLogin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fetchCheckLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fetchLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usestoreplugin" tabindex="-1"><a class="header-anchor" href="#usestoreplugin" aria-hidden="true">#</a> useStorePlugin</h2><blockquote><p>ActionTree를 사용하지 않고 Plugin을 사용한 케이스</p></blockquote><p>Store에 ActionTree 타입을 사용하면 <code>Action명([key: string])</code>을 오직 <code>string</code> 으로 추론한다. 이에 대한 영향으로 useAction은 의도와 다르게 동작한다.</p><h4 id="vuex-types-index-d-ts" tabindex="-1"><a class="header-anchor" href="#vuex-types-index-d-ts" aria-hidden="true">#</a> /vuex/types/index.d.ts</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ActionTree<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약에 ActionTree를 사용하지 않을 경우 Store내에서 <code>this</code>를 통해 플러그인에 접근할 수 없다. 그래서 고안해낸 방법이 useStorePlugin이며 이를 통해 플러그인에 접근할 수 있다.</p><h3 id="use-usestoreplugin-ts" tabindex="-1"><a class="header-anchor" href="#use-usestoreplugin-ts" aria-hidden="true">#</a> /use/useStorePlugin.ts</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStorePlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> $axios <span class="token punctuation">}</span> <span class="token operator">=</span> store <span class="token keyword">as</span> Store<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> $axios <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="store-auth-ts" tabindex="-1"><a class="header-anchor" href="#store-auth-ts" aria-hidden="true">#</a> /store/auth.ts</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">fetchCheckLogin</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> $axios <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useStorePlugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> $axios<span class="token punctuation">.</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token string">&#39;/check_login&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usestoreaction-usestoregetter-간소화" tabindex="-1"><a class="header-anchor" href="#usestoreaction-usestoregetter-간소화" aria-hidden="true">#</a> useStoreAction, useStoreGetter 간소화</h2><p>앞서 소개한 코드를 통하여 개발을 진행 했을 때 코드베이스가 <s>대폭까진 아니고</s>소폭 증가했다. 그래서 기존에 사용 중이던 코드에 대해 동작은 동일하되 코드베이스를 간소화시키는 방안이 필요했다.</p><p>우선 useStoreAction 사용부를 개선할 필요가 있다고 느꼈다. useStoreAction 사용부를 보면 무언가 많이 작성해줘야 하는 게 너무 많다. 현재 useStoreAction 사용부에는 <code>1) 사용할 모듈</code>, <code>2) 사용할 함수</code>, <code>3) 사용할 함수 해체의 코드</code> 등이 기술 되고 있다.</p><p>useStoreAction의 목적은 <code>타입 추론을 통한 선언부 추적</code>에 대한 비중이 크기 때문에 타입 추론 부분 이외에 대한 개선이 필요하다.</p><p>개선한 방향은 단순히 <code>1) 사용할 모듈</code>만 기술하는 것이다.</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const { fetchCheckLogin, fetchLogout } = useAction(&#39;auth&#39;, [
</span><span class="token prefix deleted">-</span><span class="token line">   &#39;fetchCheckLogin&#39;,
</span><span class="token prefix deleted">-</span><span class="token line">   &#39;fetchLogout&#39;
</span><span class="token prefix deleted">-</span><span class="token line"> ])
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const authActions = useAction(&#39;auth&#39;)
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-usestoreaction-ts-1" tabindex="-1"><a class="header-anchor" href="#use-usestoreaction-ts-1" aria-hidden="true">#</a> /use/useStoreAction.ts</h3><p>useStoreAction는 모듈명을 인자로 받고 액션을 모두 반환한다. 변경된 부분은 다음과 같다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> actionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;auth&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;notice&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>notice<span class="token punctuation">.</span>actions<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStoreAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token operator">:</span> Dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useAction</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ModuleActions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    moduleName<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
    actions<span class="token operator">?</span><span class="token operator">:</span> ModuleActions<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> ActionHandle<span class="token operator">&lt;</span>ModuleActions<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> actions <span class="token operator">||</span> actionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> useAction <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function d(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("사용 측은 "),s("a",r,[n("mapActions"),i(t)]),n("와 유사한 형태로 사용한다. 첫 번째 인자는 모듈명, 두 번째 인자는 액션명을 배열로 사용하며 return type은 객체이기 때문에 Destructuring 하여 사용할 수 있다.")]),k])}const h=e(l,[["render",d],["__file","vuex-in-composition-api.html.vue"]]);export{h as default};
