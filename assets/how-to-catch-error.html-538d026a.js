import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-8f51c971.js";const p={},o=t(`<h1 id="에러-처리-정리" tabindex="-1"><a class="header-anchor" href="#에러-처리-정리" aria-hidden="true">#</a> 에러 처리 정리</h1><blockquote><p>2019년 5월 23일에 진행 중인 프로젝트에서 에러 처리 방법을 고민하면서 정리한 포스트입니다.</p></blockquote><h2 id="글의-목적" tabindex="-1"><a class="header-anchor" href="#글의-목적" aria-hidden="true">#</a> 글의 목적</h2><p><strong>에러 처리</strong>는 소프트웨어의 비정상적인 동작에 대한 큰 사고로 이어지지 않도록 <strong>예방</strong>하는 것이다. 서비스 운영에 있어서는 사용자들이 서비스를 비정상적으로 사용하는 부분이 있는 지 감지를 할 수 있다.</p><p>오랜 시간동안 에러 처리에 대한 연구가 계속 되었고 지금까지 발전이 되어왔다. 어떠한 과정을 통해서 지금의 에러 처리 방법을 가지게 되었는 지 정리한 포스트이다.</p><h2 id="목차" tabindex="-1"><a class="header-anchor" href="#목차" aria-hidden="true">#</a> 목차</h2><ul><li>실패를 전달하는 방법 <ul><li>반환값으로 실패 전달</li><li>try-catch 에러 처리</li><li>throw 명시적 선언</li></ul></li><li>어떻게 에러 처리를 해야 할까 <ul><li>컨테이너</li><li>같은 타입 반환</li><li>async 함수로 에러 처리</li></ul></li><li>종합적인 결론</li></ul><h2 id="실패를-전달하는-방법" tabindex="-1"><a class="header-anchor" href="#실패를-전달하는-방법" aria-hidden="true">#</a> 실패를 전달하는 방법</h2><p>사고 발생 시 큰 사고로 이어지지 않도록 <strong>실패를 알리는 구조</strong>가 <strong>에러 처리</strong>이다.</p><h3 id="반환값으로-실패-전달" tabindex="-1"><a class="header-anchor" href="#반환값으로-실패-전달" aria-hidden="true">#</a> 반환값으로 실패 전달</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getCountry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> school <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>school <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> addr <span class="token operator">=</span> school<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> country <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> country
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;국가 조회 중 에러 발생!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>에러 처리 중 반환값으로 실패를 전달하는 방법이 있다. 호출하는 코드에서 반환값을 체크해서 에러를 처리하는 방법이다.</p><p>하지만 이 방법에는 두가지 문제점이 있다.</p><ul><li><strong>첫번째</strong>는 프로그래머가 반환값 확인을 잊어버렸을 때 <strong>실패를 놓치게 된다</strong>. 실패를 놓쳐 <strong>연쇄적으로 문제가 발생</strong>할 수 있다.</li><li><strong>두번째</strong>는 <strong>원래 하고 싶은 것을 기술한 코드</strong>사이에 <strong>실패했을 경우의 코드</strong>가 채워져 코드를 해석하기 어려워진다.</li></ul><h3 id="try-catch-에러-처리" tabindex="-1"><a class="header-anchor" href="#try-catch-에러-처리" aria-hidden="true">#</a> try-catch 에러 처리</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getCountry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> school <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> addr <span class="token operator">=</span> school<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> country <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;국가 조회 중 에러 발생!&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>명령형 코드에서 예외를 붙잡아 던지는 방법은 <strong>try-catch 에러 처리</strong>가 있다. 예외를 던질 가능성이 있는 것들을 <strong>try</strong>를 감싸고 예외를 발생하면 <strong>catch</strong>에서 처리하는 것이다. <strong>반환값으로 실패 전달</strong>의 단점을 해결하여 <strong>원래하고 싶은 것을 기술한 코드</strong>와 <strong>실패했을 때의 처리</strong>를 분리할 수 있다.</p><p>하지만 try-catch에서도 단점이 존재한다.</p><ul><li><strong>첫번째</strong>는 다른 함수형 장치처럼 <strong>합성</strong>이나 <strong>체이닝</strong>을 할 수 없다.</li><li><strong>두번째</strong>는 예외를 던지는 행위는 함수 호출에서 빠져나갈 구멍을 찾는 것임으로 단일한, 예측 가능한 값을 지향하는 참조 <strong>투명성 원리</strong>에 위배된다.</li><li><strong>세번째</strong>는 예기치 않게 스택이 풀리면 함수 호출 범위를 벗어나 전체 시스템에 영향을 미치는 <strong>부수 효과</strong>를 일으킨다.</li></ul><h3 id="throw-명시적-선언" tabindex="-1"><a class="header-anchor" href="#throw-명시적-선언" aria-hidden="true">#</a> throw 명시적 선언</h3><p>Java에서는 try-catch의 단점을 해결하기 위해 <strong>어떤 예외를 전달지 명시적으로 선언</strong>하는 구조를 채택해서 사용했다. 예외 처리에 대한 세분화하여 처리를 한다.</p><ul><li>예외 처리를 하지 않아도 되는 중요한 문제</li><li>예외 처리를 해도 좋은 실행 시 예외</li><li>예외 처리를 해도 좋은 기타 예외</li></ul><p>여기서 기타 예외가 명시적으로 선언해줄 필요가 있는 부분이다. 그것을 위해 준비되어 있는 것이 <strong>throw 절</strong>이다. 다음 코드에는 <code>void shippai () throws MyException</code>라고 쓰여있다. 이것은 메소드는 <strong>MyException 예외를 던질 가능성이 있다</strong>는 선언이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">shippai</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> throws MyException <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>검사 예외 사용을 깜박하고 예외를 던질 가능성을 놓쳐버리는 일 따위는 발생하지 않게 된다. 예외를 던질 가능성이 있는 메소드를 호출할 경우 메소드가 던지는 예외를 그대로 호출처로 전달할지 아니면 메소드가 던지는 예외를 자신이 처리할지 둘 중 하나를 선택해서 구현하게 된다. 어느 쪽도 동작하지 않는 경우는 놓친 것을 컴파일러가 지정해준다.</p><p>이 방법은 <strong>언어에서 검사 예외를 지원</strong>해야 한다. 검사 예외는 매우 좋은 기능 처럼 보이지만 <strong>다른 언어에서 잘 채용되지 않고 있다</strong>. 그 이유는 throws나 try-catch에 기술하는 <strong>예외의 갯수가 너무 방대</strong>해 지거나. 어떤 메소드에서 던질 <strong>예외를 하나 추가하면</strong> 그 메소드를 호출하고 있는 <strong>모든 메소드를 수정</strong>해야 되기 때문이다.</p><h2 id="어떻게-에러-처리를-해야-할까" tabindex="-1"><a class="header-anchor" href="#어떻게-에러-처리를-해야-할까" aria-hidden="true">#</a> 어떻게 에러 처리를 해야 할까</h2><p><strong>함수형 에러 처리</strong>에서 아이디어를 얻을 수 있다.</p><p><strong>첫번째</strong>는 잠재적으로 위험한 코드 주위에 <strong>안전망</strong>(<strong>컨테이너</strong>)를 설치하는 것이다. 값을 컨테이너화 하는 행위는 <strong>함수형 프로그램의 기본 디자인 패턴</strong>이다. 값을 안정적으로 다루도 불편성을 지키기 위해 직접 접근을 차단하는 것이다. 이렇게 감싼 값에 접근하는 유일한 방법은 연산을 컨테이너에 매핑하는 것이다.</p><p><strong>두번째</strong>는 항상 같은 타입을 반환하도록 <strong>값 흘리기</strong>를 하는 것이다. 비정상적인 상황에도 에러를 발생하지 않고 인자와 동일한 타입으로 값을 리턴하는 것이다. 값을 리턴할 때는 빈값을 전달하게 된다.</p><h3 id="컨테이너" tabindex="-1"><a class="header-anchor" href="#컨테이너" aria-hidden="true">#</a> 컨테이너</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>함수 합성할 때 비정상적인 값이 할당되면 에러를 발생한다. 하지만 컨테이너에 담에 함수 합성을 하게 되면 비정상적인 효과를 만들지 않는 다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Not Cool</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// Cool</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>현실세계에서는 특정 데이터를 추출하고 함수를 사용하는 경우가 있다. 이럴 때도 컨테이너를 사용하면 안전하게 함수 합성을 할 수 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;AA&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;CC&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">// Not Cool</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;DD&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;name&#39; of undefined</span>

<span class="token comment">// Cool</span>
users
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;DD&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="같은-타입-반환" tabindex="-1"><a class="header-anchor" href="#같은-타입-반환" aria-hidden="true">#</a> 같은 타입 반환</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">list</span> <span class="token operator">=&gt;</span> list
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>함수에서 에러가 발생하는 경우는 두가지를 볼 수 있다. <code>list</code> 인자가 배열이 아닐 때, <code>map</code>, <code>filter</code>에 사용된 함수들이 에러를 발생할 때이다. 이런 경우에 항상 같은 값을 반환하면 안전하게 함수 합성을 할 수 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">list</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> list
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [11, 13]</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-함수로-에러-처리" tabindex="-1"><a class="header-anchor" href="#async-함수로-에러-처리" aria-hidden="true">#</a> async 함수로 에러 처리</h3><p>async 함수에서는 함수 내부에서 발생한 <strong>동기에러</strong>와 <strong>Promise의 reject 상태</strong>를 catch에서 처리할 수 있다.</p><h4 id="동기-에러" tabindex="-1"><a class="header-anchor" href="#동기-에러" aria-hidden="true">#</a> 동기 에러</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> die<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;에러 발생!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 에러 발생!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="promise-reject" tabindex="-1"><a class="header-anchor" href="#promise-reject" aria-hidden="true">#</a> Promise reject</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Hi!&#39;</span><span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;에러 발생!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 에러 발생!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="promise-내부-에러" tabindex="-1"><a class="header-anchor" href="#promise-내부-에러" aria-hidden="true">#</a> Promise 내부 에러</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>die<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;에러 발생!&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 에러 발생!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="종합적인-결론" tabindex="-1"><a class="header-anchor" href="#종합적인-결론" aria-hidden="true">#</a> 종합적인 결론</h2><p>종합적으로는 <strong>컨테이너</strong>와 <strong>async 함수</strong>를 사용하는 방법으로 코드를 기술하는 방법을 선택하게 되었다.</p><p>데이터 상에서 잠재적으로 위험이 있는 사항은 <strong>컨테이너</strong>를 통해 <strong>안전한 함수 합성</strong>을 하고 <strong>async 함수</strong>를 통해 예외적인 상황을 알리는 형태로 에러 처리를 하는 것이다. 그리고 <strong>에러 처리 부분</strong>은 <strong>제작과 사용 관심을 분리</strong>하여 호출자에서 정의하면 기존의 에러 처리의 단점을 해결할 수 있다고 생각한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 에러 처리와 사용</span>
<span class="token keyword">const</span> <span class="token function-variable function">onClickSaveBtn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;계획되로군&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;되는게없네&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 로직 제작 부분</span>
<span class="token keyword">const</span> <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> file
  <span class="token keyword">const</span> imageInfo <span class="token operator">=</span> <span class="token function">getImageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>imageInfo <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    file <span class="token operator">=</span> <span class="token function">getFile</span><span class="token punctuation">(</span>imageInfo<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> imageFileInfo <span class="token operator">=</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>imageInfo<span class="token punctuation">)</span>    
    file <span class="token operator">=</span> <span class="token function">getFile</span><span class="token punctuation">(</span>imageFileInfo<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="끝" tabindex="-1"><a class="header-anchor" href="#끝" aria-hidden="true">#</a> 끝</h2><h3 id="참고자료" tabindex="-1"><a class="header-anchor" href="#참고자료" aria-hidden="true">#</a> 참고자료</h3><ul><li>함수형 자바스크립트 - 루이스 아텐시오</li><li>코딩을 지탱하는 기술</li></ul>`,56),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","how-to-catch-error.html.vue"]]);export{k as default};
