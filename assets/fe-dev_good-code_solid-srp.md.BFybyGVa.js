import{_ as e,c as o,o as t,a3 as s}from"./chunks/framework.COm4hYgr.js";const S=JSON.parse('{"title":"단일 책임 원칙","description":"","frontmatter":{"title":"단일 책임 원칙"},"headers":[],"relativePath":"fe-dev/good-code/solid-srp.md","filePath":"fe-dev/good-code/solid-srp.md"}'),i={name:"fe-dev/good-code/solid-srp.md"},r=s('<h1 id="solid-원칙-시리즈-단일-책임-원칙" tabindex="-1">SOLID 원칙 시리즈 - 단일 책임 원칙 <a class="header-anchor" href="#solid-원칙-시리즈-단일-책임-원칙" aria-label="Permalink to &quot;SOLID 원칙 시리즈 - 단일 책임 원칙&quot;">​</a></h1><h2 id="srp-단일-책임-원칙-single-responsibility-principle" tabindex="-1">SRP: 단일 책임 원칙 (Single Responsibility Principle) <a class="header-anchor" href="#srp-단일-책임-원칙-single-responsibility-principle" aria-label="Permalink to &quot;SRP: 단일 책임 원칙 (Single Responsibility Principle)&quot;">​</a></h2><p>역사적으로 SRP는 &quot;단일 모듈은 변경의 이유가 하나. 오직 하나뿐이어야 한다.&quot;로 기술되어 있다.</p><p><strong>변경의 이유</strong>는 무엇을 의미하는 할까? 소프트웨어 시스템은 사용자와 이해관계자를 만족시키기 위해 변경된다. SRP가 말하는 <strong>변경의 이유</strong>는 바로 이들 사용자와 이해관계자를 가리킨다.</p><p><strong>단일 모듈</strong>은 무엇을 의미하는 할까? 가장 단순한 정의는 소스파일이다. 대부분의 경우 이 정의는 잘 들어 맞는다. 하지만 일부 언어와 개발 환경에서는 코드를 소스파일에 저장하지 않는다. 이러한 경우 모듈은 단순히 함수와 데이터 구조로 구성된 <strong>응집된</strong> 집합이다.</p><p><strong>응집된</strong>이라는 단어가 SRP를 암시한다. 단일 액터를 책임지는 코드를 함께 묶어주는 힘이 바로 응집성(cohesion)이다. 여기서 <strong>액터</strong>는 시스템 변경을 요청하는 한 명 이상의 사람들을 가리킨다.</p><h4 id="srp를-위반하는-징후" tabindex="-1">SRP를 위반하는 징후 <a class="header-anchor" href="#srp를-위반하는-징후" aria-label="Permalink to &quot;SRP를 위반하는 징후&quot;">​</a></h4><ul><li>우발적인 중복으로 사이드 이펙트 발생</li><li>코드 병합 시 발생하는 빈번한 충돌</li></ul>',8),a=[r];function n(l,d,p,c,_,h){return t(),o("div",null,a)}const P=e(i,[["render",n]]);export{S as __pageData,P as default};
