import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-e7b3b96f.js";const p={},e=t(`<h1 id="도서-리뷰-시리즈-리팩토링" tabindex="-1"><a class="header-anchor" href="#도서-리뷰-시리즈-리팩토링" aria-hidden="true">#</a> 도서 리뷰 시리즈 - 리팩토링</h1><h2 id="출처" tabindex="-1"><a class="header-anchor" href="#출처" aria-hidden="true">#</a> 출처</h2><p>『리팩토링』 마틴 파울러 저 / 김지원 역 | 한빛미디어 | 2012년 11월</p><h2 id="한-줄-리뷰" tabindex="-1"><a class="header-anchor" href="#한-줄-리뷰" aria-hidden="true">#</a> 한 줄 리뷰</h2><p>리팩토링의 모든 것을 알려주는 도서</p><h2 id="리팩토링-이란" tabindex="-1"><a class="header-anchor" href="#리팩토링-이란" aria-hidden="true">#</a> 리팩토링 이란</h2><p>리팩토링은 겉으로 드러나는 기능은 그대로 둔 채, 알아보기 쉽고 수정하기 간편하게 소프트웨어 내부를 수정하는 작업이다. 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만들어 겉으로 드러나는 기능에 거의 또는 아예 영향을 주지 않으면서 소프트웨어의 각종 기능을 추가할 수 있다. 리팩토링 수행 후에 겉으로 드러나는 기능에 영향을 주지 않기 때문에 사용자는 소프트웨어의 변화를 눈치채지 못한다.</p><p>리팩토링은 <strong>성능 최적화</strong>와 상반되는 데, 같은 점은 수행 후에 기능이 변경되지 않는 것이다. 다른 점은 성능 최적화는 성능 향상을 위해 불가피하게 필요한 성능을 내기 위해 코드를 파악하기 더 어려워질 때가 많다.</p><p>리팩토링과 <strong>기능 추가</strong>는 동시에 진행되면 안된다. 동시에 진행하게 된다면 이슈 발생시 리팩토링으로 인한 이슈인지 기능상의 이슈인지 파악하기 어렵기 때문이다. 기능 추가시에 테스트 코드를 같이 추가하여 추후에 리팩토링 시 기능상의 이슈가 발생하지 않도록 해야 한다.</p><h2 id="리팩토링의-결과" tabindex="-1"><a class="header-anchor" href="#리팩토링의-결과" aria-hidden="true">#</a> 리팩토링의 결과</h2><ol><li><p>소프트웨어 설계 개선 단기적인 목적 때문에 코드를 수정하거나 코드의 설계를 완벽히 이해하지 않고 코드를 수정하면, 코드 구조가 뒤죽박죽되어 그 코드를 보고 설계를 파악하기가 어려워져 프로그램 설계가 점점 노후 된다. 정기적으로 리팩토링을 실시하면 코드 설계가 깔끔해진다.</p></li><li><p>소프트웨어 이해 쉬워짐 기능을 추가하면서 설계한 것들을 모두 기억할 수 없기 때문에 코드를 깔끔하게 만들지 않으면 복잡한 내용을 이해할 수 없다.</p></li><li><p>버그 찾기 쉬워짐 코드 리팩토링하면 구조가 명료하게 만들어서 디버그 시 쉽게 버그를 찾을 수 있다.</p></li><li><p>프로그래밍 속도 빨라짐 리팩토링을 하지 않으면 소프트웨어 개발이 진행되면서 개발 속도가 현저히 줄어들게 된다. 설계가 정돈되지 않으면 기능 추가 시 시간이 오래 걸릴 수 밖에 없으며, 버그 찾기에 많은 시간을 낭비하게 된다. 프로그래밍 속도를 빠르게 하려면 깔끔한 설계를 유지해 설계가 노후화되지 않게 해야 한다.</p></li></ol><h1 id="메서드-정리" tabindex="-1"><a class="header-anchor" href="#메서드-정리" aria-hidden="true">#</a> 메서드 정리</h1><p>이 코드는 리팩터링에서 소개된 자바를 자바스크립트로 변경한 코드입니다. 좀 더 유용한 예제는 자바스크립트로 예제를 작성한 리팩터링 2판에서 볼 수 있습니다.</p><h2 id="메서드-추출-extract-method" tabindex="-1"><a class="header-anchor" href="#메서드-추출-extract-method" aria-hidden="true">#</a> 메서드 추출(Extract Method)</h2><p>어떤 코드를 그룹으로 묶어도 되겠다고 판단될 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> <span class="token function-variable function">printOwing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">amount:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> <span class="token function-variable function">printOwing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">printDetails</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">printDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">amount:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="메서드-내용-직접-삽입-inline-method" tabindex="-1"><a class="header-anchor" href="#메서드-내용-직접-삽입-inline-method" aria-hidden="true">#</a> 메서드 내용 직접 삽입(Inline Method)</h2><p>매서드 기능이 너무 단순해서 메서드명만 봐도 너무 뻔할 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> <span class="token function-variable function">moreThanFiveLateDeliveries</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> _numberOfLateDeliveries <span class="token operator">&gt;</span> <span class="token number">5</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">getRating</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">moreThanFiveLateDeliveries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> <span class="token function-variable function">getRating</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>_numberOfLateDeliveries <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="임시변수-내용-직접-삽입-inline-temp" tabindex="-1"><a class="header-anchor" href="#임시변수-내용-직접-삽입-inline-temp" aria-hidden="true">#</a> 임시변수 내용 직접 삽입(Inline Temp)</h2><p>간단한 수식을 대입받는 임시변수로 인해 다른 리팩토링 기법 적용이 힘들 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> basePrice <span class="token operator">=</span> anOrder<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> basePrice <span class="token operator">&gt;</span> <span class="token number">1000</span>

<span class="token comment">// After</span>
<span class="token keyword">return</span> anOrder<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="임시변수를-메서드-호출로-변환-replace-temp-with-query" tabindex="-1"><a class="header-anchor" href="#임시변수를-메서드-호출로-변환-replace-temp-with-query" aria-hidden="true">#</a> 임시변수를 메서드 호출로 변환(Replace Temp with Query)</h2><p>수식의 결과를 저장하는 임시변수가 있을 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> basePrice <span class="token operator">=</span> _quantity <span class="token operator">*</span> _itemPrice
<span class="token keyword">if</span> <span class="token punctuation">(</span>basePrice <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> basePrice <span class="token operator">*</span> <span class="token number">0.95</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> basePrice <span class="token operator">*</span> <span class="token number">0.98</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> <span class="token function-variable function">basePrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _quantity <span class="token operator">*</span> _itemPrice
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.95</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.98</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="직관적-임시변수-사용-introduce-explaining-variable" tabindex="-1"><a class="header-anchor" href="#직관적-임시변수-사용-introduce-explaining-variable" aria-hidden="true">#</a> 직관적 임시변수 사용(Introduce Explaining Variable)</h2><p>사용된 수식이 복잡할 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
  platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;MAC&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
  browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;IE&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
  <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 기능 코드  </span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> isMacOs <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;MAC&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">const</span> isIEBrowser <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;IE&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> 
<span class="token keyword">const</span> wasResized <span class="token operator">=</span> resize <span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> isMacOs <span class="token operator">&amp;&amp;</span> isIEBrowser <span class="token operator">&amp;&amp;</span> <span class="token function">wasInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wasResized <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 기능 코드  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="임시변수-분리-split-temporary-variable" tabindex="-1"><a class="header-anchor" href="#임시변수-분리-split-temporary-variable" aria-hidden="true">#</a> 임시변수 분리(Split Temporary Variable)</h2><p>루프 변수나 값 누적용 임시변수가 아닌 임시변수에 여러 번 값이 대입될 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_height <span class="token operator">+</span> _width<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
temp <span class="token operator">=</span> _height <span class="token operator">*</span> _width
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_height <span class="token operator">+</span> _width<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>perimeter<span class="token punctuation">)</span>
<span class="token keyword">const</span> area <span class="token operator">=</span> _height <span class="token operator">*</span> _width
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="매개변수로의-값-대입-제거-remove-assignments-to-parameters" tabindex="-1"><a class="header-anchor" href="#매개변수로의-값-대입-제거-remove-assignments-to-parameters" aria-hidden="true">#</a> 매개변수로의 값 대입 제거(Remove Assignments to Parameters)</h2><p>매개변수로 값을 대입하는 코드가 있을 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> <span class="token function-variable function">discount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputVal <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputVal <span class="token operator">-=</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> <span class="token function-variable function">discount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> inputVal
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputVal <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">-=</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="메서드를-메서드-객체로-전환-replace-method-with-method-object" tabindex="-1"><a class="header-anchor" href="#메서드를-메서드-객체로-전환-replace-method-with-method-object" aria-hidden="true">#</a> 메서드를 메서드 객체로 전환(Replace Method with Method Object)</h2><p>지역변수 때문에 메서드 추출을 적용할 수 없는 긴 메서드가 있을 때</p><p>그 메서드 자체를 객체로 전환해서 모든 지역변수를 객체의 필드로 만들자. 그런 다음 그 메서드를 객체 안의 여러 메서드로 쪼개면 된다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
  <span class="token function">gamma</span> <span class="token punctuation">(</span><span class="token parameter">inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> val1 <span class="token operator">=</span> <span class="token punctuation">(</span>inputVal <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token punctuation">(</span>inputVal <span class="token operator">*</span> yearToDate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>yearToDate <span class="token operator">-</span> val1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val2 <span class="token operator">-=</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> val3 <span class="token operator">=</span> val2 <span class="token operator">*</span> <span class="token number">7</span>
    
    <span class="token keyword">return</span> val3 <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> val1
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">class</span> <span class="token class-name">Gamma</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source
    <span class="token keyword">this</span><span class="token punctuation">.</span>inputVal <span class="token operator">=</span> inputVal
    <span class="token keyword">this</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> quantity
    <span class="token keyword">this</span><span class="token punctuation">.</span>yearToDate <span class="token operator">=</span> yearToDate
  <span class="token punctuation">}</span>
  <span class="token function">compute</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> val1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputVal <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>quantity<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputVal <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>yearToDate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yearToDate <span class="token operator">-</span> val1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val2 <span class="token operator">-=</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> val3 <span class="token operator">=</span> val2 <span class="token operator">*</span> <span class="token number">7</span>
    
    <span class="token keyword">return</span> val3 <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> val1
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
  <span class="token function">gamma</span> <span class="token punctuation">(</span><span class="token parameter">inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gamma</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> inputVal<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> yearToDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="알고리즘-전환-substitute-algorithm" tabindex="-1"><a class="header-anchor" href="#알고리즘-전환-substitute-algorithm" aria-hidden="true">#</a> 알고리즘 전환(Substitute Algorithm)</h2><p>알고리즘을 더 분명한 것으로 교체해야 할 때</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token keyword">const</span> <span class="token function-variable function">foundPerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">people</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> people<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Don&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;Don&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;John&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Kent&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;Kent&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> <span class="token function-variable function">foundPerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">people</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Don&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kent&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> people<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","3.html.vue"]]);export{k as default};
