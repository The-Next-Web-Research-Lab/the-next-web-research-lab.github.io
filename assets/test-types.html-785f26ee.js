const e=JSON.parse('{"key":"v-5836801d","path":"/fe-dev/refactoring/test-types.html","title":"테스트 종류 한장에 정리","lang":"ko-KR","frontmatter":{"title":"테스트 종류 한장에 정리","description":"테스트 종류 유닛 테스트 유닛 테스트는 코드의 특정 모듈이 의도된 대로 정확히 동작하는지 검증하는 방법입니다. 모든 함수와 메서드에 대한 테스트 케이스를 작성하게 됩니다. 이상적으로 각 테스트 케이스는 서로 분리되어야 하며, 이를 통해서 언제라도 코드 변경으로 인해 문제가 발생할 경우, 빠른 시간 내에 문제를 파악하고 해결할 수 있도록 도와줍니다. 이를 위해서 Mock Object를 생성하는 것도 좋은 방법입니다. 유닛 테스트는 개발자뿐만 아니라 테스터에 의해서 수행되기도 하고, 테스터가 유닛 테스트를 작성하면 개발자가 맞춰서 개발하는 사례도 있습니다.","head":[["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/refactoring/test-types.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"테스트 종류 한장에 정리"}],["meta",{"property":"og:description","content":"테스트 종류 유닛 테스트 유닛 테스트는 코드의 특정 모듈이 의도된 대로 정확히 동작하는지 검증하는 방법입니다. 모든 함수와 메서드에 대한 테스트 케이스를 작성하게 됩니다. 이상적으로 각 테스트 케이스는 서로 분리되어야 하며, 이를 통해서 언제라도 코드 변경으로 인해 문제가 발생할 경우, 빠른 시간 내에 문제를 파악하고 해결할 수 있도록 도와줍니다. 이를 위해서 Mock Object를 생성하는 것도 좋은 방법입니다. 유닛 테스트는 개발자뿐만 아니라 테스터에 의해서 수행되기도 하고, 테스터가 유닛 테스트를 작성하면 개발자가 맞춰서 개발하는 사례도 있습니다."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-07-19T07:09:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"테스트 종류 한장에 정리"}],["meta",{"property":"article:modified_time","content":"2023-07-19T07:09:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"테스트 종류 한장에 정리\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-07-19T07:09:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"유닛 테스트","slug":"유닛-테스트","link":"#유닛-테스트","children":[]},{"level":2,"title":"정적 테스트","slug":"정적-테스트","link":"#정적-테스트","children":[]},{"level":2,"title":"통합 테스트","slug":"통합-테스트","link":"#통합-테스트","children":[]},{"level":2,"title":"회귀 테스트","slug":"회귀-테스트","link":"#회귀-테스트","children":[]}],"git":{"createdTime":1689750540000,"updatedTime":1689750540000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":0.07,"words":20},"filePathRelative":"fe-dev/refactoring/test-types.md","localizedDate":"2023년 7월 19일","excerpt":"<h1> 테스트 종류</h1>\\n<h2> 유닛 테스트</h2>\\n<p>유닛 테스트는 코드의 특정 모듈이 의도된 대로 정확히 동작하는지 검증하는 방법입니다. 모든 함수와 메서드에 대한 테스트 케이스를 작성하게 됩니다.</p>\\n<p>이상적으로 각 테스트 케이스는 서로 분리되어야 하며, 이를 통해서 언제라도 코드 변경으로 인해 문제가 발생할 경우, 빠른 시간 내에 문제를 파악하고 해결할 수 있도록 도와줍니다. 이를 위해서 Mock Object를 생성하는 것도 좋은 방법입니다.</p>\\n<p>유닛 테스트는 개발자뿐만 아니라 테스터에 의해서 수행되기도 하고, 테스터가 유닛 테스트를 작성하면 개발자가 맞춰서 개발하는 사례도 있습니다.</p>","autoDesc":true}');export{e as data};
