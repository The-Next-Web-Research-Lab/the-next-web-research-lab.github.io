import{_ as e,c as s,o as t,a3 as a}from"./chunks/framework.COm4hYgr.js";const u=JSON.parse('{"title":"CORS and HTTP Cookie","description":"","frontmatter":{"title":"CORS and HTTP Cookie"},"headers":[],"relativePath":"en/essay/cors-and-http-cookie.md","filePath":"en/essay/cors-and-http-cookie.md"}'),i={name:"en/essay/cors-and-http-cookie.md"},n=a(`<h1 id="cors-and-http-cookie" tabindex="-1">CORS and HTTP Cookie <a class="header-anchor" href="#cors-and-http-cookie" aria-label="Permalink to &quot;CORS and HTTP Cookie&quot;">​</a></h1><blockquote><p>This is a post I wrote on October 22, 2019 to explain to a BE developer who I was collaborating with while developing an internal service.</p></blockquote><h3 id="purpose-of-the-article" tabindex="-1">Purpose of the article <a class="header-anchor" href="#purpose-of-the-article" aria-label="Permalink to &quot;Purpose of the article&quot;">​</a></h3><p>Cross-Origin Resource Sharing! It is called CORS by taking the first letters. In my experience, CORS is the first phenomenon that occurs when a client and an API server using different domains communicate.</p><p>Recently, I had to use HTTP Cookie, and I learned new knowledge about CORS while using Cookie. So I summarized the contents of how to handle CORS and HTTP Cookie.</p><h3 id="what-is-cors" tabindex="-1">What is CORS <a class="header-anchor" href="#what-is-cors" aria-label="Permalink to &quot;What is CORS&quot;">​</a></h3><p>CORS is a security mechanism that occurs when a client using a different domain requests a server. When a client requests a server of a different domain, it requests by <strong>Cross-Origin HTTP request</strong>. HTTP requests and responses according to <strong>Cross-Origin HTTP request</strong> must be composed of CORS mechanism.</p><p>The server sets the allow/deny status when a request from a client using a different domain comes. The setting for allow/deny is done through <strong>Access-Control-Allow-Origin</strong> in the HTTP Header.</p><p><strong>Access-Control-Allow-Origin</strong> specifies the domain to allow or writes a wildcard (*) that can allow all domains.</p><h4 id="example-the-phenomenon-before-using-access-control-allow-origin" tabindex="-1">[Example] The phenomenon before using Access-Control-Allow-Origin <a class="header-anchor" href="#example-the-phenomenon-before-using-access-control-allow-origin" aria-label="Permalink to &quot;[Example] The phenomenon before using Access-Control-Allow-Origin&quot;">​</a></h4><blockquote><p>Client (<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>), Server (<a href="http://localhost:4000" target="_blank" rel="noreferrer">http://localhost:4000</a>)</p></blockquote><p>If <strong>Access-Control-Allow-Origin</strong> is not set in the server response header, an error occurs for the policy.</p><h5 id="http-request" tabindex="-1">HTTP request <a class="header-anchor" href="#http-request" aria-label="Permalink to &quot;HTTP request&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:4000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h5 id="chrome-developer-tool-console" tabindex="-1">Chrome developer tool &gt; Console <a class="header-anchor" href="#chrome-developer-tool-console" aria-label="Permalink to &quot;Chrome developer tool &gt; Console&quot;">​</a></h5><p>Access to fetch at &#39;<a href="http://localhost:4000/" target="_blank" rel="noreferrer">http://localhost:4000/</a>&#39; from origin &#39;<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. If an opaque response serves your needs, set the request&#39;s mode to &#39;no-cors&#39; to fetch the resource with CORS disabled.</p><h4 id="example-the-phenomenon-after-using-access-control-allow-origin" tabindex="-1">[Example] The phenomenon after using Access-Control-Allow-Origin <a class="header-anchor" href="#example-the-phenomenon-after-using-access-control-allow-origin" aria-label="Permalink to &quot;[Example] The phenomenon after using Access-Control-Allow-Origin&quot;">​</a></h4><p>It works normally when <strong>Access-Control-Allow-Origin</strong> is set in the server response header.</p><h5 id="http-request-1" tabindex="-1">HTTP request <a class="header-anchor" href="#http-request-1" aria-label="Permalink to &quot;HTTP request&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:4000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h5 id="chrome-developer-tool-network-response-headers" tabindex="-1">Chrome developer tool &gt; Network &gt; Response Headers <a class="header-anchor" href="#chrome-developer-tool-network-response-headers" aria-label="Permalink to &quot;Chrome developer tool &gt; Network &gt; Response Headers&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Access-Control-Allow-Origin: *</span></span>
<span class="line"><span>Content-Length: 12</span></span>
<span class="line"><span>Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span>Date: Mon, 21 Oct 2019 21:56:47 GMT</span></span>
<span class="line"><span>ETag: W/&quot;c-Lve95gjOVATpfV8EL5X4nxwjKHE&quot;</span></span>
<span class="line"><span>X-Powered-By: Express</span></span></code></pre></div><h3 id="credentials-setting-for-using-http-cookie" tabindex="-1">Credentials setting for using HTTP Cookie <a class="header-anchor" href="#credentials-setting-for-using-http-cookie" aria-label="Permalink to &quot;Credentials setting for using HTTP Cookie&quot;">​</a></h3><h4 id="the-situation-where-http-cookie-was-used" tabindex="-1">The situation where HTTP Cookie was used <a class="header-anchor" href="#the-situation-where-http-cookie-was-used" aria-label="Permalink to &quot;The situation where HTTP Cookie was used&quot;">​</a></h4><p>First of all, the reason why I used HTTP Cookie was to determine the login and login status. The service configuration consists of three: client service, API server, and login service, each using a different domain.</p><p>After logging in at the login service, the login completion status is stored in the Cookie and redirected to the client service. Cookie is set to HttpOnly so that it cannot be accessed by the client service.</p><blockquote><p>If Cookie is set to HttpOnly, it cannot be accessed by Javascript&#39;s <code>document.cookie</code>.</p></blockquote><p>In the client service, it requests the API server to <strong>determine the login status</strong>. At this time, <strong>client and server Credentials</strong> settings are required to use Cookie on the API server.</p><h4 id="credentials-setting" tabindex="-1">Credentials setting <a class="header-anchor" href="#credentials-setting" aria-label="Permalink to &quot;Credentials setting&quot;">​</a></h4><p>Both the client and the server must activate Credentials.</p><h5 id="client-credentials-setting" tabindex="-1">Client Credentials setting <a class="header-anchor" href="#client-credentials-setting" aria-label="Permalink to &quot;Client Credentials setting&quot;">​</a></h5><p>The client can set it differently depending on the Javascript API. The following are examples of the most commonly used fetch and XMLHttpRequest.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:4000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  credentials: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;include&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost:4000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h5 id="server-credentials-setting" tabindex="-1">Server Credentials setting <a class="header-anchor" href="#server-credentials-setting" aria-label="Permalink to &quot;Server Credentials setting&quot;">​</a></h5><p>The server sets Credentials in the response header. Set the header named <strong>Access-Control-Allow-Credentials</strong> to true.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Credentials&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>After activating <strong>Credentials</strong>, the following error occurs when making an HTTP request.</p><p>Access to fetch at &#39;<a href="http://localhost:4000/" target="_blank" rel="noreferrer">http://localhost:4000/</a>&#39; from origin &#39;<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>&#39; has been blocked by CORS policy: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;.</p><p>This is because you cannot use a wildcard (*) in <strong>Access-Control-Allow-Origin</strong> after activating <strong>Credentials</strong>.</p><p>The point to note here is that the situation of the client and the server is different by activating Credentials. On the server, activating Credentials allows access to Cookie, so it looks like normal operation. However, on the client, HTTP response cannot be checked due to CORS policy.</p><h4 id="credentials-and-access-control-allow-origin-setting" tabindex="-1">Credentials and Access-Control-Allow-Origin setting <a class="header-anchor" href="#credentials-and-access-control-allow-origin-setting" aria-label="Permalink to &quot;Credentials and Access-Control-Allow-Origin setting&quot;">​</a></h4><p>In the server HTTP response header, write the domain of the client to allow in <strong>Access-Control-Allow-Origin</strong>. After setting, you can check the normal operation by checking the client response header.</p><h5 id="server-http-response-header-setting" tabindex="-1">Server HTTP response header setting <a class="header-anchor" href="#server-http-response-header-setting" aria-label="Permalink to &quot;Server HTTP response header setting&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Credentials&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h5 id="chrome-developer-tool-network-response-headers-1" tabindex="-1">Chrome developer tool &gt; Network &gt; Response Headers <a class="header-anchor" href="#chrome-developer-tool-network-response-headers-1" aria-label="Permalink to &quot;Chrome developer tool &gt; Network &gt; Response Headers&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Access-Control-Allow-Credentials: true</span></span>
<span class="line"><span>Access-Control-Allow-Origin: http://localhost:3000</span></span>
<span class="line"><span>Content-Length: 12</span></span>
<span class="line"><span>Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span>Date: Mon, 21 Oct 2019 22:46:47 GMT</span></span>
<span class="line"><span>ETag: W/&quot;c-Lve95gjOVATpfV8EL5X4nxwjKHE&quot;</span></span>
<span class="line"><span>X-Powered-By: Express</span></span></code></pre></div><h3 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h3><p>Using different domains for the client and the API server is a common pattern in the field. This pattern occurs once or twice during the initial development of the service. It can be solved by simply following the CORS policy. The issue of CORS is not something that only one side of the client and server managers should be aware of, but everyone needs to understand. I think it is better to solve this issue smoothly by following the CORS policy and focus on business development.</p>`,49),o=[n];function r(l,h,p,c,d,k){return t(),s("div",null,o)}const C=e(i,[["render",r]]);export{u as __pageData,C as default};
