import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,e as p}from"./app-b74e304f.js";const s="/assets/cfd4569a-e7f5-4aac-99bb-b6928612279d-bd247ddf.png",i="/assets/0a82f336-5908-4a08-a219-5bcda7fe774e-51381b6c.png",r="/assets/91041c0d-3165-422e-aad1-81fd3d27ad41-d3709096.png",d="/assets/28549954-352c-438e-9feb-176342747292-961c085d.png",c="/assets/c4a92dbe-430f-44f7-926b-7142e6ff11ce-97bb58ef.png",n="/assets/5d2a32ab-f816-4ddb-b4b2-df56e57d64ae-a6247721.png",h="/assets/a362aab8-2cca-4187-abf2-7ca914a65a87-ccaef838.png",o="/assets/99d04fcd-672b-414f-93ee-64b90724ad42-88e6236b.png",l="/assets/d21e9442-6373-4013-a304-ef9d53080d38-9b090d48.png",f={},u=p('<h1 id="lighthouse-deep-dive-성능-최적화-과정-ft-lcp-tbt-최적화" tabindex="-1"><a class="header-anchor" href="#lighthouse-deep-dive-성능-최적화-과정-ft-lcp-tbt-최적화" aria-hidden="true">#</a> {Lighthouse Deep Dive} 성능 최적화 과정 (ft. LCP, TBT 최적화)</h1><p>우연히 블로그의 성능을 라이트하우스로 측정해 봤는데, 성능 점수가 40점대로 나쁜 성능으로 측정돼서 성능 최적화를 하기로 마음을 먹었다. 🫡</p><p>우선 성능 최적화 결과부터 보여주고 문제점을 찾는 방법과 해결 과정을 설명하겠다.</p><p>목차</p><ul><li>📄성능 최적화 결과</li><li>🖼️LCP 최적화</li><li>💻TBT 최적화</li></ul><h2 id="📄성능-최적화-결과" tabindex="-1"><a class="header-anchor" href="#📄성능-최적화-결과" aria-hidden="true">#</a> 📄성능 최적화 결과</h2><p><img src="'+s+'" alt="성능 개선 전 후"></p><p>라이트하우스에서 모바일 장치로 측정 후 성능 최적화한 결과다.</p><p>Largest Contentful Paint(이하 LCP)와 Total Blocking Time(이하 TBT)이 매우 안 좋게 나왔다.</p><p>웹 페이지의 성능 개선 포인트는 (1)리소스와 (2)메인 스레드로 크게 두 가지 있다. 리소스 개선은 메인 스레드 개선보다 간단하고, LCP는 리소스 개선에 영향을 많이 받아 LCP부터 먼저 시작한다.</p><h3 id="🤔speed-index는" tabindex="-1"><a class="header-anchor" href="#🤔speed-index는" aria-hidden="true">#</a> 🤔Speed Index는?</h3><p>Speed Index는 First Contentful Paint부터 Cumulative Layout Shift까지 4가지 항목을 개선하면 자연스럽게 개선된다. 그래서 여기서는 Speed Index는 개선하지 않는다. 추후에 성능 최적화할 때 맨 마지막에 개선할 것을 권장한다.</p><h2 id="🖼️lcp-최적화" tabindex="-1"><a class="header-anchor" href="#🖼️lcp-최적화" aria-hidden="true">#</a> 🖼️LCP 최적화</h2><p>우선 LCP(Largest Contentful Paint)는 웹 페이지에서 가장 큰 이미지 또는 텍스트 영역을 의미한다.</p><h3 id="🔎문제점-찾는-방법" tabindex="-1"><a class="header-anchor" href="#🔎문제점-찾는-방법" aria-hidden="true">#</a> 🔎문제점 찾는 방법</h3><p><img src="'+i+'" alt="LCP 첫번째 항목"></p><p>라이트하우스 리포트의 진단 영역에서 LCP 탭을 선택하면 어떤 부분을 개선해야 하는지 알려준다. 첫 번째 항목을 보면 배경 이미지 영향으로 LCP가 안 좋다는 것을 알 수 있다.</p><p>배경 이미지는 그라데이션 배경 때문에 사용했는 데, 이미지 로드와 렌더링에 지연이 있으므로 이 부분은 CSS를 사용한 그라데이션으로 변경하면 개선될 것으로 보인다.</p><h3 id="🪄문제점-해결" tabindex="-1"><a class="header-anchor" href="#🪄문제점-해결" aria-hidden="true">#</a> 🪄문제점 해결</h3><p><img src="'+r+'" alt="LCP 개선 방안"></p><p>위와 같이 배경에 CSS를 사용해서 그리도록 바꿨다.</p><p><img src="'+d+'" alt="LCP 개선 결과"></p><p>결과적으로 LCP는 12.9초 감소되었고, 기존에 잘못 적용된 그라데이션 UI 버그도 해결되었다.</p><p>이 다음에는 메인 스레드와 연관 있는 TBT 항목을 개선하겠다. First Contentful Paint(이하 FCP) 항목은 메인 스레드를 최적화하면 자연스럽게 개선되기도 하므로 TBT보단 FCP 먼저 진행한다.</p><h2 id="💻tbt-최적화" tabindex="-1"><a class="header-anchor" href="#💻tbt-최적화" aria-hidden="true">#</a> 💻TBT 최적화</h2><p>TBT(Total Blocking Time)는 메인 스레드 차단 시간의 총합을 의미한다. 첫 번째 콘텐츠 렌더링과 상호작용 시작 시점의 사이에 있는 메인 스레드 차단 작업들을 계산에 포함한다.</p><h3 id="🔎문제점-찾는-방법-1" tabindex="-1"><a class="header-anchor" href="#🔎문제점-찾는-방법-1" aria-hidden="true">#</a> 🔎문제점 찾는 방법</h3><p><img src="'+c+'" alt="TBT 진단"></p><p>두 번째 진단을 보면 Other 항목이 비정상적으로 오래 걸리는 것을 확인할 수 있다. 이 부분은 자바스크립트 파일 요청 관련 문제가 있다고 생각했고 성능 탭을 통해서 디버깅을 했다.</p><p><img src="'+n+'" alt="개선 전 네트워크 캡쳐"></p><p>성능 탭에서 확인해 보니 &quot;HTML 구문 분석&quot;이 비정상적으로 오래 걸렸다. &quot;HTML 구문 분석&quot;을 자세히 확인해 보니 모든 페이지의 자바스크립트 파일을 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code>로 요청하고 있었다.</p><p>블로그의 페이지 수는 300건 이상 있어 그만큼 많은 자바스크립트 파일을 미리 요청하고 있었다. prefetch는 요청이 많아지면 오히려 성능에 악영향을 미치므로 개선이 필요했다.</p><h3 id="🪄문제점-해결-1" tabindex="-1"><a class="header-anchor" href="#🪄문제점-해결-1" aria-hidden="true">#</a> 🪄문제점 해결</h3><p><img src="'+h+'" alt="prefetch 설정제거"></p><p>빌드 설정에서 prefetch를 제거하도록 설정했다. 초기 로딩이 빠른 것이 좀 더 중요하기 때문에 prefetch는 우선 제거하도록 했다.</p><p><img src="'+o+'" alt="개선 후 네트워크 캡쳐"></p><p>prefetch 제거 후 미리 요청하는 자바스크립트를 제거할 수 있었고, &quot;HTML 구문 분석&quot;는 메인 스레드를 차단하지 않는 작업이 되었다.</p><p><img src="'+l+'" alt="성능 최적화 결과"></p><p>결과적으로 TBT는 안정적인 상태로 돌아왔고, TBT 개선 과정에서 FCP가 개선되었다.👏</p><p>이상으로 Lighthouse를 사용한 성능 최적화 과정을 알아봤다. 생각보다 간단한 작업으로 웹 페이지를 개선하는 경우가 많으므로 경험이 없다면 시도해 보길 바란다.👍</p>',40),b=[u];function _(m,g){return a(),t("div",null,b)}const L=e(f,[["render",_],["__file","performance-optimization-process.html.vue"]]);export{L as default};
