import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as l}from"./app-867b3bcb.js";const r={},t=l('<h1 id="소프트웨어-생명주기-간단-정리" tabindex="-1"><a class="header-anchor" href="#소프트웨어-생명주기-간단-정리" aria-hidden="true">#</a> 소프트웨어 생명주기 간단 정리</h1><p>소프트웨어를 만들 때는 규모를 불문하고 소프트웨어 생명주기 순서로 업무를 진행하는 것을 지향한다. 생명주기 순서로 진행하게 되면 효율적으로 시간을 활용할 수 있다.</p><h4 id="_1-정의-단계" tabindex="-1"><a class="header-anchor" href="#_1-정의-단계" aria-hidden="true">#</a> 1. 정의 단계</h4><ol><li>계획</li><li>분석: 요구사항이 무엇인지 정의</li></ol><h4 id="_2-개발-단계" tabindex="-1"><a class="header-anchor" href="#_2-개발-단계" aria-hidden="true">#</a> 2. 개발 단계</h4><ol><li>설계: 요구사항을 어떻게 구현할지</li><li>개발: 요구사항을 시스템이 이해할 수 있는 언어로 변환하는 과정</li><li>테스트: 요구사항이 제대로 구현되었는지 검증하고 확인하는 과정</li></ol><h4 id="_3-지원-단계" tabindex="-1"><a class="header-anchor" href="#_3-지원-단계" aria-hidden="true">#</a> 3. 지원 단계</h4><p>운영: 소프트웨어 배포 후 버그 수정 및 기능 추가</p><h2 id="모델" tabindex="-1"><a class="header-anchor" href="#모델" aria-hidden="true">#</a> 모델</h2><h4 id="폭포수-모델" tabindex="-1"><a class="header-anchor" href="#폭포수-모델" aria-hidden="true">#</a> 폭포수 모델</h4><ul><li><code>계획 -&gt; 분석 -&gt; 설계 -&gt; 개발 -&gt; 테스트</code>를 순서대로 진행한다.</li><li>제조업 같은 하드웨어와 밀접한 소프트웨어에서 사용되기도 한다.</li></ul><h4 id="반복형-모델" tabindex="-1"><a class="header-anchor" href="#반복형-모델" aria-hidden="true">#</a> 반복형 모델</h4><p><code>계획 -&gt; 분석 -&gt; 설계 -&gt; 개발 -&gt; 테스트</code>를 반복해서 진행한다.</p><ul><li>점진적 모델 <ul><li>기능 묶음을 단계적으로 개발하고 통합</li><li>예) 애자일</li></ul></li><li>진화적 모델 <ul><li>릴리즈 할 때마다 기능의 완성도를 업그레이드</li><li>예) UP(Unified Process): 도입 -&gt; 정련 -&gt; 구축 -&gt; 전이 총 4단계</li></ul></li></ul>',14),d=[t];function h(c,o){return a(),i("div",null,d)}const _=e(r,[["render",h],["__file","software-lifecycle.html.vue"]]);export{_ as default};
