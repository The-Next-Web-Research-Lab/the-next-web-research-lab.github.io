const e=JSON.parse('{"key":"v-6b9d38aa","path":"/fe-dev/refactoring/refactoring-meaning-and-result.html","title":"리펙토링 정의와 결과","lang":"ko-KR","frontmatter":{"title":"리펙토링 정의와 결과","description":"리펙토링 정의와 결과 2019년 5월 26일에 마틴 파울러의 리팩토링 책 일부를 정리한 포스트입니다. 리팩토링 리팩토링은 겉으로 드러나는 기능은 그대로 둔 채, 알아보기 쉽고 수정하기 간편하게 소프트웨어 내부를 수정하는 작업이다. 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만들어 겉으로 드러나는 기능에 거의 또는 아예 영향을 주지 않으면서 소프트웨어의 각종 기능을 추가할 수 있다. 리팩토링 수행 후에 겉으로 드러나는 기능에 영향을 주지 않기 때문에 사용자는 소프트웨어의 변화를 눈치채지 못한다.","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://the-next-web-research-lab.github.io/en/fe-dev/refactoring/refactoring-meaning-and-result.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/refactoring/refactoring-meaning-and-result.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"리펙토링 정의와 결과"}],["meta",{"property":"og:description","content":"리펙토링 정의와 결과 2019년 5월 26일에 마틴 파울러의 리팩토링 책 일부를 정리한 포스트입니다. 리팩토링 리팩토링은 겉으로 드러나는 기능은 그대로 둔 채, 알아보기 쉽고 수정하기 간편하게 소프트웨어 내부를 수정하는 작업이다. 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만들어 겉으로 드러나는 기능에 거의 또는 아예 영향을 주지 않으면서 소프트웨어의 각종 기능을 추가할 수 있다. 리팩토링 수행 후에 겉으로 드러나는 기능에 영향을 주지 않기 때문에 사용자는 소프트웨어의 변화를 눈치채지 못한다."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-22T07:28:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"리펙토링 정의와 결과"}],["meta",{"property":"article:modified_time","content":"2023-06-22T07:28:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"리펙토링 정의와 결과\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-06-22T07:28:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"리팩토링","slug":"리팩토링","link":"#리팩토링","children":[]},{"level":3,"title":"리팩토링 결과","slug":"리팩토링-결과","link":"#리팩토링-결과","children":[]}],"git":{"createdTime":1687334622000,"updatedTime":1687418926000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":2}]},"readingTime":{"minutes":0.07,"words":20},"filePathRelative":"fe-dev/refactoring/refactoring-meaning-and-result.md","localizedDate":"2023년 6월 21일","excerpt":"<h1> 리펙토링 정의와 결과</h1>\\n<blockquote>\\n<p>2019년 5월 26일에 마틴 파울러의 리팩토링 책 일부를 정리한 포스트입니다.</p>\\n</blockquote>\\n<h3> 리팩토링</h3>\\n<p><strong>리팩토링</strong>은 겉으로 드러나는 기능은 그대로 둔 채, 알아보기 쉽고 수정하기 간편하게 소프트웨어 내부를 수정하는 작업이다. 소프트웨어를 더 이해하기 쉽고 수정하기 쉽게 만들어 겉으로 드러나는 기능에 거의 또는 아예 영향을 주지 않으면서 소프트웨어의 각종 기능을 추가할 수 있다. 리팩토링 수행 후에 겉으로 드러나는 기능에 영향을 주지 않기 때문에 사용자는 소프트웨어의 변화를 눈치채지 못한다.</p>","autoDesc":true}');export{e as data};
