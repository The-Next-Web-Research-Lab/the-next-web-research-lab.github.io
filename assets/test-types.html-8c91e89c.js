const e=JSON.parse('{"key":"v-6c200f31","path":"/en/fe-dev/refactoring/test-types.html","title":"A Summary of Test Types on One Page","lang":"en-US","frontmatter":{"title":"A Summary of Test Types on One Page","description":"Test Types Unit Test Unit test is a method of verifying that a specific module of code works exactly as intended. You will write test cases for every function and method. Ideally, each test case should be separated from each other, and this will help you to identify and solve problems quickly whenever code changes cause problems. Creating Mock Objects is also a good way to do this.","head":[["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://the-next-web-research-lab.github.io/fe-dev/refactoring/test-types.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/en/fe-dev/refactoring/test-types.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"A Summary of Test Types on One Page"}],["meta",{"property":"og:description","content":"Test Types Unit Test Unit test is a method of verifying that a specific module of code works exactly as intended. You will write test cases for every function and method. Ideally, each test case should be separated from each other, and this will help you to identify and solve problems quickly whenever code changes cause problems. Creating Mock Objects is also a good way to do this."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-01-18T10:31:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"A Summary of Test Types on One Page"}],["meta",{"property":"article:modified_time","content":"2024-01-18T10:31:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"A Summary of Test Types on One Page\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2024-01-18T10:31:50.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Unit Test","slug":"unit-test","link":"#unit-test","children":[]},{"level":2,"title":"Static Test","slug":"static-test","link":"#static-test","children":[]},{"level":2,"title":"Integration Test","slug":"integration-test","link":"#integration-test","children":[]},{"level":2,"title":"Regression Test","slug":"regression-test","link":"#regression-test","children":[]}],"git":{"createdTime":1705573910000,"updatedTime":1705573910000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"en/fe-dev/refactoring/test-types.md","localizedDate":"January 18, 2024","excerpt":"<h1> Test Types</h1>\\n<h2> Unit Test</h2>\\n<p>Unit test is a method of verifying that a specific module of code works exactly as intended. You will write test cases for every function and method.</p>\\n<p>Ideally, each test case should be separated from each other, and this will help you to identify and solve problems quickly whenever code changes cause problems. Creating Mock Objects is also a good way to do this.</p>","autoDesc":true}');export{e as data};
