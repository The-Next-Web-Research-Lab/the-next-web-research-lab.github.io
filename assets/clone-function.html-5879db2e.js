import{_ as t,r as p,o,c,a as n,b as s,d as l,e as a}from"./app-a8c38823.js";const i={},r=a('<h1 id="경우에-따른-clone-함수" tabindex="-1"><a class="header-anchor" href="#경우에-따른-clone-함수" aria-hidden="true">#</a> 경우에 따른 clone 함수</h1><blockquote><p>2019년 12월 2일에 정리한 포스트입니다.</p></blockquote><h3 id="글의-목적" tabindex="-1"><a class="header-anchor" href="#글의-목적" aria-hidden="true">#</a> 글의 목적</h3><p>불변성에 대한 처리를 하면서 상태를 복제하는 기능을 만들어 사용하곤한다. 다양한 방법들이 존재하는 데 경우에 따라 어떤 함수들이 있는 지 정리한 글이다.</p><h3 id="목차" tabindex="-1"><a class="header-anchor" href="#목차" aria-hidden="true">#</a> 목차</h3><ul><li>JSON 복제</li><li>Array-Object 복제</li><li>Collection 복제</li></ul><h3 id="json-복제" tabindex="-1"><a class="header-anchor" href="#json-복제" aria-hidden="true">#</a> JSON 복제</h3>',7),u={href:"https://www.json.org/json-ko.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">json</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="array-object-복제" tabindex="-1"><a class="header-anchor" href="#array-object-복제" aria-hidden="true">#</a> Array-Object 복제</h3><p>Array와 Object를 복제할 때 사용하는 함수이다. ES6+에서 제공하는 <code>Set</code>, <code>Map</code>과 같은 빌트인 객체는 복제가 안된다.</p><p>원시 타입은 바로 반환하고, Array와 Object는 복제 후 반환한다. 1000건 이상일 때는 <a href="#JSON-%EB%B3%B5%EC%A0%9C">JSON 복제</a>보다 성능이 우수하다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">objOrArr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> objOrArr
    <span class="token keyword">case</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> objOrArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPrimitive</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token operator">:</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">cloneObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cloned <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloned<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloned
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collection-복제" tabindex="-1"><a class="header-anchor" href="#collection-복제" aria-hidden="true">#</a> Collection 복제</h3><p>ES6+에서 Map과 Set을 포함한 Collection 객체를 복제할 때 사용하는 함수이다. <a href="#array-object-%EB%B3%B5%EC%A0%9C">Array-Object 복제</a>에서 Map과 Set을 처리하는 책임을 추가한 함수이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> value
    <span class="token keyword">case</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">isMap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">isSet</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPrimitive</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token operator">:</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">isMap</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span>
<span class="token keyword">const</span> <span class="token function-variable function">isSet</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Set</span>

<span class="token keyword">const</span> <span class="token function-variable function">cloneObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cloned <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloned<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloned
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="끝" tabindex="-1"><a class="header-anchor" href="#끝" aria-hidden="true">#</a> 끝</h3>`,11);function d(v,b){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",u,[s("JSON"),l(e)]),s("에서 지원하는 타입을 사용할 경우에 사용되는 함수이다. 문자로 변경 후 다시 JSON으로 파싱하는 동작을 한다.")]),k])}const y=t(i,[["render",d],["__file","clone-function.html.vue"]]);export{y as default};
