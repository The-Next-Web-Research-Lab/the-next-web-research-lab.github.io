import{_ as e,c as t,o as a,a3 as i}from"./chunks/framework.9Buaa5aL.js";const m=JSON.parse('{"title":"Comparison of TDD and BDD","description":"","frontmatter":{"title":"Comparison of TDD and BDD"},"headers":[],"relativePath":"en/fe-dev/refactoring/tdd-bdd.md","filePath":"en/fe-dev/refactoring/tdd-bdd.md"}'),o={name:"en/fe-dev/refactoring/tdd-bdd.md"},n=i('<h1 id="comparison-of-tdd-and-bdd" tabindex="-1">Comparison of TDD and BDD <a class="header-anchor" href="#comparison-of-tdd-and-bdd" aria-label="Permalink to &quot;Comparison of TDD and BDD&quot;">​</a></h1><h2 id="tdd-test-driven-development" tabindex="-1">TDD (Test Driven Development) <a class="header-anchor" href="#tdd-test-driven-development" aria-label="Permalink to &quot;TDD (Test Driven Development)&quot;">​</a></h2><p>TDD is one of the development methodologies that repeats the process of writing test code that fails first, writing development code, running tests, passing, and refactoring. This is a development methodology that focuses on writing only the essential code and increasing the reliability of the code by repeating these tasks.</p><h2 id="bdd-behavior-driven-development" tabindex="-1">BDD (Behavior Driven Development) <a class="header-anchor" href="#bdd-behavior-driven-development" aria-label="Permalink to &quot;BDD (Behavior Driven Development)&quot;">​</a></h2><p>First of all, the disadvantage of TDD is that unnecessary test code modifications occur when modifying the code by writing tests from the code perspective.</p><p>To solve this situation, BDD methodology came out, and in BDD, the suite is written from the <em>user scenario</em> perspective.</p><p>It is written in units of functions from the user&#39;s perspective, and it is written in units of behavior so that the test code does not change when the development code changes.</p><p>The basic order of writing test code is as follows.</p><h4 id="_1-feature" tabindex="-1">1. Feature <a class="header-anchor" href="#_1-feature" aria-label="Permalink to &quot;1. Feature&quot;">​</a></h4><ul><li>Specify the function/responsibility of the test subject.</li><li>Write user stories.</li></ul><h4 id="_2-scenario" tabindex="-1">2. Scenario <a class="header-anchor" href="#_2-scenario" aria-label="Permalink to &quot;2. Scenario&quot;">​</a></h4><ul><li>Describe the situation for the test purpose.</li><li>Write use cases.</li></ul><h4 id="_3-given" tabindex="-1">3. Given <a class="header-anchor" href="#_3-given" aria-label="Permalink to &quot;3. Given&quot;">​</a></h4><ul><li>Set the value required for the scenario progress.</li></ul><h4 id="_4-when" tabindex="-1">4. When <a class="header-anchor" href="#_4-when" aria-label="Permalink to &quot;4. When&quot;">​</a></h4><ul><li>Specify the conditions required to proceed with the scenario.</li></ul><h4 id="_5-then" tabindex="-1">5. Then <a class="header-anchor" href="#_5-then" aria-label="Permalink to &quot;5. Then&quot;">​</a></h4><ul><li>Specify the result that must be guaranteed when the scenario is completed.</li></ul>',18),r=[n];function s(d,h,l,c,u,p){return a(),t("div",null,r)}const D=e(o,[["render",s]]);export{m as __pageData,D as default};
