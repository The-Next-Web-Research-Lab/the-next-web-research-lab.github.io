import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as p,a as n,b as i,d as c,e as s}from"./app-e9b42d51.js";const l={},u=s('<h1 id="scheduling-api-for-main-thread-optimization" tabindex="-1"><a class="header-anchor" href="#scheduling-api-for-main-thread-optimization" aria-hidden="true">#</a> Scheduling API for Main Thread Optimization</h1><h2 id="what-is-scheduling" tabindex="-1"><a class="header-anchor" href="#what-is-scheduling" aria-hidden="true">#</a> What is scheduling?</h2><p>The main thread performs various roles such as rendering, network response, GC, etc. besides executing JavaScript. If many tasks are scheduled on the main thread, the performance and usability experience of the web site will degrade. Therefore, scheduling is used to efficiently register and control tasks with different priorities.</p><h2 id="browser-support-range" tabindex="-1"><a class="header-anchor" href="#browser-support-range" aria-hidden="true">#</a> Browser support range</h2>',4),r=n("li",null,"Supported browsers: Chrome / Edge / Opera",-1),d=n("li",null,"Unsupported browsers: Firefox / Safari",-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/API/Prioritized_Task_Scheduling_API#browser_compatibility",target:"_blank",rel:"noopener noreferrer"},h=s(`<h2 id="why-native-scheduling-api-is-needed" tabindex="-1"><a class="header-anchor" href="#why-native-scheduling-api-is-needed" aria-hidden="true">#</a> Why Native Scheduling API is needed?</h2><h3 id="_1-coordination-among-cooperating-actors-on-the-main-thread" tabindex="-1"><a class="header-anchor" href="#_1-coordination-among-cooperating-actors-on-the-main-thread" aria-hidden="true">#</a> 1. Coordination among cooperating actors on the main thread</h3><p>An application can consist of 1st-party, 1st-party library, 3rd-party library and framework scripts. At the same time, the browser has tasks to run on the main thread such as <code>fetch()</code> and GC, rendering.</p><p>Having a shared priority concept through Native Scheduling API can help the browser make more efficient scheduling decisions and improve user experience.</p><h3 id="_2-different-scheduling-apis" tabindex="-1"><a class="header-anchor" href="#_2-different-scheduling-apis" aria-hidden="true">#</a> 2. Different Scheduling APIs</h3><p>Despite the need to schedule script chunks, the platform lacks an integrated API. Developers can choose <code>setTimeout</code>, <code>requestAnimationFrame</code>, <code>requestIdleCallback</code>, <code>postMessage</code> when scheduling tasks.</p><p>These different Scheduling APIs make it more difficult for developers to write scheduling code, and require knowledge of the browser&#39;s event loop.</p><h3 id="_3-deciding-when-to-yield-to-the-browser" tabindex="-1"><a class="header-anchor" href="#_3-deciding-when-to-yield-to-the-browser" aria-hidden="true">#</a> 3. Deciding when to yield to the browser</h3><p>For usability, the browser should be appropriately yielded the main thread. However, yielding has overhead. The overhead of task registration and context switching, the cost of acquiring control, etc. can increase the task delay time.</p><p>In Native Scheduling API, you can check when to yield with <code>isInputPending()</code> and <code>isFramePending()</code>. You can also yield with <code>scheduler.yield()</code> and find control.</p><h2 id="scheduling-api-features" tabindex="-1"><a class="header-anchor" href="#scheduling-api-features" aria-hidden="true">#</a> Scheduling API features</h2><p>It provides a standardized way to specify the priority of all tasks belonging to the application, such as web site developer code or 3rd-party library and framework.</p><p>The API is Promise-based and supports setting and changing task priorities, delaying tasks added to the scheduler, aborting tasks, and monitoring priority change and abort events.</p><h3 id="feature-check" tabindex="-1"><a class="header-anchor" href="#feature-check" aria-hidden="true">#</a> Feature check</h3><p>If you test the <code>scheduler</code> property in the global <code>this</code> exposed in the current scope, the following code prints <strong>Feature: Supported</strong> if the API is supported in this browser.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;scheduler&quot;</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Feature: Supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Feature: Not Supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="priority" tabindex="-1"><a class="header-anchor" href="#priority" aria-hidden="true">#</a> Priority</h3><p>You can set the task priority using the <code>priority</code> property in the second argument option. The priorities are <code>user-blocking</code>, <code>user-visible</code>, <code>background</code> and the detailed execution time is as follows:</p><ul><li><code>user-blocking</code><ul><li>Tasks that stop the user from interacting with the page</li><li>Stops the task of rendering or responding to user input until the page is usable</li></ul></li><li><code>user-visible</code><ul><li>Default priority</li><li>Tasks that the user can see but do not necessarily need to block user actions</li><li>Used for rendering non-essential images or animations on the page</li></ul></li><li><code>background</code><ul><li>Tasks that are not time-sensitive</li><li>Used for log processing or 3rd-party library initialization that is not required for rendering</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token parameter">txt</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;scheduler&quot;</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;background 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;background&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;user-visible 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;user-visible&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;user-blocking 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;user-blocking&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;background 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;background&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;user-visible 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;user-visible&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;user-blocking 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;user-blocking&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;user-visible 3 (default)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following log shows the output of the above tasks.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user-blocking 1
user-blocking 2
user-visible 1
user-visible 2
user-visible 3 (default)
background 1
background 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-delay" tabindex="-1"><a class="header-anchor" href="#task-delay" aria-hidden="true">#</a> Task delay</h3><p>You can delay the task by specifying an integer millisecond in the <code>delay</code> property in the second argument option. This effectively adds the task to the priority queue when the timeout occurs, as if it could be created using <code>setTimeout()</code>. <code>delay</code> is the minimum time before the task is added to the scheduler, so the time may be longer.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;scheduler&quot;</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  scheduler
    <span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Task delayed by 2000ms&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">taskResult</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taskResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scheduler
    <span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Next task should complete in about 2000ms&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">taskResult</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taskResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second string is displayed in the log after about 2 seconds.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Next task should complete in about 2000ms
Task delayed by 2000ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-cancellation" tabindex="-1"><a class="header-anchor" href="#task-cancellation" aria-hidden="true">#</a> Task cancellation</h3><p>You can cancel tasks in exactly the same way using <code>TaskController</code> or <code>AbortController</code>. The difference is that you need to use <code>TaskController</code> if you also want to set the task priority.</p><p>The following code creates a <code>TaskController</code> and passes it to <code>signal</code>. When <code>abortTaskController.abort()</code> is executed, the <code>Promise</code> is rejected and caught by the <code>catch</code> block and logged.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;scheduler&quot;</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> abortTaskController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  scheduler
    <span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Task executing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">signal</span><span class="token operator">:</span> abortTaskController<span class="token punctuation">.</span>signal<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">taskResult</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taskResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  abortTaskController<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following log shows the task cancellation log.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error: AbortError: signal is aborted without reason
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="priority-change" tabindex="-1"><a class="header-anchor" href="#priority-change" aria-hidden="true">#</a> Priority change</h3><p>You can specify a <code>TaskController</code> in the <code>signal</code> property of the second argument option and set the initial priority.</p><p>Then you can use <code>addEventListener()</code> to receive events for priority changes, and call <code>setPriority()</code> to change the priority.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;scheduler&quot;</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskController</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token string">&quot;user-blocking&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  controller<span class="token punctuation">.</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;prioritychange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> previousPriority <span class="token operator">=</span> event<span class="token punctuation">.</span>previousPriority<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newPriority <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>priority<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Priority changed from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>previousPriority<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newPriority<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  scheduler<span class="token punctuation">.</span><span class="token function">postTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  controller<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token string">&quot;background&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output below shows that the priority has changed from <code>user-blocking</code> to <code>background</code>.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Priority changed from user-blocking to background.
Task
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,39);function g(v,b){const a=e("ExternalLinkIcon");return o(),p("div",null,[u,n("ul",null,[r,d,n("li",null,[n("a",k,[i("Browser compatibility"),c(a)])])]),h])}const f=t(l,[["render",g],["__file","scheduling-api.html.vue"]]);export{f as default};
