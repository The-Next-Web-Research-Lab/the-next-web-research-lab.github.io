import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as e,e as h}from"./app-ab2b0c84.js";const i={},n=h('<h1 id="도서-리뷰-시리즈-객체지향의-사실과-오해" tabindex="-1"><a class="header-anchor" href="#도서-리뷰-시리즈-객체지향의-사실과-오해" aria-hidden="true">#</a> 도서 리뷰 시리즈 - 객체지향의 사실과 오해</h1><h2 id="출처" tabindex="-1"><a class="header-anchor" href="#출처" aria-hidden="true">#</a> 출처</h2><p>조영호. 『객체지향의 사실과 오해』. 위키북스, 2015.</p><h2 id="한-줄-리뷰" tabindex="-1"><a class="header-anchor" href="#한-줄-리뷰" aria-hidden="true">#</a> 한 줄 리뷰</h2><p>객체지향 프로그래밍에 관심 있다면 필수로 읽어야 하는 도서</p><h2 id="_01-협력하는-객체들의-공동체" tabindex="-1"><a class="header-anchor" href="#_01-협력하는-객체들의-공동체" aria-hidden="true">#</a> 01. 협력하는 객체들의 공동체</h2><p>객체를 상태와 행동을 함께 지닌 실체라고 정의한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미한다. 객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 행동과 상태를 함께 지니고 있어야 한다.</p><h3 id="객체의-역할" tabindex="-1"><a class="header-anchor" href="#객체의-역할" aria-hidden="true">#</a> 객체의 역할</h3><ul><li>여러 객체가 동일한 역할을 수행할 수 있다.</li><li>역할은 대체 가능성을 의미한다.</li><li>각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.</li><li>하나의 객체가 동시에 여러 역할을 수행할 수 있다.</li></ul><h3 id="객체지향의-본질" tabindex="-1"><a class="header-anchor" href="#객체지향의-본질" aria-hidden="true">#</a> 객체지향의 본질</h3><ul><li>객체지향이란 시스템을 상호작용하는 <strong>자율적인 객체들의 공동체</strong>로 바라보고 객체를 이용해 시스템을 분할하는 방법이다.</li><li>자율적인 객체란 <strong>상태</strong>와 <strong>행위</strong>를 함께 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.</li><li>객체는 시스템의 행위를 구현하기 위해 다른 객체와 <strong>협력</strong>한다. 각 객체는 협력 내에서 정해진 역할을 수행하며 <strong>역할</strong>은 관련된 <strong>책임</strong>의 집합이다.</li><li>객체는 다른 객체와 협력하기 위해 메시지를 전송하고, <strong>메시지</strong>를 수신한 객체는 메시지를 처리하는 데 적합한 <strong>메서드</strong>를 자율적으로 선택한다.</li></ul><h2 id="_02-이상한-나라의-객체" tabindex="-1"><a class="header-anchor" href="#_02-이상한-나라의-객체" aria-hidden="true">#</a> 02. 이상한 나라의 객체</h2><p><strong>객체</strong>란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현된다.</p><h3 id="객체의-상태" tabindex="-1"><a class="header-anchor" href="#객체의-상태" aria-hidden="true">#</a> 객체의 상태</h3><p>상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.</p><h3 id="객체의-행동" tabindex="-1"><a class="header-anchor" href="#객체의-행동" aria-hidden="true">#</a> 객체의 행동</h3><p>행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야 한다.</p><h3 id="식별자" tabindex="-1"><a class="header-anchor" href="#식별자" aria-hidden="true">#</a> 식별자</h3><p>식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티이다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야 한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.</p><h2 id="_03-타입과-추상화" tabindex="-1"><a class="header-anchor" href="#_03-타입과-추상화" aria-hidden="true">#</a> 03. 타입과 추상화</h2><h3 id="추상화" tabindex="-1"><a class="header-anchor" href="#추상화" aria-hidden="true">#</a> 추상화</h3><p>어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법이다. 복잡성을 다루기 위해 추상화는 두 차원에서 이뤄진다.</p><ul><li>첫 번째 차원은 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것이다.</li><li>두 번째 차원은 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것이다.</li></ul><p>모든 경우에 <strong>추상화의 목적</strong>은 복잡성을 <strong>이해하기 쉬운 수준으로 단순화</strong>하는 것이라는 점을 기억하라.</p><h3 id="객체" tabindex="-1"><a class="header-anchor" href="#객체" aria-hidden="true">#</a> 객체</h3><p>객체란 특정한 개념을 적용 할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다.</p><h3 id="개념의-세-가지-관점" tabindex="-1"><a class="header-anchor" href="#개념의-세-가지-관점" aria-hidden="true">#</a> 개념의 세 가지 관점</h3><ul><li>심볼(Symbol): 개념을 가리키는 간략한 이름이나 명칭</li><li>내연(Intension): 개념의 완전한 정의를 나타내며 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.</li><li>외연(Extension): 개념에 속하는 모든 객체의 집합</li></ul><h3 id="분류" tabindex="-1"><a class="header-anchor" href="#분류" aria-hidden="true">#</a> 분류</h3><p>분류란 객체의 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.</p><h3 id="타입" tabindex="-1"><a class="header-anchor" href="#타입" aria-hidden="true">#</a> 타입</h3><p>타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.</p><h3 id="데이터-타입" tabindex="-1"><a class="header-anchor" href="#데이터-타입" aria-hidden="true">#</a> 데이터 타입</h3><p>데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용하는 메모리 집합에 관한 메타데이터다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.</p><h2 id="_04-역할-책임-협력" tabindex="-1"><a class="header-anchor" href="#_04-역할-책임-협력" aria-hidden="true">#</a> 04. 역할, 책임, 협력</h2><h3 id="책임의-분류" tabindex="-1"><a class="header-anchor" href="#책임의-분류" aria-hidden="true">#</a> 책임의 분류</h3><p>객체의 책임은 객체가 무엇을 알고 있는 가(knowing)와 무엇을 할 수 있는 가(doing)로 구성된다.</p><p><strong>하는 것(doing)</strong></p><ul><li>객체를 생성하거나 계산하는 등의 스스로 하는 것</li><li>다른 객체의 행동을 시작시키는 것</li><li>다른 객체의 활동을 제어하고 조절하는 것</li></ul><p><strong>아는 것(knowing)</strong></p><ul><li>개인적인 정보에 관해 아는 것</li><li>관련된 객체에 관해 아는 것</li><li>자신이 유도하거나 계산할 수 있는 것에 관해 아는 것</li></ul><h3 id="역할" tabindex="-1"><a class="header-anchor" href="#역할" aria-hidden="true">#</a> 역할</h3><p>역할은 협력 내에서 다른 객체로 대체할 수 있음을 나타내는 일종의 표식이다. 협력 안에서 역할은 <strong>이 자리는 해당 역할을 수행할 수 있는 어떤 객체라도 대신할 수 있습니다</strong>라고 말하는 것과 같다.</p><h2 id="_05-책임과-메시지" tabindex="-1"><a class="header-anchor" href="#_05-책임과-메시지" aria-hidden="true">#</a> 05. 책임과 메시지</h2><h3 id="설계의-품질을-좌우하는-책임" tabindex="-1"><a class="header-anchor" href="#설계의-품질을-좌우하는-책임" aria-hidden="true">#</a> 설계의 품질을 좌우하는 책임</h3><p>객체지향 공통체를 구성하는 기본 단위는 자율적인 객체다. 객체들은 애플리케이션의 기능을 구현하기 위해 협력하고, 협력 과정에서 각자 맡은 바 책임을 다하기 위해 자율적으로 판단하고 행동한다.</p><p>여기서 키워드는 자율성이다. 자율성의 사전적 의미는 <strong>자기 스스로의 원칙에 따라 어떤 일을 하거나 자신을 통제해서 절제하는 성질이나 특성</strong>이다. 자율성의 반대말은 타율성으로, <strong>자신의 의지와 관계없이 정해진 규율이나 원칙에 따라서만 움직이는 성질</strong>을 의미한다. 따라서 자율적인 객체란 스스로 정한 원칙에 따라 판단하고 스스로의 의지를 기반으로 행동하는 객체다. 타인이 정한 규칙이나 명령에 따라 판단하고 행동하는 객체는 자율적인 객체라고 부르기 어렵다.</p><p>객체가 어떤 행동을 하는 유일한 이유는 다른 객체로부터 요청을 수신했기 때문이다. 요청을 처리하기 위해 객체가 수행하는 행동을 <strong>책임</strong>이라고 한다. 따라서 자율적인 객체란 스스로의 의지와 판단에 따라 각자 맡은 책임을 수행하는 객체를 의미한다.</p><p>객체지향 설계의 아름다움은 적절한 책임을 적절한 객체에게 할당하는 과정 속에서 드러난다. 객체지향 애플리케이션을 설계하는 가정 널리 알려진 방법을 책임-주도 설계라고 부르는 이유는 적절한 책임의 선택이 전체 설계의 방향을 결정하기 때문이다.</p><p>적절한 책임이 자율적인 객체를 낳고, 자율적인 객체들이 모여 유연하고 단순한 협력을 낳는다. 따라서 협력에 참여하는 객체가 얼마나 자율적인지가 전체 애플리케이션의 품질을 결정한다.</p><h3 id="어떻게가-아니라-무엇을" tabindex="-1"><a class="header-anchor" href="#어떻게가-아니라-무엇을" aria-hidden="true">#</a> 어떻게가 아니라 무엇을</h3><p>자율적인 책임의 특징은 객체가 어떻게(how)해야 하는 가가 아니라 무엇(what)을 해야 하는 가를 설명한다는 것이다. <strong>증언한다</strong>라는 책임은 모자 장수가 협력을 위해 무엇을 해야 하는지는 결정하지만 어떻게 해야 하는 지에 대해서는 전혀 언급하지 않는 다. 증언할 방법은 모자 장수가 자율적으로 선택할 수 있다.</p><h3 id="객체지향의-핵심-메시지" tabindex="-1"><a class="header-anchor" href="#객체지향의-핵심-메시지" aria-hidden="true">#</a> 객체지향의 핵심, 메시지</h3><p>클래스 기반의 객체지향 언어를 사용하는 대부분의 사람들은 객체지향 애플리케이션을 클래스의 집합으로 생각한다. 프로그래머 입장에서 클래스는 실제로 볼 수 있고 수정 할 수 있는 구체적인 존재다. 많은 객체지향 책에서는 클래스를 선언하고 속성과 메서드를 정의하는 방법에 초점을 맞춘다. 대부분의 입문자들은 클래스 간의 상속 관계가 객체지향 설계를 가치 있게 만드는 핵심적인 메커니즘이라고 배운다. 객체지향 설계에 관한 많은 논의가 클래스에 어떤 책임을 할당하고 클래스 간의 의존성을 어떻게 관리할 것인가를 집중된다. 어쨌든 훌륭한 객체지향 프로그래밍의 목적은 훌륭한 클래스를 창조하는 것이 아니던가?</p><p>클래스가 코드를 구현하기 위해 사용할 수 있는 중요한 추상화 도구인 것은 사실이지만 객체지향의 강력함은 클래스가 아니라 객체들이 주고받는 메시지로부터 나온다. 객체지향 애플리케이션은 클래스를 이용해 만들어지지만 메시지를 통해 정의된다. 실제로 애플리케이션을 살아있게 만드는 것은 클래스가 아니라 객체다. 그리고 이런 객체들의 윤곽을 결정하는 것이 바로 객체들이 주고받는 메시지다.</p><p>클래스는 단지 동적인 객체들의 특성과 행위를 정적인 텍스트로 표현하기 위해 사용할 수 있는 추상화 도구일 뿐이다. 중요한 것은 클래스가 아니라 객체다. 클래스를 정의하는 것이 먼저가 아니라 객체들의 속성과 행위를 식별하는 것이 먼저다. 클래스는 객체의 속성과 행위를 담는 틀일 뿐이다. 심지어는 클래스를 사용하지 않고도 객체의 속성과 행위를 표현할 수도 있다.</p><p>클래스를 중심으로 두는 설계는 유연하지 못하고 확장하기 어렵다. 객체지향 패러다임으로의 전환은 시스템을 정적인 클래스들의 집합이 아니라 메시지를 주고받는 동적인 객체들의 집합으로 바라보는 것에서 시작된다. 클래스에 담길 객체들의 공통적인 행위와 속성을 포착하기 위해서는 먼저 협력하는 객체들의 관점에서 시스템을 바라봐야 한다.</p><p>클래스를 객체지향 세계의 왕좌에서 끌어내렸다고 해서 모든 문제가 해결되는 것은 아니다. 진정한 객체지향 패러다임으로의 도약은 개별적인 객체가 아니라 메시지를 주고 받는 객체들 사이의 커뮤니케이션에 초점을 맞출 때 일어난다.</p>',58),d=[n];function t(s,o){return r(),e("div",null,d)}const p=a(i,[["render",t],["__file","9.html.vue"]]);export{p as default};
