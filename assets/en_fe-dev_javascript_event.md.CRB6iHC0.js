import{_ as e,c as a,o as i,a3 as n}from"./chunks/framework.9Buaa5aL.js";const k=JSON.parse('{"title":"History and Definition of DOM Event","description":"","frontmatter":{"title":"History and Definition of DOM Event"},"headers":[],"relativePath":"en/fe-dev/javascript/event.md","filePath":"en/fe-dev/javascript/event.md"}'),t={name:"en/fe-dev/javascript/event.md"},s=n(`<h1 id="history-and-definition-of-dom-event" tabindex="-1">History and Definition of DOM Event <a class="header-anchor" href="#history-and-definition-of-dom-event" aria-label="Permalink to &quot;History and Definition of DOM Event&quot;">​</a></h1><h2 id="history-of-dom-event" tabindex="-1">History of DOM Event <a class="header-anchor" href="#history-of-dom-event" aria-label="Permalink to &quot;History of DOM Event&quot;">​</a></h2><ul><li>The DOM Event API was an attempt to logically standardize in DOM Level 2.</li><li>Before the revision of DOM Level 2, IE and Netscape adopted opposite <code>event flow</code>.</li><li>IE supported event bubbling, and Netscape supported event capturing.</li><li>Currently, both event flows are supported.</li></ul><h2 id="definition-of-dom-event" tabindex="-1">Definition of DOM Event <a class="header-anchor" href="#definition-of-dom-event" aria-label="Permalink to &quot;Definition of DOM Event&quot;">​</a></h2><ul><li>Responsible for interaction between javascript and HTML.</li><li>Listeners are executed only when events occur using the observer pattern.</li></ul><h3 id="event-bubbling" tabindex="-1">Event Bubbling <a class="header-anchor" href="#event-bubbling" aria-label="Permalink to &quot;Event Bubbling&quot;">​</a></h3><ul><li>It starts from the element that is located most deeply in the document tree in the event flow and goes up.</li><li>It looks like bubbles rising as it flows up from the element located most deeply.</li></ul><h3 id="event-capturing" tabindex="-1">Event Capturing <a class="header-anchor" href="#event-capturing" aria-label="Permalink to &quot;Event Capturing&quot;">​</a></h3><ul><li>The event occurs first at the top node and last at the most explicit node.</li><li>Event capturing is designed to catch events before they reach the intended element.</li></ul><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>addEventListener(</span></span>
<span class="line"><span>  [event name],</span></span>
<span class="line"><span>  [handler],</span></span>
<span class="line"><span>  [call time true: capturing, false: bubbling]</span></span>
<span class="line"><span>)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onLoad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onLoad ,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,12),l=[s];function o(p,r,d,h,c,v){return i(),a("div",null,l)}const f=e(t,[["render",o]]);export{k as __pageData,f as default};
