import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as t}from"./app-dd334d53.js";const n={},i=t('<h1 id="추상화-정리" tabindex="-1"><a class="header-anchor" href="#추상화-정리" aria-hidden="true">#</a> 추상화 정리</h1><p>서비스를 개발하면서 많은 코드를 작성한다. 그 코드들 속에 중복적인 요소 또는 로직은 항상 존재한다. 중복적인 요소 또는 로직은 추상화를 통해 반복적인 작업을 줄일 수 있다.</p><p>추상화를 하는 과정은 중복적인 요소 또는 로직을 공통화하고, 결과적으로 재사용성을 높인다. 추상화는 요구사항 수정 시, 수정 범위를 최소화하기 때문에 구조 설계에 있어서 필수적인 과정이라고 할 수 있다.</p><p>추상화는 일반화와 단순화로 설명된다. 아래에서 자세히 알아보자.</p><h2 id="일반화" tabindex="-1"><a class="header-anchor" href="#일반화" aria-hidden="true">#</a> 일반화</h2><p>일반화는 우리가 작성하는 코드에서 중복적인 요소 또는 로직을 찾아 공통화하는 것을 의미한다.</p><p>이 말대로 하면 두가지 과정으로 일반화가 이뤄진다.</p><ol><li>중복적인 요소 또는 로직을 파악한다.</li><li>중복적인 요소를 성격에 따라 공통화 한다.</li></ol><h3 id="공통화" tabindex="-1"><a class="header-anchor" href="#공통화" aria-hidden="true">#</a> 공통화</h3><p>여기서 공통화는 중복적인 요소의 성격에 따라 다르게 가져간다. 성격은 이렇게 분류할 수 있다.</p><ul><li><strong>중복된 숫자, 문자, 옵션값</strong>은 <strong>상수</strong>로 정의한다.</li><li><strong>중복된 로직</strong>은 <strong>함수</strong>로 정의한다.</li><li><strong>중복된 로직과 상태</strong>를 갖는 것은 <strong>클래스</strong>로 정의한다.</li><li><strong>중복된 UI와 로직 또는 상태</strong>를 갖는 것은 <strong>컴포넌트</strong>로 정의한다.</li></ul><h2 id="단순화" tabindex="-1"><a class="header-anchor" href="#단순화" aria-hidden="true">#</a> 단순화</h2><p>공통된 요소를 분리하면 단순화 작업을 해야 한다. 공통된 요소를 분리했다는 것은 재사용을 하겠다는 의미이다. 재사용할 때는 쉽게 사용할 수 있어야 사용할 때도 부담이 적다.</p><h3 id="상수" tabindex="-1"><a class="header-anchor" href="#상수" aria-hidden="true">#</a> 상수</h3><p><strong>상수</strong>는 네이밍을 통해 단순화를 한다. 상수의 값을 의미할 수 있는 최소한의 단어를 조합해서 단순화를 한다. 네이밍 단순화는 함수, 클래스, 컴포넌트 모두 적용이 필요하다. 그러므로 이후에는 네이밍 설명은 생략한다.</p><h3 id="함수" tabindex="-1"><a class="header-anchor" href="#함수" aria-hidden="true">#</a> 함수</h3><p><strong>함수</strong>는 인자와 반환값을 단순화해야 한다.</p><p>인자는 개수가 적을 수록 좋다. 인자가 2개인 함수보다 인자가 1개인 함수가 이해하기 쉽다. 인자의 개수가 적을 수록 이해하기 쉬우므로 외부에서 전달받아야 하는 인자는 최소화해야 한다.</p><p>반환값은 항상 같은 타입을 반환하는 게 좋다. 다른 타입을 반환하면 사용측에서 타입 분기가 필요하다.</p><p>그리고 반환값은 항상 같은 인자에 대응해서 멱등성을 가지는 게 좋다. 그럼 인자에 따라 반환값이 항상 추측할 수 있다. 반대로 동일한 인자인데 반환값이 다르면 추측하기 힘든 함수가 된다.</p><h3 id="클래스" tabindex="-1"><a class="header-anchor" href="#클래스" aria-hidden="true">#</a> 클래스</h3><p><strong>클래스</strong>는 담당하는 책임이 단순할 수록 좋다. 클래스의 책임을 파악하려면 역할과 권한을 파악하면 된다. 클래스가 어떤 역할을 하고 권한이 있는지 파악하면 그에 따른 책임을 파악할 수 있다.</p><p>역할을 파악하기 위해서는 클래스가 무엇을 알고(knowing) 하는 가(doing)에 대한 파악하면 된다. 아는 것에는 클래스에서 다루는 상태와 자신과 관련된 클래스를 의미한다. 하는 것에는 객체를 생성하거나 계산하는 것과 다른 객체를 조작하는 것을 의미한다.</p><p>이러한 요소들이 많으면 많을 수록 역할과 권한이 많아지며 그에 따른 책임이 많아진다. 그러므로 단순하게 유지하도록 해야 한다.</p><h3 id="컴포넌트" tabindex="-1"><a class="header-anchor" href="#컴포넌트" aria-hidden="true">#</a> 컴포넌트</h3><p><strong>컴포넌트</strong>는 클래스와 마찬가지로 담당하는 책임이 단순할 수록 좋다. 컴포넌트는 조작하는 UI의 역할에 따라 책임이 달라진다.</p><p>대표적으로 이러한 UI들이 있다.</p><ul><li>버튼과 입력 박스 등과 같은 UI</li><li>버튼과 입력 박스를 조합한 폼 영역 UI</li><li>폼 영역 UI와 타이틀 그리고 네비게이션을 조합한 페이지</li></ul><p>이러한 UI에 따라 책임이 달라진다. 그렇기 때문에 각각 UI가 가져야 하는 상태와 로직을 규모에 따라 컴포넌트화해야 한다. 그리고 컴포넌트간의 통신 방법을 단순화하는 게 좋다.</p>',29),s=[i];function o(h,d){return a(),e("div",null,s)}const c=r(n,[["render",o],["__file","abstract.html.vue"]]);export{c as default};
