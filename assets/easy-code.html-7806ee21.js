import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as a,d as t,e as l}from"./app-5d7ce974.js";const i={},u=l(`<h1 id="이해하기-쉬운-코드-작성방법-정리" tabindex="-1"><a class="header-anchor" href="#이해하기-쉬운-코드-작성방법-정리" aria-hidden="true">#</a> 이해하기 쉬운 코드 작성방법 정리</h1><blockquote><p>2019년 5월 1일에 카카오 FE 플랫폼팀에서 발표 후 자료를 추가해서 작성한 포스트입니다.</p></blockquote><h3 id="글의-목적" tabindex="-1"><a class="header-anchor" href="#글의-목적" aria-hidden="true">#</a> 글의 목적</h3><p>코드 리뷰를 받다보면 본인이 작성한 <strong>네이밍의 의미가 모호</strong>하다는 피드백을 받거나 <strong>로직이 이해하기 힘들다</strong>는 피드백을 받을 때가 있다. 동료들이 본인이 작성한 코드를 이해하지 못했을 때는 코드 작성 방법에 변경할 필요가 생긴 것이다. 이 부분을 개선하기 위해 <strong>이해하기 쉬운 코드 작성 방법</strong>을 리서치를 했다. 이 포스트는 리서치한 자료들을 정리한 포스트이다.</p><h3 id="왜-코드는-이해하기-쉬워야-할까" tabindex="-1"><a class="header-anchor" href="#왜-코드는-이해하기-쉬워야-할까" aria-hidden="true">#</a> 왜 코드는 이해하기 쉬워야 할까?</h3><p>우리는 코드를 작성하는 시간보다 <strong>코드를 보고만 있는 시간</strong>을 대부분 차지한다. 우리에게는 시간은 유한하고 제한시간에 요구사항을 개발하는 게 하나의 목표이다. 그렇기 때문에 서비스를 운영하고 있는 내 자신 또는 동료가 <strong>코드를 이해하는 데 소비되는 시간을 최소화</strong>해야 한다.</p><h3 id="코드를-완전히-이해한다는-것은-무엇을-의미할까" tabindex="-1"><a class="header-anchor" href="#코드를-완전히-이해한다는-것은-무엇을-의미할까" aria-hidden="true">#</a> 코드를 완전히 이해한다는 것은 무엇을 의미할까?</h3><p>코드를 이해한다는 것은 세가지를 충족했을 때를 의미한다.</p><ul><li>첫째, 코드를 자유롭게 수정이 가능하다.</li><li>둘째, 버그를 짚어내는 것이 가능하다.</li><li>셋째, 수정된 내용이 작성한 다른 부분의 코드와 어떻게 상호작용 하는지를 알 수 있어야 한다.</li></ul><p>요약하면 코드를 수정가능하고, 버그를 짚어내는 것이 가능하며 수정 시 사이드 이펙트 없이 수정할 수 있을 때, 코드를 완전히 이해한다고 할 수 있다.</p><h2 id="이제-본론으로-들어가겠습니다" tabindex="-1"><a class="header-anchor" href="#이제-본론으로-들어가겠습니다" aria-hidden="true">#</a> 이제 본론으로 들어가겠습니다.</h2><p>이해하기 쉬운 코드를 작성하기 위해 6개의 카테고리로 분류했다.</p><ul><li>네이밍</li><li>코드의 미학</li><li>논리 단순화</li><li>작은 것이 아름답다</li><li>테스트 코드</li><li>함수형 프로그래밍</li></ul><h3 id="네이밍" tabindex="-1"><a class="header-anchor" href="#네이밍" aria-hidden="true">#</a> 네이밍</h3><p>변수명/함수명/클래스명의 이름을 결정할 때는 항상 같은 원리가 적용된다. 이름은 <strong>일종의 설명문</strong>으로 간주해야 한다. 적절한 이름을 붙일 수 있다는 것은 해당 요소가 바르게 이해되고 바르게 설계되어 있다는 뜻이다. 반대로 어울리지 않는 이름을 붙여졌다는 것은 해당 요소가 달성해야 할 역할에 대해 프로그래머 자신이 충분히 이해하지 못했다는 뜻이다.</p><h4 id="효과적인-네이밍-작성" tabindex="-1"><a class="header-anchor" href="#효과적인-네이밍-작성" aria-hidden="true">#</a> 효과적인 네이밍 작성</h4><p>네이밍을 통해 프로그래머끼리 의사소통을 이루어지므로 이름이 적절하지 않으면 코드상의 대화는 성립하지 않는다. <strong>효과적인 이름</strong>을 작성하기 위해서는 이러한 과정이 필요하다.</p><ul><li>이름은 효과와 목적을 설명하도록 한다.</li><li>이름은 발음 가능한 것으로 한다.</li><li>이름은 검색 가능하도록 한다.</li></ul><h4 id="네이밍을-잘했는-지-확인하려면" tabindex="-1"><a class="header-anchor" href="#네이밍을-잘했는-지-확인하려면" aria-hidden="true">#</a> 네이밍을 잘했는 지 확인하려면?</h4><p>명명에는 <strong>이름 가역성</strong>이라는 개념이 있다. 이는 <strong>이름이란 명명의 기반이 된 내용의 설명문을 복원할 수 있어야 한다</strong>는 명명 방침이다. 이 방침을 충족하려면 <strong>루프백 확인</strong>을 수행해야 한다.</p><p><strong>루프백 확인</strong>은 내용의 설명문으로 부터 이름을 떠올렸다면 반대로 이름을 추측할 수 있는 설명문을 생각해보는 것이다. <strong>설명 -&gt; 이름 -&gt; 설명</strong>의 순으로 한 바퀴 돌아서 원래로 돌아왔을 때 설명이 일치하면 좋은 이름이고, 일치하지 않으면 주의가 필요하다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(a, b) =&gt; a + b -&gt; add -&gt; (a, b) =&gt; a + b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="이름에-정보를-담아내는-방법" tabindex="-1"><a class="header-anchor" href="#이름에-정보를-담아내는-방법" aria-hidden="true">#</a> 이름에 정보를 담아내는 방법</h4><p><strong>1. 보편적인 단어를 피하고 구체적인 단어를 선택한다.</strong></p><p><strong>어디에서 가져오는 지</strong>, <strong>무엇을 수행하는 지</strong>, <strong>무엇을 반환하는 지</strong>에 따라 구체적인 단어를 선택할 수 있다. 예를 들어 페이지를 요청할 때는 <code>getPage()</code>보다는 <code>fetchPage()</code>, 사이즈를 가져올 때는 <code>size</code>보다는 <code>height</code>, <code>nodesLength</code>, <code>memoryBytes</code>와 같이 구체적인게 정확한 의도를 전달할 수 있다.</p><p><strong>2. 시간의 양이나 바이트의 수 같이 측정치를 포함한다면, 단위를 포함시킨다.</strong></p><h5 id="not-cool" tabindex="-1"><a class="header-anchor" href="#not-cool" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Load time was: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// Wrong!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool" tabindex="-1"><a class="header-anchor" href="#cool" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> startMs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> endMs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startMs
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Load time was: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>endMs <span class="token operator">/</span> <span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> seconds</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="파일-사이즈-경우" tabindex="-1"><a class="header-anchor" href="#파일-사이즈-경우" aria-hidden="true">#</a> 파일 사이즈 경우</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isValidFile <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxFileSizeInBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tooltipService<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">파일 용량은 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxFileSizeInBytes <span class="token operator">/</span> <span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">KB를 초과할 수 없습니다</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  isValidFile <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">maxFileSizeKB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxFileSizeInBytes <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">currentFileSizeKB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentFileSize <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 위험한 요소 표현</strong></p><p>나중에 잘못 이해했을 때 심각한 버그를 만들 가능성 있는 것들을 표현하는 게 좋다.</p><ul><li>패스워드가 암호화 안되있다면 : <code>password</code> =&gt; <code>plainTextPassword</code></li><li>URL Encoded 데이터라면 : <code>data</code> =&gt; <code>dataURLEnc</code></li><li>이스케이프 처리가 되어야 한다면 : <code>comment</code> =&gt; <code>unescapedComment</code></li></ul><h4 id="이름은-얼마나-길어야-할까" tabindex="-1"><a class="header-anchor" href="#이름은-얼마나-길어야-할까" aria-hidden="true">#</a> 이름은 얼마나 길어야 할까?</h4><p><strong>좁은 범위</strong>에서는 짧은 이름이 괜찮다. 좁은 범위에서만 사용되는 변수의 이름에 많은 정보를 담을 필요가 없기 때문이다. 좁은 범위에서는 변수의 타입, 초기값 등 모든 정보가 쉽게 한눈에 보이므로 짧은 이름을 사용해도 좋다.</p><p>범위에 따라 불필요한 단어를 제거할 수 있다. 정보의 손실하지 않으면서 이름에 포함된 단어를 제거할 수 있다. <code>convertToString()</code> =&gt; <code>toString()</code></p><p><strong>약어와 축약형</strong>을 사용하는 것은 특정 프로젝트에 국한된 의미를 가지기 때문에 좋은 생각이 아니다. 새로 합류한 사람에게는 비밀스럽고 위협적인 모습이다. <strong>팀에 새로합류한 사람이 이름을 의미하는 바를 이해할 수 있을 까</strong>를 기준으로 생각하는 게 좋다.</p><h4 id="이름-포맷팅으로-의미-전달" tabindex="-1"><a class="header-anchor" href="#이름-포맷팅으로-의미-전달" aria-hidden="true">#</a> 이름 포맷팅으로 의미 전달</h4><p>문법적 차이가 드러나게 서로 다른 개체의 이름에 각자 <strong>다른 포맷팅 방식</strong>을 적용하는 방식은 코드를 더 읽게 쉽게 해준다. 아래는 자바스크립트에서 보편적으로 사용하는 포맷팅 방식이다.</p><ul><li>클래스 : PascalCase</li><li>변수, 함수, 메소드 : camelCase</li><li>상수 : CONSTANT_NAME</li></ul><h3 id="코드의-미학" tabindex="-1"><a class="header-anchor" href="#코드의-미학" aria-hidden="true">#</a> 코드의 미학</h3><p>미학적으로 보기 좋은 코드가 사용하기 더 편리하다는 사실은 명백하다. 잘 생각해보면 소비되는 시간이 <strong>코드를 바라보는 데 많이 소요</strong>된다. 코드를 훑어보는 데 걸리는 시간이 적을 수록, 사람들은 코드를 더 쉽게 사용할 수 있다.</p><h4 id="일관성과-간결성을-위해서-줄바꿈을-재정렬" tabindex="-1"><a class="header-anchor" href="#일관성과-간결성을-위해서-줄바꿈을-재정렬" aria-hidden="true">#</a> 일관성과 간결성을 위해서 줄바꿈을 재정렬</h4><h5 id="not-cool-1" tabindex="-1"><a class="header-anchor" href="#not-cool-1" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-1" tabindex="-1"><a class="header-anchor" href="#cool-1" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="불규칙적으로-정의된-로직은-메소드를-활용하여-정렬" tabindex="-1"><a class="header-anchor" href="#불규칙적으로-정의된-로직은-메소드를-활용하여-정렬" aria-hidden="true">#</a> 불규칙적으로 정의된 로직은 메소드를 활용하여 정렬</h4><h5 id="not-cool-2" tabindex="-1"><a class="header-anchor" href="#not-cool-2" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span>
    char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">backword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span><span class="token operator">:</span>
    char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">backword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> char <span class="token operator">===</span> <span class="token string">&#39;t&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;f&#39;</span><span class="token operator">:</span>
    <span class="token keyword">const</span> isTrue <span class="token operator">=</span> input<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;t&#39;</span>
    stack<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    cursor <span class="token operator">=</span> cursor <span class="token operator">+</span> <span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> char <span class="token operator">===</span> <span class="token string">&#39;n&#39;</span><span class="token operator">:</span>
    stack<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    cursor <span class="token operator">=</span> cursor <span class="token operator">+</span> <span class="token number">3</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-2" tabindex="-1"><a class="header-anchor" href="#cool-2" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token function">isObject</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">parseObject</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> stack<span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token function">isArray</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">parseArray</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> stack<span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token function">isBoolean</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    cursor <span class="token operator">=</span> <span class="token function">parseBoolean</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> stack<span class="token punctuation">)</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> <span class="token function">isNull</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    cursor <span class="token operator">=</span> <span class="token function">parseNull</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> stack<span class="token punctuation">)</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> v <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> v <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> <span class="token function-variable function">isBoolean</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> <span class="token string">&#39;t&#39;</span> <span class="token operator">||</span> v <span class="token operator">===</span> <span class="token string">&#39;f&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isNull</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">===</span> <span class="token string">&#39;n&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">parseObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">,</span> stack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">backword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">parseArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">char<span class="token punctuation">,</span> stack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  char <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">forword</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">backword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">parseBoolean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> stack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isTrue <span class="token operator">=</span> input<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;t&#39;</span>
  stack<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> cursor <span class="token operator">+</span> <span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">parseNull</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cursor<span class="token punctuation">,</span> stack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  stack<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> cursor <span class="token operator">+</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="선언문을-블록으로-구성" tabindex="-1"><a class="header-anchor" href="#선언문을-블록으로-구성" aria-hidden="true">#</a> 선언문을 블록으로 구성</h4><p>우리의 뇌는 자연스럽게 <strong>그룹과 계층 구조</strong>를 따라서 동작한다. 논리 영역에 따라서 비슷한 생각을 묶어서 선언하면 성격이 다른 생각과 구분한다.</p><h5 id="not-cool-3" tabindex="-1"><a class="header-anchor" href="#not-cool-3" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">TXT_PATH</span> <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  readFileSync<span class="token punctuation">,</span>
  writeFileSync
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">JSON_PATH</span> <span class="token operator">=</span> <span class="token string">&#39;test.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-3" tabindex="-1"><a class="header-anchor" href="#cool-3" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>
  readFileSync<span class="token punctuation">,</span>
  writeFileSync
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">TXT_PATH</span> <span class="token operator">=</span> <span class="token string">&#39;test.txt&#39;</span>
<span class="token keyword">const</span> <span class="token constant">JSON_PATH</span> <span class="token operator">=</span> <span class="token string">&#39;test.json&#39;</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="추상화-수준-정리하기" tabindex="-1"><a class="header-anchor" href="#추상화-수준-정리하기" aria-hidden="true">#</a> 추상화 수준 정리하기</h4><p>코드를 정리할 때는 높은 수준의 추상화 개념과 낮은 수준의 추상화 개념을 분리하도록 한다. 추상화 단계는 상하가 아니라 기능의 복잡도에 따라 여러 계층으로 분리한다.</p><p>결과적으로 추상화 수준을 일치시킨 코드는 훌륭한 책과 같다. 최고 수준부터 중간 수준의 처리가 <strong>책의 목차</strong>가 되고 최저 수준의 처리가 <strong>책의 본문 내용</strong>이 된다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function 고수준() { 중수준1(); 중수준2(); } // 수준1의 목차
function 중수준1() { 저수준1(); 저수준2(); } // 수준2의 목자-1
function 저수준1() { }
function 저수준2() { }
function 중수준2() { 저수준3(); }
function 저수준3() { }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onChangeImage</span> <span class="token operator">=</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validateImageFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;이미지 파일만 업로드 가능합니다.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token function">uploadImageFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">validateImageFile</span> <span class="token operator">=</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isImageFile</span><span class="token punctuation">(</span><span class="token function">extractExtension</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">extractExtension</span> <span class="token operator">=</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">isImageFile</span> <span class="token operator">=</span> <span class="token parameter">ext</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jpg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">uploadImageFile</span> <span class="token operator">=</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="논리-단순화" tabindex="-1"><a class="header-anchor" href="#논리-단순화" aria-hidden="true">#</a> 논리 단순화</h3><p>조건, 루프, 흐름을 통제하는 선언문은 코드를 복잡하게 만드는 원인이다. 코드를 읽을 때 다시 되돌아가서 코드를 읽지 않아도 되게끔 만들어야 한다.</p><h4 id="조건문에서-인수의-순서" tabindex="-1"><a class="header-anchor" href="#조건문에서-인수의-순서" aria-hidden="true">#</a> 조건문에서 인수의 순서</h4><p>인수의 <strong>왼쪽</strong>은 <strong>질문을 받는 표현</strong>을 정의하고, <strong>오른쪽</strong>에는 <strong>비교대상</strong>을 두는 것이 통계적으로 가독성이 더 좋다. 이러한 가이드 라인은 영어 어순과 일치한다.</p><h5 id="not-cool-4" tabindex="-1"><a class="header-anchor" href="#not-cool-4" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="cool-4" tabindex="-1"><a class="header-anchor" href="#cool-4" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="if-else-블록의-순서" tabindex="-1"><a class="header-anchor" href="#if-else-블록의-순서" aria-hidden="true">#</a> if/else 블록의 순서</h4><p><code>if/else</code>를 사용하는 경우 부정이 아닌 긍정을 먼저 다루는 게 좋다. 첫번째 블록을 생각할 때 한번 부정한 값을 생각해야 함으로 긍정부터 다루는 게 이해하기 쉽다.</p><h5 id="not-cool-5" tabindex="-1"><a class="header-anchor" href="#not-cool-5" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-5" tabindex="-1"><a class="header-anchor" href="#cool-5" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="중첩을-최소화하기" tabindex="-1"><a class="header-anchor" href="#중첩을-최소화하기" aria-hidden="true">#</a> 중첩을 최소화하기</h4><p>코드의 중첩이 심할 수록 코드를 읽는 사람의 마음속에 존재하는 정신적 스택에 추가적인 조건이 입력된다. 중첩을 제거하려면 함수 중간에 반환하기를 하여 제거할 수 있다.</p><h5 id="not-cool-6" tabindex="-1"><a class="header-anchor" href="#not-cool-6" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>userResult <span class="token operator">===</span> <span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>permissionResult <span class="token operator">!==</span> <span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span><span class="token string">&#39;error reading permissions&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span>userResult<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

reply<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-6" tabindex="-1"><a class="header-anchor" href="#cool-6" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>userResult <span class="token operator">!==</span> <span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span>userResult<span class="token punctuation">)</span>
  reply<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>permissionResult <span class="token operator">!==</span> <span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span><span class="token string">&#39;error reading permissions&#39;</span><span class="token punctuation">)</span>
  reply<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>

reply<span class="token punctuation">.</span><span class="token function">writeError</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
reply<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="거대한-구문-나누기" tabindex="-1"><a class="header-anchor" href="#거대한-구문-나누기" aria-hidden="true">#</a> 거대한 구문 나누기</h4><p>개별적인 표현은 그렇게 크지 않지만, 모두 한 곳에 있어서 코드를 읽는 사람의 머리를 강타하는 거대한 구문을 형성한다. 다행히도 표현하는 많은 부분이 동일하다. 따라서 동일한 부분을 <strong>요약 변수</strong>로 추출해서 함수의 앞부분에 놓아둘 수 있다.</p><h5 id="not-cool-7" tabindex="-1"><a class="header-anchor" href="#not-cool-7" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">updateHighlight</span> <span class="token operator">=</span> <span class="token parameter">messageNum</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#vote_value</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;Up&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_up</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlighted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_down</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlighted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#vote_value</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;Down&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_up</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlighted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_down</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlihgted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wrong!!</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_up</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlighted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_down</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;highlighted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-7" tabindex="-1"><a class="header-anchor" href="#cool-7" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">updateHighlight</span> <span class="token operator">=</span> <span class="token parameter">messageNum</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> thumbsUp <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_up</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> thumbsDown <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#thumbs_down</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> voteValueHtml <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#vote_value</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messageNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token constant">ACTIVE_CLASS</span> <span class="token operator">=</span> <span class="token string">&quot;highlighted&quot;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>voteValueHtml <span class="token operator">===</span> <span class="token string">&quot;Up&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    thumbsUp<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token constant">ACTIVE_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    thumbsUp<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token constant">ACTIVE_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>voteValueHtml <span class="token operator">===</span> <span class="token string">&quot;Down&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    thumbsDown<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token constant">ACTIVE_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    thumbsDown<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token constant">ACTIVE_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="드모르간의-법칙-사용하기" tabindex="-1"><a class="header-anchor" href="#드모르간의-법칙-사용하기" aria-hidden="true">#</a> 드모르간의 법칙 사용하기</h4><p>동일한 불리언 표현은 다음과 같이 두가지 방법으로 작성할 수 있다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>!(a || b || c) === !a &amp;&amp; !b &amp;&amp; !c
!(a &amp;&amp; b &amp;&amp; c) === !a || !b || !c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="not-cool-8" tabindex="-1"><a class="header-anchor" href="#not-cool-8" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fileExists <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isProtected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;아이고 파일을 읽을 수 없습니다.&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="cool-8" tabindex="-1"><a class="header-anchor" href="#cool-8" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileExists <span class="token operator">||</span> isProtected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;아이고 파일을 읽을 수 없습니다.&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="작은-것이-아름답다" tabindex="-1"><a class="header-anchor" href="#작은-것이-아름답다" aria-hidden="true">#</a> 작은 것이 아름답다</h3><p><strong>작은 소프트웨어</strong>는 단순하고 다루기 쉬우며 <strong>큰 소프트웨어</strong>보다 훨씬 뛰어나다. 따라서 소프트웨어는 작게 만들고 작게 유지하도록 한다.</p><p>작은 소프트웨어는 다음과 같은 장점이 있다.</p><ol><li>이해가 쉽다.</li><li>수정이 쉽다.</li><li>다른 소프트웨어와 조합하기 쉽다.</li></ol><p>반면에 큰 소프트웨어는 다음과 같은 문제가 있다.</p><ol><li>복잡하고 코드를 이해하기 어렵다.</li><li>예측하지 못하고 사태에 대응하기 힘들다.</li></ol><h4 id="설명-변수" tabindex="-1"><a class="header-anchor" href="#설명-변수" aria-hidden="true">#</a> 설명 변수</h4><p>커다란 표현을 쪼개는 가장 쉬운 방법은 작은 하위 표현을 담을 추가 변수를 만드는 것이다. 하위표현의 의미를 설명하므로 <strong>설명 변수</strong>라고도 한다.</p><h5 id="not-cool-9" tabindex="-1"><a class="header-anchor" href="#not-cool-9" aria-hidden="true">#</a> Not Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="cool-9" tabindex="-1"><a class="header-anchor" href="#cool-9" aria-hidden="true">#</a> Cool</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> username <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="상관없는-하위문제-추출하기" tabindex="-1"><a class="header-anchor" href="#상관없는-하위문제-추출하기" aria-hidden="true">#</a> 상관없는 하위문제 추출하기</h4><p>엔지니어링은 커다란 문제를 작은 문제들로 쪼갠 다음, 각각의 문제에 대한 해결책을 구하고, 다시 하나의 해결책으로 맞추는 일련의 작업을 한다. 이러한 원리를 코드에 적용하면 코드가 더 튼튼해지며 가독성도 좋아진다. 큰 흐름과 관계가 적은 하위문제를 적극적으로 발견해서 추출하라는 것이다. 이 말이 의미하는 바는 다음과 같다.</p><ol><li>주어진 함수의 코드 블록을 보고, 스스로에게 질문하라 <strong>상위수준에서 본 이 코드의 목적은 무엇인가?</strong></li><li>코드의 모든 줄에 질문을 던져라 <strong>이 코드는 직접적으로 목적을 위해서 존재하는 가?</strong> 혹은 <strong>목적을 위해서 필요하긴 하지만 목적 자체와 직접적으로 상관없는 하위문제를 해결하는가?</strong></li><li>만약 상당히 원래의 목적과 직접적으로 관련되지 않은 하위문제를 해결하는 코드 분량이 많으면, 이를 추출해서 별도의 함수로 만든다.</li></ol><p>다음 자바스크립트 코드의 <strong>상위수준 목적</strong>은 주어진 점과 가장 가까운 장소를 찾는 것이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">findClosestLocation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lat<span class="token punctuation">,</span> lng<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> closest
  <span class="token keyword">let</span> closestDist <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> latRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lngRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lng<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lat2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>latitude<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lng2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span>
    
    <span class="token comment">// 코사인의 특별법칙 공식을 사용한다.</span>
    <span class="token keyword">const</span> dist <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>
      Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>latRad<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>lat2Rad<span class="token punctuation">)</span> <span class="token operator">+</span>
      Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>latRad<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>lat2Rad<span class="token punctuation">)</span> <span class="token operator">*</span>
      Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>lng2Rad <span class="token operator">-</span> lngRad<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">&lt;</span> closestDist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      closest <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      closestDist <span class="token operator">=</span> dist
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> closest
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>루프의 내부에 있는 코드는 대부분 주요 목적과 <strong>직접 상관없는 하위문제</strong>를 다룬다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sphericalDistance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lat1<span class="token punctuation">,</span> lng1<span class="token punctuation">,</span> lat2<span class="token punctuation">,</span> lng2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> latRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lat1<span class="token punctuation">)</span>
  <span class="token keyword">const</span> lngRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lng1<span class="token punctuation">)</span>
  <span class="token keyword">const</span> lat2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lat2<span class="token punctuation">)</span>
  <span class="token keyword">const</span> lng2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lng2<span class="token punctuation">)</span>
    
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>
    Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>latRad<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>lat2Rad<span class="token punctuation">)</span> <span class="token operator">+</span>
    Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>latRad<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>lat2Rad<span class="token punctuation">)</span> <span class="token operator">*</span>
    Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>lng2Rad <span class="token operator">-</span> lngRad<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 원래 코드는 이렇게 변한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">findClosestLocation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lat<span class="token punctuation">,</span> lng<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> closest
  <span class="token keyword">let</span> closestDist <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> latRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lngRad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>lng<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lat2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>latitude<span class="token punctuation">)</span>
    <span class="token keyword">const</span> lng2Rad <span class="token operator">=</span> <span class="token function">radians</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span>
    
    <span class="token comment">// 코사인의 특별법칙 공식을 사용한다.</span>
    <span class="token keyword">const</span> dist <span class="token operator">=</span> <span class="token function">sphericalDistance</span><span class="token punctuation">(</span>lat<span class="token punctuation">,</span> lng<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist <span class="token operator">&lt;</span> closestDist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      closest <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      closestDist <span class="token operator">=</span> dist
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> closest
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드를 읽는 사람도 밀도 높은 기하 공식에 방해받지 않고 <strong>상위수준의 목적에 집중</strong>할 수 있으니 전반적으로 코드의 가독성이 높아졌다.</p><h4 id="기존의-인터페이스를-단순화하기" tabindex="-1"><a class="header-anchor" href="#기존의-인터페이스를-단순화하기" aria-hidden="true">#</a> 기존의 인터페이스를 단순화하기</h4><p>라이브러리가 깔끔한 인터페이스를 제공하면 누구나 좋아한다. 하지만 자신이 사용하는 인터페이스가 깔끔하지 않다면, 깔끔한 <strong>덮개</strong>(Wrapper)로 보완할 수 있다.</p><p>예를 들어 자바스크립트가 브라우저 쿠키를 다루는 방식은 전혀 이상적이지 않다. 개념적으로 보면 쿠키는 이름/값 짝으로 이루어진다. 브라우저가 제공하는 인터페이스는 다음과 같은 문법으로 된 하나의 <code>document.cookie</code>를 사용한다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name1=value1; name2=value2; ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>필요한 쿠키를 찾으려면 이 거대한 문자열의 구문분석을 직접 수행해야 한다. 다음은 <code>max_results</code>라는 이름을 가진 쿠키의 값을 읽는 코드이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> maxResults
<span class="token keyword">const</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[ ]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;max_results&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    maxResults <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정말 지저분한 코드다. 다음과 같이 사용할 수 있는 <code>getCookie()</code>함수를 만들어야 할 것 처럼 보인다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> maxResults <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;max_results&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>여기서 <strong>이상적이지 않은 인터페이스를 그냥 받아들일 이유가 없다</strong>는 교훈을 얻을 수 있다. 이런 인터페이스가 있으면 언제나 이를 둘러싸는 함수를 작성하여 지저분한 내부를 감출 수 있다.</p><h5 id="sessionstorage-경우" tabindex="-1"><a class="header-anchor" href="#sessionstorage-경우" aria-hidden="true">#</a> sessionStorage 경우</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">BROWSER_STORAGE</span> <span class="token operator">=</span> sessionStorage
<span class="token keyword">const</span> <span class="token function-variable function">setItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token constant">BROWSER_STORAGE</span><span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">getItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">BROWSER_STORAGE</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;isCanlender&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;dateIds&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;isCanlender&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;dateIds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="테스트-코드" tabindex="-1"><a class="header-anchor" href="#테스트-코드" aria-hidden="true">#</a> 테스트 코드</h3><p><strong>테스트 코드가 읽기 쉬워야 한다는 점</strong>은 테스트와 상관없는 실제 코드와 마찬가지로 중요하다. 테스트 코드는 실제 코드가 어떻게 동작하며 어떻게 사용되어야 하는지에 관한 비공식적인 문서라고 생각할 수 있다. 따라서 테스트 코드가 읽기 쉬우면, 사용자는 실제 코드가 어떻게 동작하는 지 그만큼 더 쉽게 이해할 수 있다.</p><p>일반적인 설계원리를 따르면 덜 중요한 세부 사항은 사용자가 볼 필요 없게 숨겨서 더 중요한 내용이 눈에 잘 띄게 해야 한다.</p><h4 id="명세-기반-테스트-기법-종류" tabindex="-1"><a class="header-anchor" href="#명세-기반-테스트-기법-종류" aria-hidden="true">#</a> 명세 기반 테스트 기법 종류</h4><p>테스트 기법을 정확히 알고 있어야 원하는 테스트와 테스트 코드의 목적을 명확히 할 수 있다. 테스트 코드에는 테스트 기법 하나씩 사용하여 읽기 쉬운 코드를 만들도록 해야 한다.</p><p><strong>1. 동등분할</strong></p><p>테스트 대상 데이터의 구간을 일정 간격으로 분할하여 케이스를 구성한다. 보통 데이터의 구간에 중간값을 대표값으로 사용한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToGrade</span> <span class="token operator">=</span> <span class="token parameter">score</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;B&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;C&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;D&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;E&#39;</span>
    <span class="token keyword">default</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToGrade&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">90</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;B 학점&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">70</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 경계값 분석</strong></p><p>분기 또는 반복 구문의 경계 값을 기준으로 케이스를 구성한다. <strong>min, min+, normal, max-, max</strong> 다섯 경우의 케이스로 구성한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToGrade</span> <span class="token operator">=</span> <span class="token parameter">score</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;B&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;C&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;D&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;E&#39;</span>
    <span class="token keyword">default</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToGrade&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - min&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">81</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - min+&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">82</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - normal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">90</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - max-&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">99</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - max&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 결정 테이블</strong></p><p>조건(입력 값)과 행위(결과 값)를 테이블로 구성하여 케이스 및 절차를 구성한다. 프로세스 수행 중 요구되는 결정 또는 조건과 프로세스와 관련된 모든 동작을 기술한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">INVALID_EMAIL</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">INVALID_PASSWORD</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">LOGIN</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">EMAIL</span> <span class="token operator">=</span> <span class="token string">&#39;EMAIL&#39;</span>
  <span class="token keyword">const</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&#39;PASSWORD&#39;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일/비밀번호 유효하지 않을 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_EMAIL</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일 유효하고, 비밀번호 유효하지 않을 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token constant">EMAIL</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_PASSWORD</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일 유효하지 않고, 비밀번호 유효할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token constant">PASSWORD</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_EMAIL</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일/비밀번호 유효할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token constant">EMAIL</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token constant">PASSWORD</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">LOGIN</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 조합</strong></p><p>테스트하는 데 필요한 값이 다른 파라미터의 값과 최소한 한 번씩은 조합하여 케이스를 구성한다. 대부분의 결함이 두 개 요소의 상호작용에 기인한다는 것에 착안하여, 두 개 요소의 모든 조합을 다룬다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token literal-property property">repeat</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">base</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">eq</span><span class="token operator">:</span> boolean<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">repeat</span><span class="token operator">:</span> repeat <span class="token operator">?</span> <span class="token string">&#39;전체반복&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> base <span class="token operator">?</span> <span class="token string">&#39;설정&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;해제&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">eq</span><span class="token operator">:</span> eq <span class="token operator">?</span> <span class="token string">&#39;설정&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;해제&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToTitle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 전체반복, base: 설정, EQ: 설정&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;전체반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 전체반복, base: 해제, EQ: 해제&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;전체반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 한곡반복, base: 설정, EQ: 해제&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 한곡반복, base: 해제, EQ: 설정&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 상태전이</strong></p><p>시스템의 각 상태를 중심으로 케이스를 도출하고 전이 상태를 절차로 구성한다. 객체의 상태를 구분하고 이벤트에 의해 어느 한 상태에서 다른 상태로 전이되는 경우의 수를 테스트 케이스로 구성한다. 상태 머신을 사용하는 UI 컴포넌트 테스트 시 유용하다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;MovieComponent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;영화관을 선택할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MovieComponent<span class="token punctuation">)</span>
    <span class="token comment">// When</span>
    component<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="함수형-프로그래밍" tabindex="-1"><a class="header-anchor" href="#함수형-프로그래밍" aria-hidden="true">#</a> 함수형 프로그래밍</h3><p>코드를 완전히 이해했다는 것의 조건 중 <strong>코드를 사이드 이펙트 없이 자유롭게 수정할 수 있다</strong>가 있다는 것을 위에서 설명했다. 이러한 방법은 <strong>함수형 프로그래밍 기법</strong>을 사용하면 대부분 해결 가능하다는 것을 알았다.</p><p>프로젝트를 운영하면서 기능이 추가되면 코드가 복잡해지지 않게 해야 한다. <strong>복잡성</strong>을 다스리는 비결은 코드베이스의 크기가 커질수록 복잡성이 증가하지 않도록 붙잡아 두는 것이다. 바로 여기서 <strong>함수형 프로그래밍</strong>이 요긴하게 쓰인다.</p><h4 id="함수형-프로그래밍이란" tabindex="-1"><a class="header-anchor" href="#함수형-프로그래밍이란" aria-hidden="true">#</a> 함수형 프로그래밍이란?</h4><p>함수형 프로그래밍은 추상화 단위를 함수로 한다. 함수들을 조립해서 고수준의 동작을 구현한다. 자료구조를 새로 만들어 어떤 요건을 충족시키는 게 아니라, <strong>배열/객체/문자열 등의 흔한 자료구조</strong>를 이용해 문제를 해결한다.</p><p>함수형 프로그래밍에서 함수는 <strong>수학적 함수</strong>를 의미한다. 수학적 함수는 입력과 출력이 모두 존재해야하고, 입력에 따른 출력은 항상 동일하게 대응되어야 한다.</p><p>함수형 프로그래밍에서는 관찰할 수 있는 <strong>상태 변화</strong>를 최소화하려고 애쓴다. 따라서 함수형 원칙을 고수하는 시스템에 새로운 기능을 추가할 때는 새로운 함수가 지역화되고 비파괴적인 데이터 전이 과정에서 어떻게 동작할 것인지를 파악하는 것이 핵심이다.</p><p>실용적인 함수형 프로그래밍은 어떤 시스템에서 상태 변화를 완전히 제거하는 것이 아니라 변이가 발생하는 지역을 가능한 최소화하는 것을 목표로 한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b <span class="token comment">// 수학적 함수 O</span>
<span class="token keyword">const</span> <span class="token function-variable function">rand</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 수학적 함수 X</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="수학적함수를-좀더-알아봅시다" tabindex="-1"><a class="header-anchor" href="#수학적함수를-좀더-알아봅시다" aria-hidden="true">#</a> 수학적함수를 좀더 알아봅시다.</h4><p>함수형 프로그래밍에서 다루는 수학적함수를 <strong>순수함수</strong>라고 부른다. 순수함수는 동일한 인자에 상응하는 <strong>동일한 리턴값</strong>을 가지는 함수이다. 그러므로, 평가시점이 변경이 되더라도 동일한 결과를 리턴하기 때문에 다루기 쉬운함수가 된다. 순수함수는 객체의 변경이 필요할 경우 새로운 객체를 생성하여 리턴한다.</p><p>외부변수를 사용하거나 외부변수를 변경하면 순수함수가 아니다. 비순수함수는 평가시점에 따라 다른 결과값을 가지기 때문에 평가시점을 미세하게 다뤄야 한다.</p><h5 id="순수함수" tabindex="-1"><a class="header-anchor" href="#순수함수" aria-hidden="true">#</a> 순수함수</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">add1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">val</span> <span class="token operator">:</span> obj<span class="token punctuation">.</span>val <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="비순수함수" tabindex="-1"><a class="header-anchor" href="#비순수함수" aria-hidden="true">#</a> 비순수함수</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">add3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  c <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">add4</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>val <span class="token operator">+=</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="모든-것을-함수로-생각한다" tabindex="-1"><a class="header-anchor" href="#모든-것을-함수로-생각한다" aria-hidden="true">#</a> 모든 것을 함수로 생각한다.</h4><p><strong>함수형 프로그래밍</strong>은 애플리케이션, 함수의 구성요소, 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다. 함수형 사고방식은 문제의 해결 방법을 동사(함수)들로 구성(조합)하는 것.</p><h5 id="함수를-가장-우선순위에-놓는-것" tabindex="-1"><a class="header-anchor" href="#함수를-가장-우선순위에-놓는-것" aria-hidden="true">#</a> 함수를 가장 우선순위에 놓는 것</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">moveLeft</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">moveRight</span><span class="token punctuation">(</span>duck<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">moveRight</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="데이터-객체-를-우선순위에-놓는-것" tabindex="-1"><a class="header-anchor" href="#데이터-객체-를-우선순위에-놓는-것" aria-hidden="true">#</a> 데이터(객체)를 우선순위에 놓는 것</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>duck<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
duck<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="응용형-함수를-통해-다형성-만들기" tabindex="-1"><a class="header-anchor" href="#응용형-함수를-통해-다형성-만들기" aria-hidden="true">#</a> 응용형 함수를 통해 다형성 만들기</h4><p>응용형 함수는 인자로 받은 함수가 알고 있는 인자를 해당 함수에게 평가받아 로직을 완성해나가는 것을 말한다. map, filter 와 같은 함수가 응용형 함수라고 한다. 어떠한 데이터 형태인지 관심이 분리가 되고 다형성을 사용할 수 있기 때문에 재사용성이 높아진다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">iterable<span class="token punctuation">,</span> predicate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">iterable<span class="token punctuation">,</span> mapper</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;2&#39;, &#39;3&#39;]</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="값-대신-함수를-사용하라" tabindex="-1"><a class="header-anchor" href="#값-대신-함수를-사용하라" aria-hidden="true">#</a> 값 대신 함수를 사용하라</h4><p>우선 가장 간단한 함수인 repeat부터 살펴보자. repeat는 횟수와 값을 받아서 중복된 값을 횟수만큼 갖는 배열을 만드는 함수이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">repeat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">times<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>독립적으로 동작하는 repeat를 구현하는 것도 괜찮지만 <code>반복성</code>이라는 일반성을 가지도록 repeat를 구현할 수 있다면 더 좋을 것이다. 즉, 어떤 숫자만큼 값을 반복하는 것도 괜찮지만 어떤 동작을 특정 횟수만큼 반복한다면 더 좋다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">repeatedly</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">times<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">,</span> fun<span class="token punctuation">)</span>

<span class="token function">repeatedly</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>repeatedly 함수는 함수형 스타일로 생각하면 어떤 효과를 거둘 수 있는지 잘 보여 준다. 값 대신 함수를 사용함으로써 <code>반복성</code>이라는 새로운 가능성이 열렸다.</p><h4 id="명령형과-함수형-비교하기" tabindex="-1"><a class="header-anchor" href="#명령형과-함수형-비교하기" aria-hidden="true">#</a> 명령형과 함수형 비교하기</h4><p><strong>명령형 프로그램</strong>은 작업 수행에 필요한 전 단계를 노출하여 흐름이나 경로를 아주 자세히 서술한다. 보통 작업을 수행하는 단계는 루프와 분기문, 구문마다 값이 바뀌는 변수들로 빼곡히 들어찬다.</p><p>반면, 선언적 프로그래밍, 특히 함수형 프로그래밍은 독립적인 블랙박스 연산들이 단순하게, 즉 최소한의 제어 구조를 통해 연결되어 추상화 수준이 높다. 실제로 함수형 프로그램은 데이터와 제어 흐름 자체를 고수준 컴포넌트 사이의 단순한 연결로 취급한다.</p><p><strong>1. 30세 이상인 users를 거른다.</strong></p><h5 id="명령형" tabindex="-1"><a class="header-anchor" href="#명령형" aria-hidden="true">#</a> 명령형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> temp_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp_users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="함수형" tabindex="-1"><a class="header-anchor" href="#함수형" aria-hidden="true">#</a> 함수형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> over_30 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 30세 이상인 users의 names를 수집한다.</strong></p><h5 id="명령형-1" tabindex="-1"><a class="header-anchor" href="#명령형-1" aria-hidden="true">#</a> 명령형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp_users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp_users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="함수형-1" tabindex="-1"><a class="header-anchor" href="#함수형-1" aria-hidden="true">#</a> 함수형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> over_30<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 30세 미만인 users를 거른다.</strong></p><h5 id="명령형-2" tabindex="-1"><a class="header-anchor" href="#명령형-2" aria-hidden="true">#</a> 명령형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> temp_users2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp_users2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="함수형-2" tabindex="-1"><a class="header-anchor" href="#함수형-2" aria-hidden="true">#</a> 함수형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> under_30 <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4. 30세 미만인 users의 ages를 수집한다.</strong></p><h5 id="명령형-3" tabindex="-1"><a class="header-anchor" href="#명령형-3" aria-hidden="true">#</a> 명령형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp_users2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp_users2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="함수형-3" tabindex="-1"><a class="header-anchor" href="#함수형-3" aria-hidden="true">#</a> 함수형</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ages <span class="token operator">=</span> under_30<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="추상화-도구-클로저" tabindex="-1"><a class="header-anchor" href="#추상화-도구-클로저" aria-hidden="true">#</a> 추상화 도구 클로저</h4><blockquote><p><strong>바인딩</strong>은 자바스크립트의 이름에 값을 할당하는 행위를 가르킨다. 변수 할당, 함수 인자 사용, this 전달, 프로퍼티 할당 등의 과정에 해당한다.</p></blockquote><p><strong>클로저</strong>는 나중에 사용할 목적으로 정의된 스코프에 포함된 외부 바인딩을 캡쳐하는 함수다. 클로저는 비공개 접근을 제공할 뿐만 아니라 추상화 기법도 제공한다. 예를 들어 클로저를 이용해서 생성 시에 캡쳐되는 어떤 <strong>설정</strong>에 따라 다른 함수를 만들 수 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">plucker</span> <span class="token operator">=</span> <span class="token parameter">field</span> <span class="token operator">=&gt;</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> best <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;인피니티워&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;Peter&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;스파이더맨&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;아이언맨&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;토르&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> extractTitle <span class="token operator">=</span> <span class="token function">plucker</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> extractThird <span class="token operator">=</span> <span class="token function">plucker</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token function">extractTitle</span><span class="token punctuation">(</span>best<span class="token punctuation">)</span> <span class="token comment">// &#39;인피니티워&#39;</span>
<span class="token function">extractThird</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token comment">// {title: &#39;토르&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="커링" tabindex="-1"><a class="header-anchor" href="#커링" aria-hidden="true">#</a> 커링</h4><p>다인자 함수의 각각의 논리적 인자에 대응하는 새로운 함수를 반환하는 함수를 <strong>커리함수</strong>라고 한다. <code>f : (X ⋅ Y) → Z</code> 함수가 주어질 때 커링은 새로운 함수 <code>h : X → (Y → Z)</code>를 만든다. h는 X의 원소를 받아 Y가 Z에 매핑하는 함수를 반환한다. <code>h(x)(y) = f(x, y)</code> 이와 같이 정의되며 <code>curry(f) = h</code> 이렇게도 사용된다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token parameter">b</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b

<span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="부분-적용" tabindex="-1"><a class="header-anchor" href="#부분-적용" aria-hidden="true">#</a> 부분 적용</h4><p><strong>부분적용</strong>은 부분적으로 실행을 마친 다음에 나머지 인자와 함께 즉시 실행한 상태가 되는 함수다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">partial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>arg1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg1<span class="token punctuation">,</span> <span class="token operator">...</span>arg2<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
<span class="token keyword">const</span> add10 <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="함수조립으로-데이터-절반-날리기" tabindex="-1"><a class="header-anchor" href="#함수조립으로-데이터-절반-날리기" aria-hidden="true">#</a> 함수조립으로 데이터 절반 날리기</h4><p>레고 블록으로 다양한 물건을 만들듯이 여러 함수를 연결해서 더 풍부한 기능의 함수를 <strong>조립</strong>하는 방법을 설명한다.</p><p>먼저 라이브러리를 사용하지 않기 때문에 보편적으로 사용하는 <code>filter</code>, <code>map</code>, <code>pipe</code>를 정의한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">pred</span> <span class="token operator">=&gt;</span> <span class="token parameter">iter</span> <span class="token operator">=&gt;</span> iter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token parameter">mapper</span> <span class="token operator">=&gt;</span> <span class="token parameter">iter</span> <span class="token operator">=&gt;</span> iter<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 <strong>두번째에 정의된 아이템 삭제</strong>, <strong>이름 추출</strong>를 정의한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">removeInEarth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token keyword">const</span> <span class="token function-variable function">extractName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 정의한 함수들을 조립해서 <strong>핑거스냅</strong>을 정의한다. 핑거스냅은 데이터를 삭제 후에 이름을 추출한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fingerSnap <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>removeInEarth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map</span><span class="token punctuation">(</span>extractName<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>이제 함수 정의와 조립을 했으니 핑거스냅을 튕겨보자. 결과적으로 지구에 남은 사람은 3명만 남을 것을 확인할 수 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> avengers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;아이언맨&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;스파이더맨&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;캡틴 아메리카&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;버키 반스&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;로켓&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;그루트&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token function">fingerSnap</span><span class="token punctuation">(</span>avengers<span class="token punctuation">)</span> <span class="token comment">// [&#39;아이언맨&#39;, &#39;캡틴 아메리카&#39;, &#39;로켓&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="끝" tabindex="-1"><a class="header-anchor" href="#끝" aria-hidden="true">#</a> 끝</h2><h3 id="참고-서적" tabindex="-1"><a class="header-anchor" href="#참고-서적" aria-hidden="true">#</a> 참고 서적</h3>`,233),r={href:"https://search.daum.net/search?w=bookpage&bookId=1103346&tab=introduction&DA=LB2&q=%EC%9D%BD%EA%B8%B0%20%EC%A2%8B%EC%9D%80%20%EC%BD%94%EB%93%9C%EA%B0%80%20%EC%A2%8B%EC%9D%80%20%EC%BD%94%EB%93%9C%EB%8B%A4",target:"_blank",rel:"noopener noreferrer"},k={href:"https://search.daum.net/search?w=bookpage&bookId=1498033&tab=introduction&DA=LB2&q=%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C",target:"_blank",rel:"noopener noreferrer"},d={href:"https://search.daum.net/search?w=bookpage&bookId=915008&tab=introduction&DA=LB2&q=%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98%20%EC%A0%95%EC%84%9D",target:"_blank",rel:"noopener noreferrer"},v={href:"https://search.daum.net/search?w=bookpage&bookId=1607655&tab=introduction&DA=LB2&q=%ED%95%A8%EC%88%98%ED%98%95%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D",target:"_blank",rel:"noopener noreferrer"},m={href:"https://search.daum.net/search?w=bookpage&bookId=945124&tab=introduction&DA=LB2&q=%ED%95%A8%EC%88%98%ED%98%95%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("읽기 좋은 코드가 좋은 코드다 - 더스틴 보즈웰, 트레버 파우커"),t(s)])]),n("li",null,[n("a",k,[a("실용주의 소프트웨어 개발 - 오병곤"),t(s)])]),n("li",null,[n("a",d,[a("프로그래밍의 정석 - 우에다 이사오"),t(s)])]),n("li",null,[n("a",v,[a("함수형 자바스크립트 - 루이스 아텐시오"),t(s)])]),n("li",null,[n("a",m,[a("함수형 자바스크립트 - 마이클 포거스"),t(s)])])])])}const w=p(i,[["render",b],["__file","easy-code.html.vue"]]);export{w as default};
