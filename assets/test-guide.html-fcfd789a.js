import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-421b36b8.js";const t={},e=p(`<h1 id="테스트가-필요한-부분과-명세-기반-테스트-방법" tabindex="-1"><a class="header-anchor" href="#테스트가-필요한-부분과-명세-기반-테스트-방법" aria-hidden="true">#</a> 테스트가 필요한 부분과 명세 기반 테스트 방법</h1><p>우선 테스트가 필요한 이유는 결함이 해결되지 않은 상태에서 서비스가 Production 단계로 배포된다면 장애가 발생하여 사용자들이 손실을 입고 나아가 회사 전체 비즈니스에 영향을 줄 수 있기 때문이다.</p><h2 id="테스트가-필요한-부분" tabindex="-1"><a class="header-anchor" href="#테스트가-필요한-부분" aria-hidden="true">#</a> 테스트가 필요한 부분</h2><p>테스트의 경제성을 설명하는 격언 중 &quot;테스트를 적게 하는 것은 죄지만 그렇다고 무조건 테스트를 많이 하는 것이 반드시 미덕은 아니다&quot;라는 말이 있다. 테스트를 수행할 자원은 유한하므로 완벽한 테스트는 현실적으로 불가능하다. 그렇다면 위험이 높은 기능 및 비기능 요구사항을 집중적으로 테스트해야 한다.</p><h3 id="테스트-케이스에-작성해야-하는-것" tabindex="-1"><a class="header-anchor" href="#테스트-케이스에-작성해야-하는-것" aria-hidden="true">#</a> 테스트 케이스에 작성해야 하는 것</h3><ul><li>가장 중요한 것</li><li>실패 가능성이 있는 것</li><li>위험 요소가 있는 것</li><li>결함 발생 시 파급효과가 심각하고 이로 인한 막대한 손실이 발생하는 기능</li></ul><h3 id="위험-요소" tabindex="-1"><a class="header-anchor" href="#위험-요소" aria-hidden="true">#</a> 위험 요소</h3><ul><li>장애 발생 가능성 <ul><li>소스코드의 복잡도</li><li>구현 난이도</li><li>구현 크기(Line of Code)</li><li>개발자 등급</li></ul></li><li>장애 발생 시 비즈니스 영향도 <ul><li>기능 요구사항을 구현한 후 장애가 발생했을 때, 비즈니스적으로 미치는 정도</li></ul></li></ul><h3 id="명세-기반-테스트-방법" tabindex="-1"><a class="header-anchor" href="#명세-기반-테스트-방법" aria-hidden="true">#</a> 명세 기반 테스트 방법</h3><p>명세 기반 테스트는 요구사항 정의 문서, 설계서 등 명세를 바탕으로 테스트 케이스를 도출, 실행하여 중대한 결함을 없음을 보장하는 기법이다.</p><h4 id="명세-기반-테스트-기법-종류" tabindex="-1"><a class="header-anchor" href="#명세-기반-테스트-기법-종류" aria-hidden="true">#</a> 명세 기반 테스트 기법 종류</h4><p><strong>동등분할</strong></p><ul><li>테스트 대상 데이터의 구간을 일정 간격으로 분할하여 케이스를 구성한다.</li><li>보통 데이터의 구간에 중간값을 대푯값으로 사용한다.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToGrade</span> <span class="token operator">=</span> <span class="token parameter">score</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;B&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;C&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;D&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;E&#39;</span>
    <span class="token keyword">default</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToGrade&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">90</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;B 학점&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">70</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>경곗값 분석</strong></p><ul><li>분기 또는 반복 구문의 경곗값을 기준으로 케이스를 구성한다.(min, min+, normal, max-, max)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToGrade</span> <span class="token operator">=</span> <span class="token parameter">score</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">60</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;B&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;C&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;D&#39;</span>
    <span class="token keyword">case</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;E&#39;</span>
    <span class="token keyword">default</span> <span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToGrade&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - min&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">81</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - min+&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">82</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - normal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">90</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - max-&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">99</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;A 학점 - max&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> grade <span class="token operator">=</span> <span class="token function">convertToGrade</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>결정 테이블</strong></p><ul><li>조건(입력 값)과 행위(결괏값)를 테이블로 구성하여 케이스 및 절차를 구성한다.</li><li>프로세스 수행 중 요구되는 결정 또는 조건과 프로세스와 관련된 모든 동작을 기술한다.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">INVALID_EMAIL</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">INVALID_PASSWORD</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">LOGIN</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">EMAIL</span> <span class="token operator">=</span> <span class="token string">&#39;EMAIL&#39;</span>
  <span class="token keyword">const</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&#39;PASSWORD&#39;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일/비밀번호 유효하지 않을 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_EMAIL</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일 유효하고, 비밀번호 유효하지 않을 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token constant">EMAIL</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_PASSWORD</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일 유효하지 않고, 비밀번호 유효할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token constant">PASSWORD</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">INVALID_EMAIL</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;이메일/비밀번호 유효할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token constant">EMAIL</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token constant">PASSWORD</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token constant">LOGIN</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>조합</strong></p><ul><li>테스트하는 데 필요한 값이 다른 파라미터의 값과 최소한 한 번씩은 조합을 하여 케이스를 구성한다.</li><li>대부분의 결함이 두 개 요소의 상호작용에 기인한다는 것에 착안하여, 두 개 요소의 모든 조합을 다룬다.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertToTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token literal-property property">repeat</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">base</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">eq</span><span class="token operator">:</span> boolean<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">repeat</span><span class="token operator">:</span> repeat <span class="token operator">?</span> <span class="token string">&#39;전체반복&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> base <span class="token operator">?</span> <span class="token string">&#39;설정&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;해제&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">eq</span><span class="token operator">:</span> eq <span class="token operator">?</span> <span class="token string">&#39;설정&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;해제&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;convertToTitle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 전체반복, base: 설정, EQ: 설정&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;전체반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 전체반복, base: 해제, EQ: 해제&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;전체반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 한곡반복, base: 설정, EQ: 해제&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;repeat: 한곡반복, base: 해제, EQ: 설정&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> eq <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// When</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> base<span class="token punctuation">,</span> eq<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>repeat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;한곡반복&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;해제&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>eq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;설정&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>상태전이</strong></p><ul><li>시스템의 각 상태를 중심으로 케이스를 도출하고 전이 상태를 절차로 구성한다.</li><li>객체의 상태를 구분하고 이벤트에 의해 어느 한 상태에서 다른 상태로 전이되는 경우의 수를 테스트 케이스로 구성</li><li>상태 머신을 사용하는 UI 컴포넌트 테스트 시 유용</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;MovieComponent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;영화관을 선택할 때&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MovieComponent<span class="token punctuation">)</span>
    <span class="token comment">// When</span>
    component<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// Then</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","test-guide.html.vue"]]);export{k as default};
