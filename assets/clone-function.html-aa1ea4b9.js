import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as s,b as n,d as l,e as a}from"./app-296313bb.js";const i={},r=a('<h1 id="clone-functions-depending-on-the-case" tabindex="-1"><a class="header-anchor" href="#clone-functions-depending-on-the-case" aria-hidden="true">#</a> Clone functions depending on the case</h1><blockquote><p>This post was organized on December 2, 2019.</p></blockquote><h3 id="purpose-of-the-article" tabindex="-1"><a class="header-anchor" href="#purpose-of-the-article" aria-hidden="true">#</a> Purpose of the article</h3><p>I often create and use a function that clones the state while handling immutability. There are various methods, and this is an article that summarizes what functions exist depending on the case.</p><h3 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h3><ul><li>JSON cloning</li><li>Array-Object cloning</li><li>Collection cloning</li></ul><h3 id="json-cloning" tabindex="-1"><a class="header-anchor" href="#json-cloning" aria-hidden="true">#</a> JSON cloning</h3>',7),u={href:"https://www.json.org/json-en.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">json</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="array-object-cloning" tabindex="-1"><a class="header-anchor" href="#array-object-cloning" aria-hidden="true">#</a> Array-Object cloning</h3><p>This is a function that is used to clone Arrays and Objects. Built-in objects such as <code>Set</code>, <code>Map</code> provided by ES6+ are not cloned.</p><p>Primitive types are returned immediately, and Arrays and Objects are cloned and returned. When there are more than 1000 items, the performance is better than <strong>JSON cloning</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">objOrArr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> objOrArr
    <span class="token keyword">case</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> objOrArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>objOrArr<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPrimitive</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token operator">:</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">cloneObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cloned <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloned<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloned
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collection-cloning" tabindex="-1"><a class="header-anchor" href="#collection-cloning" aria-hidden="true">#</a> Collection cloning</h3><p>This is a function that is used to clone Collection objects, including Map and Set, in ES6+. This is a function that adds the responsibility of handling Map and Set from <strong>Array-Object cloning</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> value
    <span class="token keyword">case</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">isMap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">isSet</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPrimitive</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token operator">:</span>
    <span class="token keyword">case</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">isMap</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span>
<span class="token keyword">const</span> <span class="token function-variable function">isSet</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Set</span>

<span class="token keyword">const</span> <span class="token function-variable function">cloneObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cloned <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloned<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloned
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h3>`,11);function d(v,b){const e=o("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("This is a function that is used when using the type supported by "),s("a",u,[n("JSON"),l(e)]),n(". It changes to a string and then parses it back to JSON.")]),k])}const f=t(i,[["render",d],["__file","clone-function.html.vue"]]);export{f as default};
