import{_ as e,c as o,o as a,a3 as t}from"./chunks/framework.9Buaa5aL.js";const S=JSON.parse('{"title":"인터페이스 분리 원칙","description":"","frontmatter":{"title":"인터페이스 분리 원칙"},"headers":[],"relativePath":"fe-dev/good-code/solid-isp.md","filePath":"fe-dev/good-code/solid-isp.md"}'),i={name:"fe-dev/good-code/solid-isp.md"},r=t('<h1 id="solid-원칙-시리즈-인터페이스-분리-원칙" tabindex="-1">SOLID 원칙 시리즈 - 인터페이스 분리 원칙 <a class="header-anchor" href="#solid-원칙-시리즈-인터페이스-분리-원칙" aria-label="Permalink to &quot;SOLID 원칙 시리즈 - 인터페이스 분리 원칙&quot;">​</a></h1><h2 id="isp-인터페이스-분리-원칙-interface-segregation-principle" tabindex="-1">ISP: 인터페이스 분리 원칙 (Interface Segregation Principle) <a class="header-anchor" href="#isp-인터페이스-분리-원칙-interface-segregation-principle" aria-label="Permalink to &quot;ISP: 인터페이스 분리 원칙 (Interface Segregation Principle)&quot;">​</a></h2><p>Ops 클래스 그리고 op1, op2, op3 오퍼레이션이 있고 사용자 클래스인 User1, User2, User3가 있다고 가정하겠다.</p><p>User1은 op1만 사용하고, User2은 op2만 사용하고, User3은 op3만 사용한다. Ops의 오퍼레이션이 하나라도 수정되면 사용자 클래스는 모두 수정되어야 한다. 각 사용자 클래스는 사용하지 않는 오퍼레이션에 의존하고 있다.</p><p>오퍼레이션의 의존성을 분리하기 위해서는 op1, op2, op3의 인터페이스를 분리하여 해결할 수 있다.</p><p>ISP를 아키텍처가 아니라. 언어와 관련된 문제라고 결론 내일 여지가 있다. 정적 타입언어는 사용자가 타입선언문을 사용하도록 강제한다. 선언문으로 인해 소스 코드 의존성이 발생하고, 이로 인해 재컴파일 또는 재배포가 강제되는 상황이 무조건 초래된다.</p><p>하지만 동적 타입 언어에서는 이러한 선언문이 존재하지 않는다. 따라서 소스 코드 의존성이 아예 없으며, 결국 재컴파일과 재배포가 필요없다.</p><p>한걸음 물러서서 ISP를 사용하는 근본적인 동기를 살펴보면, 잠재되어 있는 더 깊은 우려사항을 볼 수 있다. 일반적으로 필요 이상으로 많은 걸 포함하는 모듈에 의존하는 것은 해로운 일이다. 소스코드의 의존성의 경우 이는 분명한 사실인데, 불필요한 재컴파일과 재배포를 강제하기 때문이다.</p>',8),s=[r];function p(n,c,d,l,_,f){return a(),o("div",null,s)}const g=e(i,[["render",p]]);export{S as __pageData,g as default};
