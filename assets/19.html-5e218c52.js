import{_ as n,o as a,c as s,e as p}from"./app-745ed8fe.js";const e={},t=p(`<h1 id="도서-리뷰-시리즈-함수형-자바스크립트-루이스-아텐시오" tabindex="-1"><a class="header-anchor" href="#도서-리뷰-시리즈-함수형-자바스크립트-루이스-아텐시오" aria-hidden="true">#</a> 도서 리뷰 시리즈 - 함수형 자바스크립트 | 루이스 아텐시오</h1><h2 id="출처" tabindex="-1"><a class="header-anchor" href="#출처" aria-hidden="true">#</a> 출처</h2><p>『함수형 자바스크립트』 | 루이스 아텐시오 저/이일웅 역 | 한빛미디어 | 2018년 02월 01일</p><h2 id="한-줄-리뷰" tabindex="-1"><a class="header-anchor" href="#한-줄-리뷰" aria-hidden="true">#</a> 한 줄 리뷰</h2><p>함수형 자바스크립트를 처음 시작하는 개발자에게 추천합니다.</p><h2 id="요약" tabindex="-1"><a class="header-anchor" href="#요약" aria-hidden="true">#</a> 요약</h2><h4 id="서론" tabindex="-1"><a class="header-anchor" href="#서론" aria-hidden="true">#</a> 서론</h4><p>코드가 복잡해지지 않게 하려면 어떻게 해야 할까요? 복잡성을 다스리는 비결은, 코드베이스의 크기가 커질수록 복잡성이 증가하지 않도록 붙잡아 두는 것입니다. 바로 여기서 <code>함수형 프로그래밍</code>이 요긴하게 쓰이지요.</p><h3 id="자료구조는-적게-일은-더-많이" tabindex="-1"><a class="header-anchor" href="#자료구조는-적게-일은-더-많이" aria-hidden="true">#</a> 자료구조는 적게, 일은 더 많이</h3><h4 id="어플리케이션의-제어-흐름" tabindex="-1"><a class="header-anchor" href="#어플리케이션의-제어-흐름" aria-hidden="true">#</a> 어플리케이션의 제어 흐름</h4><p>프로그램이 정답에 이르기까지 거치는 경로를 <code>제어흐름</code>이라고 합니다.</p><p><code>명령형 프로그램</code>은 작업 수행에 필요한 전 단계를 노출하여 흐름이나 경로를 아주 자세히 서술합니다. 보통 작업을 수행하는 단계는 루프와 분기문, 구문마다 값이 바뀌는 변수들로 빼곡히 들어찬다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> loop <span class="token operator">=</span> <span class="token function">optC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> condition <span class="token operator">=</span> <span class="token function">optA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">optB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">optB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  loop <span class="token operator">=</span> <span class="token function">optC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">optD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>반면, 선언적 프로그래밍, 특히 함수형 프로그래밍은 독립적인 블랙박스 연산들이 단순하게, 즉 최소한의 제어 구조를 통해 연결되어 추상화 수준이 높습니다. 실제로 함수형 프로그램은 <code>데이터</code>와 <code>제어 흐름</code> 자체를 고수준 컴포넌트 사이의 단순한 연결로 취급합니다.</p><p>덕분에 다음과 같이 코드가 짧아집니다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">optA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="메서드-체이닝" tabindex="-1"><a class="header-anchor" href="#메서드-체이닝" aria-hidden="true">#</a> 메서드 체이닝</h4><p><code>메서드 체이닝</code>은 여러 메서드를 단일 구문으로 호출하는 <code>OOP 패턴</code>입니다. 메서드가 모두 동일한 객체에 속해 있으며 <code>메서드 흘리기</code>라고도 합니다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// OOP</span>
<span class="token string">&#39;Functional Programming&#39;</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; is fun&#39;</span>

<span class="token comment">// FP</span>
<span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">&#39;Functional Programming&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39; is fun&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 함수 코드를 안쪽에서 바깥쪽으로 작성하면 메서드 체이닝 방식만큼 매끄럽지 못합니다. 로직을 파악하려면 가장 안쪽에 감싼 함수부터 한 꺼풀씩 벗겨내야 하고 가독성도 현저히 떨어지지요.</p><h4 id="함수-체이닝" tabindex="-1"><a class="header-anchor" href="#함수-체이닝" aria-hidden="true">#</a> 함수 체이닝</h4><p><code>객체지향 프로그램</code>은 주로 상속을 통해 코드를 재사용합니다. <code>순수 객체지향 언어</code>에서, 특히 언어 자체의 <code>자료구조</code>를 구현한 코드를 보면 이런 패턴이 자주 눈에 띕니다. 가령 자바에는 List 인터페이스를 용도에 맞게 달리 구현한 ArrayList, LinkedList, DoublyLinkedList, CopyOnWriteArrayList 등이 있습니다. 이들은 모두 한 부도에서 출발하여 나름대로 특수한 기능을 덧붙인 클래스입니다.</p><p><code>함수형 프로그래밍</code>은 접근 방법이 다릅니다. <code>자료구조</code>를 새로 만들어 어떤 요건을 충족시키는 게 아니라, <code>배열</code> 등의 흔한 자료구조를 이용해 다수의 굵게 나뉜 <code>고계 연산</code>을 적용합니다. 이러한 고계 연산으로 다음과 같은 일을 합니다.</p><ul><li>작업을 수행하기 위해 무슨 일을 해야 하는지 기술된 함수를 인수로 받습니다.</li><li>임시 변수의 값을 계속 바꾸면서 부수효과를 일으키는 기존 수동 루프를 대체합니다. 그 결과 관리할 코드가 줄고 에러가 날 만한 코드 역시 줄어듭니다.</li></ul><h3 id="복잡성을-줄이는-디자인-패턴" tabindex="-1"><a class="header-anchor" href="#복잡성을-줄이는-디자인-패턴" aria-hidden="true">#</a> 복잡성을 줄이는 디자인 패턴</h3><p>함수형 프로그래밍이 수치에 관한 학술적 문제만을 다루는 패러다임이라서 실세계에서 맞닥뜨리는 실패 가능성에 대해선 거의 관심이 없다고 오해하는 사람들이 있습니다. 하지만 최근 수년 동안, 외려 함수형 프로그래밍이 다른 프로그래밍보다 에러를 더 깔끔하게 잘 처리한다는 사실이 발혀졌습니다.</p><p>프로그램 실행 중 예외가 나거나 네트워크 연결이 끊기는 등 예기치 않는 사고로 인해 데이터가 null, undefined로 세팅되면 갖가지 골치 아픈 문제가 생깁니다. 그래서 언제 발생할지 모를 이슈를 대비해 null체크문을 넣는 라 코드는 어쩔 수 없이 점점 복잡해집니다.</p><p>그 결과 훨씬 더 복잡하게 꼬인 코드만 양산됩니다. 애플리케이션 덩치가 커지고 복잡도가 커질수록 확장하기도 어렵고 알 수 없는 수수께끼 코드로 가득해진다.</p><p>함수 매핑이 가능한 <strong>단순 자료형을 생성</strong>하는 <code>함수자(Functor)</code>라는 개념을 소개합니다. 다양한 방식으로 <strong>에러를 처리하는 로직</strong>이 들어 있는 <code>모나드(Monad)</code>라는 자료형에 함수자를 적용합니다.</p><p><code>모나드</code>는 함수형 프로그래밍에서 가장 난해한 개념 중 하나로, <code>범주론</code>이라는 수학 분야에서 비롯된 결과물입니다.</p><h4 id="try-catch-에러-처리" tabindex="-1"><a class="header-anchor" href="#try-catch-에러-처리" aria-hidden="true">#</a> try-catch 에러 처리</h4><p>명령형 자바스크립트 코드에서 예외를 붙잡아 던지는 방법은 단점이 많고 함수형 설계와도 잘맞지 않습니다. 예외를 던지는 함수의 특징은 다음과 같습니다.</p><ul><li>다른 함수형 장치처럼 합성이나 체이닝을 할 수 없습니다.</li><li>예외를 던지는 행위는 함수 호출에서 빠져나갈 구멍을 찾는 것이므로 단일한, 예측 가능한 값을 지향하는 <code>참조 투명성</code> 원리에 위배됩니다.</li><li>예기치 않게 스택이 풀리면 함수 호출 범위를 벗어나 전체 시스템에 영향을 미치는 부수 효과를 일으킵니다.</li></ul><h4 id="null-체크라는-고질병" tabindex="-1"><a class="header-anchor" href="#null-체크라는-고질병" aria-hidden="true">#</a> null 체크라는 고질병</h4><p>뜻밖의 함수 호출이 실패하는 것보다, 차라리 null을 돌려받으면 적어도 함수를 한군데로 흘러가게 할 수는 있습니다. 하지만 나아질 건 조금도 없습니다. 함수가 null을 반환하면 이 함수를 부른 호출자는 성가신 null 체크를 해야 하는 부담을 떠안습니다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getCountry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> school <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>school <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> addr <span class="token operator">=</span> school<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> country <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> country
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;국가 조회 중 에러 발생!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 함수는 기껏해야 객체 속성을 얻는 기능이 전부라서 더 간단히 구현해야 합니다. try-catch나 null 체크 코드로 감싸는 건 겁쟁이나 하는 짓입니다. 판박이 코드를 안 쓰고도 에러를 멋지게 처리할 방법은 없을까요?</p><h4 id="더-나은-방안-함수자" tabindex="-1"><a class="header-anchor" href="#더-나은-방안-함수자" aria-hidden="true">#</a> 더 나은 방안: 함수자</h4><p>함수형 에러 처리는 철저히 다른 방법으로 접근해 소프트웨어 시스템의 난관을 해결합니다. 기본 아이디어는 비슷합니다. 잠재적으로 위험한 코드 주위에 안전망(말하자면 컨테이너)을 설치하는 것입니다.</p><p>함수형 프로그램에서는 위함한 코드를 감싼다는 개념은 그대로 가져가되 try-catch 블록은 제거할 수 있습니다. 이것이 명령형과 가장 큰 차이점입니다. 함수형 자료형을 사용하여 불순함과의 분리를 일급 시민으로 만드는 것이지요.</p><h4 id="불안전한-값을-감쌈" tabindex="-1"><a class="header-anchor" href="#불안전한-값을-감쌈" aria-hidden="true">#</a> 불안전한 값을 감쌈</h4><p>값을 <code>컨테이너화</code>하는 행위는 <code>함수형 프로그래밍의 기본 디자인 패턴</code>입니다. 값을 안정적으로 다루고 불변성을 지키기 위해 직접 접근을 차단하는 것입니다. 이렇게 감싼 값에 접근하는 유일한 방법은 <code>연산을 컨테이너에 매핑</code>하는 것입니다.</p><p><code>Wrapper</code>라는 단순 자료형을 만들어 개념을 좀 더 구체적으로 알아봅시다. 형식은 단순하지만 그 바탕에 깔려 있는 원리는 실로 강력하고, 기초가 되는 내용이니 꼭 이해 해야 합니다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">{</span>
  <span class="token comment">// 어떤 단일 값을 저장하는 단순한 형식입니다.</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
  <span class="token comment">// map :: (A -&gt; B) -&gt; A -&gt; B</span>
  <span class="token comment">// 주어진 함수를 매핑합니다.</span>
  <span class="token function">map</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Wrapper(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// wrap :: A -&gt; Wrapper(A)</span>
<span class="token keyword">const</span> <span class="token function-variable function">wrap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>요점은 에러가 날지 모를 값을 래퍼 객체로 감싼다는 것입니다. 어떤 값이 컨테이너 속으로 들어가면 절대로 값을 직접 조회/변경할 수 없습니다.</p><p>올바른 값을 넣어 확인해봅시다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wrappedValue <span class="token operator">=</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;Get Functional&#39;</span><span class="token punctuation">)</span>
wrappedValue<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>identity<span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;Get Functional&#39;</span>
wrappedValue<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
wrappedValue<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>toUpper<span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;GET FUNCTIONAL&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 단순한 아이디어 덕분에, 컨테이너 안에 넣어 보호된 값을 얻고 싶은 코드는 무조건 Wrapper.map을 통해서만 <code>컨테이너 내부에 손을 뻗칠 수 있는</code> 구조로 만들 수 있습니다.</p><p>다음은 map을 변형한 fmap 함수입니다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fmap :: (A -&gt; B) -&gt; Wrapper[A] -&gt; Wrapper[B]</span>
<span class="token comment">// 변환된 값을 호출부에 반환하기 전에 컨테이너로 감쌉니다.</span>
<span class="token function">fmap</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fmap은 주어진 함수를 콘텍스트로 감싼 값에 적용하는 방법이 구현된 함수입니다. 먼저 컨테이너를 열고 그 안에 보관된 값에 주어진 함수를 적용한 다음, 그 결과를 동일한 형식의 새 컨테이너에 넣고 닫는 것으로 마무리하지요. 이런 함수를 <code>함수자</code>라고 합니다.</p><h4 id="함수자의-세계로" tabindex="-1"><a class="header-anchor" href="#함수자의-세계로" aria-hidden="true">#</a> 함수자의 세계로</h4><p><code>함수자</code>는 값을 래퍼 안으로 <code>승급(lifting)</code>한 다음 수정하고 다시 래퍼에 넣을 목적을 염두에 둔 함수 매핑이 가능한 <code>자료구조</code>입니다. fmap 을 일반적으로 정의하면 다음과 같습니다.</p><blockquote><p>fmap :: (A -&gt; B) -&gt; Wrapper(A) -&gt; Wrapper(B)</p></blockquote><p>fmap 함수는 함수(A -&gt; B)와 함수자(감싼 콘텍스트) Wrapper(A)를 받아 새로운 함수자 Wrapper(B)를 반환합니다.</p>`,55),c=[t];function o(i,l){return a(),s("div",null,c)}const d=n(e,[["render",o],["__file","19.html.vue"]]);export{d as default};
