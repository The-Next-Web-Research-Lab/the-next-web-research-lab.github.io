const e=JSON.parse(`{"key":"v-74bd1489","path":"/en/fe-dev/javascript/template-literals.html","title":"Enforcing the class names allowed in props","lang":"en-US","frontmatter":{"title":"Enforcing the class names allowed in props","description":"Enforcing the class names allowed in props Narrative There are times when component props receive the class name of tailwindcss. When declaring a type, it is sometimes defined simply as string, but there have been cases where defining it as string has caused an unintentional bug. For example, an icon component needs to receive w-* and h-* together, but if you define it as a string, you won't know it at compile time.","head":[["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://the-next-web-research-lab.github.io/fe-dev/javascript/template-literals.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/en/fe-dev/javascript/template-literals.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"Enforcing the class names allowed in props"}],["meta",{"property":"og:description","content":"Enforcing the class names allowed in props Narrative There are times when component props receive the class name of tailwindcss. When declaring a type, it is sometimes defined simply as string, but there have been cases where defining it as string has caused an unintentional bug. For example, an icon component needs to receive w-* and h-* together, but if you define it as a string, you won't know it at compile time."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-01-22T15:09:12.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Enforcing the class names allowed in props"}],["meta",{"property":"article:modified_time","content":"2024-01-22T15:09:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Enforcing the class names allowed in props\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2024-01-22T15:09:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Narrative","slug":"narrative","link":"#narrative","children":[]},{"level":2,"title":"Use text- instead of fill-","slug":"use-text-instead-of-fill","link":"#use-text-instead-of-fill","children":[]},{"level":2,"title":"Pair ClassName","slug":"pair-classname","link":"#pair-classname","children":[{"level":3,"title":"Type Definitions","slug":"type-definitions","link":"#type-definitions","children":[]},{"level":3,"title":"Usage Examples","slug":"usage-examples","link":"#usage-examples","children":[]}]},{"level":2,"title":"Tailwind ClassName Prefix Filter","slug":"tailwind-classname-prefix-filter","link":"#tailwind-classname-prefix-filter","children":[{"level":3,"title":"Type Definitions","slug":"type-definitions-1","link":"#type-definitions-1","children":[]},{"level":3,"title":"Usage Examples","slug":"usage-examples-1","link":"#usage-examples-1","children":[]}]}],"git":{"createdTime":1705936152000,"updatedTime":1705936152000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":1.8,"words":540},"filePathRelative":"en/fe-dev/javascript/template-literals.md","localizedDate":"January 23, 2024","excerpt":"<h1> Enforcing the class names allowed in props</h1>\\n<h2> Narrative</h2>\\n<p>There are times when component props receive the class name of tailwindcss. When declaring a type, it is sometimes defined simply as string, but there have been cases where defining it as string has caused an unintentional bug. For example, an icon component needs to receive w-* and h-* together, but if you define it as a string, you won't know it at compile time.</p>","autoDesc":true}`);export{e as data};
