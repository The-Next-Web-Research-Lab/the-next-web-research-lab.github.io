import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as s}from"./app-83a91251.js";const i={},t=s(`<h1 id="dom-event의-역사와-정의" tabindex="-1"><a class="header-anchor" href="#dom-event의-역사와-정의" aria-hidden="true">#</a> DOM Event의 역사와 정의</h1><h2 id="dom-event의-역사" tabindex="-1"><a class="header-anchor" href="#dom-event의-역사" aria-hidden="true">#</a> DOM Event의 역사</h2><ul><li>DOM Event API는 DOM Level 2에서 논리적으로 표준화하려는 시도했음</li><li>DOM Level 2의 개정 전, IE와 Netscape가 서로 정반대 <code>이벤트 흐름</code>을 채택함</li><li>IE는 이벤트 버블링, Netscape는 이벤트 캡쳐링을 지원함</li><li>현재는 두 이벤트 흐름을 모두 지원함</li></ul><h2 id="dom-event의-정의" tabindex="-1"><a class="header-anchor" href="#dom-event의-정의" aria-hidden="true">#</a> DOM Event의 정의</h2><ul><li>javascript와 HTML 간의 상호작용을 담당</li><li>옵져버 패턴으로 이벤트가 발생할 때만 리스너가 실행</li></ul><h3 id="이벤트-버블링" tabindex="-1"><a class="header-anchor" href="#이벤트-버블링" aria-hidden="true">#</a> 이벤트 버블링</h3><ul><li>이벤트 흐름상 문서 트리에서 가장 깊이 위치한 요소에서 시작해 거슬러 올라감</li><li>가장 깊이 위치한 요소에서 시작해 거슬러 흐르는 모양이 마치 거품이 올라가는 것 같아 버블링이라함</li></ul><h3 id="이벤트-캡처링" tabindex="-1"><a class="header-anchor" href="#이벤트-캡처링" aria-hidden="true">#</a> 이벤트 캡처링</h3><ul><li>최상위 노드에서 처음으로 이벤트가 발생하며 가장 명시적인 노드에서 마지막으로 발생</li><li>이벤트 캡처링은 이벤트가 의도한 요소에 도달하기 전에 잡아채려는 목적으로 디자인</li></ul><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>addEventListener(
  [이벤트 이름],
  [핸들러],
  [호출 시점 true: 캡쳐링, false: 버블링]
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onLoad</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
  onLoad <span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),l=[t];function d(c,o){return a(),e("div",null,l)}const p=n(i,[["render",d],["__file","event.html.vue"]]);export{p as default};
