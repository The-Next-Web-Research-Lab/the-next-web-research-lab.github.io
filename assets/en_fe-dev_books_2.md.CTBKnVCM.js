import{_ as e,c as i,o as t,a3 as a}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"Clean Architecture","description":"","frontmatter":{"title":"Clean Architecture"},"headers":[],"relativePath":"en/fe-dev/books/2.md","filePath":"en/fe-dev/books/2.md"}'),n={name:"en/fe-dev/books/2.md"},l=a('<h1 id="book-review-series-clean-architecture" tabindex="-1">Book Review Series - Clean Architecture <a class="header-anchor" href="#book-review-series-clean-architecture" aria-label="Permalink to &quot;Book Review Series - Clean Architecture&quot;">​</a></h1><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p>『Clean Architecture』 Robert C. Martin / Junyi Song (trans.) | Insight | August 2019</p><h2 id="one-line-review" tabindex="-1">One-line review <a class="header-anchor" href="#one-line-review" aria-label="Permalink to &quot;One-line review&quot;">​</a></h2><p>A book that becomes a mentor when you think about good design</p><h2 id="summary-of-clean-architecture" tabindex="-1">Summary of Clean Architecture <a class="header-anchor" href="#summary-of-clean-architecture" aria-label="Permalink to &quot;Summary of Clean Architecture&quot;">​</a></h2><h3 id="what-is-architecture" tabindex="-1">What is architecture? <a class="header-anchor" href="#what-is-architecture" aria-label="Permalink to &quot;What is architecture?&quot;">​</a></h3><p>Architecture and design are sometimes interpreted in this way when they are distinguished.</p><ul><li>Architecture: Used to refer to something high-level that is separated from low-level details</li><li>Design: Often means low-level structures or decisions</li></ul><p>But in reality, there is no clear boundary between them. There is only a continuity of decision-making from high-level to low-level.</p><p>Low-level details and high-level structures are all components of the overall software design.</p><p><strong>The goal of software architecture</strong> is to minimize the manpower required to create and maintain the system.</p><p><strong>The measure of design quality</strong> is good design if the cost is low and can be kept low until the end of the system&#39;s life.</p><h3 id="behavior-and-structure" tabindex="-1">Behavior and structure <a class="header-anchor" href="#behavior-and-structure" aria-label="Permalink to &quot;Behavior and structure&quot;">​</a></h3><ul><li>Behavior: Implementing functional specifications or requirements, and fixing bugs</li><li>Structure: Making it easy and simple to apply changes when you change your mind about functionality</li></ul><p>Focusing on only one of behavior and structure results in short-lived software.</p><h3 id="programming-paradigms" tabindex="-1">Programming paradigms <a class="header-anchor" href="#programming-paradigms" aria-label="Permalink to &quot;Programming paradigms&quot;">​</a></h3><p>Paradigms tell you what not to do rather than what to do.</p><ul><li>Structured programming: Imposes rules on direct transitions of control flow <ul><li>1968, Edsger W. Dijkstra</li><li>Indiscriminate goto is harmful. Replace with if/then/else, do/while/until</li></ul></li><li>Object-oriented programming: Imposes rules on indirect transitions of control flow <ul><li>1966, Ole-Johan Dahl, Kristen Nygaard. ALGOL language</li><li>They discovered that local variables declared in a function could last a long time after the function call returned by moving the function call stack frame to the heap. This function became the class constructor, the local variable became the instance variable, and the nested function became the method.</li></ul></li><li>Functional programming: Imposes rules on assignment statements <ul><li>1958, John McCarthy. LISP language</li><li>The concept that underlies the LIST language is lambda calculus.</li><li>The concept that underlies lambda calculus is immutability, which means that the value of a symbol does not change.</li><li>This means that there are no assignment statements in functional languages. (They are provided, but very tricky.)</li></ul></li></ul><h3 id="solid-principles" tabindex="-1">SOLID principles <a class="header-anchor" href="#solid-principles" aria-label="Permalink to &quot;SOLID principles&quot;">​</a></h3><p>They started collecting these principles while discussing software design principles with many people. The final version came out as a result of replacing/changing/deleting/merging the principles.</p><ul><li>SRP: Single Responsibility Principle <ul><li>The optimal structure of a software system is greatly influenced by the social structure of the organization that creates the system. Therefore, each software module must have only one reason for change.</li></ul></li><li>OCP: Open-Closed Principle <ul><li>In order to change the behavior of the system, the software system must be designed so that new code can be added instead of modifying existing code.</li></ul></li><li>LSP: Liskov Substitution Principle <ul><li>Liskov&#39;s famous principle on subtypes</li><li>In order to create a software system using interchangeable components, these components must always adhere to the contract that they must be interchangeable with each other.</li></ul></li><li>ISP: Interface Segregation Principle <ul><li>Do not depend on what you do not use.</li></ul></li><li>DIP: Dependency Inversion Principle <ul><li>Code that implements high-level policies must never depend on code that implements low-level details. Instead, the details should depend on the policy.</li></ul></li></ul><h3 id="component-cohesion-principles" tabindex="-1">Component cohesion principles <a class="header-anchor" href="#component-cohesion-principles" aria-label="Permalink to &quot;Component cohesion principles&quot;">​</a></h3><ul><li>REP: Reuse/Release Equivalence Principle <ul><li>The unit of reuse is the same as the unit of release.</li></ul></li><li>CCP: Common Closure Principle <ul><li>Group classes that change for the same reason and at the same time into the same component. Separate classes that change at different times for different reasons into different components.</li></ul></li><li>CRP: Common Reuse Principle <ul><li>Do not force component users to depend on things they do not need.</li></ul></li></ul><h3 id="component-coupling-principles" tabindex="-1">Component coupling principles <a class="header-anchor" href="#component-coupling-principles" aria-label="Permalink to &quot;Component coupling principles&quot;">​</a></h3><ul><li>ADP: Acyclic Dependencies Principle <ul><li>There should be no cycles in the component dependency graph.</li></ul></li><li>SDP: Stable Dependencies Principle <ul><li>Depend in the direction of stability.</li></ul></li><li>SAP: Stable Abstractions Principle <ul><li>Components should be abstracted to the extent that they are stable.</li></ul></li></ul>',26),o=[l];function r(s,c,h,u,d,p){return t(),i("div",null,o)}const f=e(n,[["render",r]]);export{g as __pageData,f as default};
