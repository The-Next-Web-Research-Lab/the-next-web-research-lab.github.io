import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"JavaScript - Decorators","description":"","frontmatter":{"title":"JavaScript - Decorators"},"headers":[],"relativePath":"fe-dev/javascript/decorators.md","filePath":"fe-dev/javascript/decorators.md"}'),n={name:"fe-dev/javascript/decorators.md"},t=e(`<h1 id="javascript-decorators-proposal과-실용성" tabindex="-1">JavaScript - Decorators Proposal과 실용성 <a class="header-anchor" href="#javascript-decorators-proposal과-실용성" aria-label="Permalink to &quot;JavaScript - Decorators Proposal과 실용성&quot;">​</a></h1><h2 id="decorators-proposal" tabindex="-1">Decorators Proposal <a class="header-anchor" href="#decorators-proposal" aria-label="Permalink to &quot;Decorators Proposal&quot;">​</a></h2><ul><li><a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">tc39/proposal-decorators</a>에 제안서 정의됨</li><li><a href="https://github.com/erights/Orthogonal-Classes" target="_blank" rel="noreferrer">Orthogonal Classes</a>와 <a href="https://onedrive.live.com/view.aspx?resid=A7BBCE1FC8EE16DB!442046&amp;app=PowerPoint&amp;authkey=!AEeXmhZASk50KjA" target="_blank" rel="noreferrer">Class Evaluation Order</a> 제안을 바탕으로 Decorators와 <a href="https://tc39.github.io/proposal-class-fields/" target="_blank" rel="noreferrer">Class Field</a> 및 <a href="https://github.com/tc39/proposal-private-methods" target="_blank" rel="noreferrer">Private methods</a>를 함께 작동시키는 방법에 대한 결합된 비전을 제안</li><li>Decorators는 이미 정의된 클래스, 함수, 변수의 코드를 수정하지 않고, 기능을 추가하는 것에 유용함</li><li>메모이제이션, 접근 제어, 인증, 계측, 타이밍 처리, 로깅, 속도 제한 등에 사용된다.</li></ul><h2 id="decorators-실용성" tabindex="-1">Decorators 실용성 <a class="header-anchor" href="#decorators-실용성" aria-label="Permalink to &quot;Decorators 실용성&quot;">​</a></h2><p>JavaScript에서는 Decorators를 사용할 수 없지만 <a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">TypeScript에서 Decorators</a>를 사용할 수 있다. 그래서 Node.js Framework <a href="https://docs.nestjs.com/controllers" target="_blank" rel="noreferrer">nestjs</a>와 Front-end Framework <a href="https://angular.kr/guide/what-is-angular" target="_blank" rel="noreferrer">Angular</a>에서는 공식적으로 사용 중이다.</p><h3 id="코드-사용-예시" tabindex="-1">코드 사용 예시 <a class="header-anchor" href="#코드-사용-예시" aria-label="Permalink to &quot;코드 사용 예시&quot;">​</a></h3><ul><li><code>@defineElement</code>: 커스텀 엘레멘트를 생성하는 기능</li><li><code>@bound</code>: 디바운스 처리 기능</li><li><code>@observed</code>: 필드를 감시하며 변경 시 자동으로 <code>render()</code>를 호출하는 기능</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;num-counter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @observed </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">#x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @bound</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clicked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#clicked;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  connectedCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @bound</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8),r=[t];function l(h,p,k,o,d,c){return i(),a("div",null,r)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
