const e=JSON.parse('{"key":"v-98c2598c","path":"/en/fe-dev/javascript/decorators.html","title":"JavaScript - Decorators","lang":"en-US","frontmatter":{"title":"JavaScript - Decorators","description":"JavaScript - Decorators Decorators Proposal Proposal defined in tc39/proposal-decorators Orthogonal Classesand Class Evaluation Order Based on the proposal, Decorators and Class Field and Private methods propose a combined vision of how to make them work together Decorators are useful for adding functionality without modifying the code of already defined classes, functions, and variables. It is used for memoization, access control, authentication, instrumentation, timing processing, logging, rate limiting, etc.","head":[["link",{"rel":"alternate","hreflang":"ko-kr","href":"https://the-next-web-research-lab.github.io/fe-dev/javascript/decorators.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/en/fe-dev/javascript/decorators.html"}],["meta",{"property":"og:site_name","content":"TheNextWebResearchLab"}],["meta",{"property":"og:title","content":"JavaScript - Decorators"}],["meta",{"property":"og:description","content":"JavaScript - Decorators Decorators Proposal Proposal defined in tc39/proposal-decorators Orthogonal Classesand Class Evaluation Order Based on the proposal, Decorators and Class Field and Private methods propose a combined vision of how to make them work together Decorators are useful for adding functionality without modifying the code of already defined classes, functions, and variables. It is used for memoization, access control, authentication, instrumentation, timing processing, logging, rate limiting, etc."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-01-22T15:09:12.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JavaScript - Decorators"}],["meta",{"property":"article:modified_time","content":"2024-01-22T15:09:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript - Decorators\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2024-01-22T15:09:12.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Decorators Proposal","slug":"decorators-proposal","link":"#decorators-proposal","children":[]},{"level":2,"title":"Decorators Practicality","slug":"decorators-practicality","link":"#decorators-practicality","children":[{"level":3,"title":"Code Usage Examples","slug":"code-usage-examples","link":"#code-usage-examples","children":[]}]}],"git":{"createdTime":1705936152000,"updatedTime":1705936152000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":0.62,"words":187},"filePathRelative":"en/fe-dev/javascript/decorators.md","localizedDate":"January 23, 2024","excerpt":"<h1> JavaScript - Decorators</h1>\\n<h2> Decorators Proposal</h2>\\n<ul>\\n<li>Proposal defined in <a href=\\"https://github.com/tc39/proposal-decorators\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">tc39/proposal-decorators</a></li>\\n<li><a href=\\"https://github.com/erights/Orthogonal-Classes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Orthogonal Classes</a>and <a href=\\"https://onedrive.live.com/view.aspx?resid=A7BBCE1FC8EE16DB!442046&amp;app=PowerPoint&amp;authkey=!AEeXmhZASk50KjA\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Class Evaluation Order</a> Based on the proposal, Decorators and <a href=\\"https://tc39.github.io/proposal-class-fields/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Class Field</a> and <a href=\\"https://github.com/tc39/proposal-private-methods\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Private methods</a> propose a combined vision of how to make them work together</li>\\n<li>Decorators are useful for adding functionality without modifying the code of already defined classes, functions, and variables.</li>\\n<li>It is used for memoization, access control, authentication, instrumentation, timing processing, logging, rate limiting, etc.</li>\\n</ul>","autoDesc":true}');export{e as data};
