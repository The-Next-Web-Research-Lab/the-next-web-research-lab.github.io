import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a as s,b as n,d as a,e as t}from"./app-83a91251.js";const r={},l=t(`<h1 id="typescript-union-type-definition-and-usage" tabindex="-1"><a class="header-anchor" href="#typescript-union-type-definition-and-usage" aria-hidden="true">#</a> TypeScript - Union Type Definition and Usage</h1><h2 id="what-is-union-type" tabindex="-1"><a class="header-anchor" href="#what-is-union-type" aria-hidden="true">#</a> What is Union Type?</h2><p>A Union Type is a combination of two or more types.</p><p>For example, if there are multiple data types,</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&#39;square&#39;</span>
  size<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&#39;rectangle&#39;</span>
  width<span class="token operator">:</span> <span class="token builtin">number</span>
  height<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span>
  radius<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Union Type is defined as follows:<code>|</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="type-inference-for-union-types" tabindex="-1"><a class="header-anchor" href="#type-inference-for-union-types" aria-hidden="true">#</a> Type Inference for Union Types</h3>`,8),d={href:"https://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-typing",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgMoEcCucooN4BQyyA1qACYBcyA5AM5Y4Q1HJ3ABeE1ImAtgCNoBAL4FQkWIhQAlCAjBwQAcwA2+VmRBVauBUrXNWAd2DkwACx78hUVhYjBlFsNcHCxE6PCTIAwsBQCOrIhMRaOjQIgcFGxFBw5MCYdG62ogQEYACeAA4oqBZw+cgAvGiMuMgAPshy+iohtQFB6pkIAPYgdGDIyhBgAIK4cGXIABR0RfnUhcUQAJTUStllAHyhrMAwE1PzAHQRZaXlAEQM2LinC5vExAD098iAN6OADHWAOIN18oqNEIA-Nf4YupABrjyEAIKuAHQ7AD7LgAelwA+nawHk9ADUDgEqxwAaq4AXLuQgAGFwCh48hAAujgBv2wAANchADg9gF2BwA6q4ATpv2iOQuDAmCgIDY0wg+3YXGQACpOQdeRAANysMRI5BUwCt7aIgA",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">getArea</span> <span class="token operator">=</span> <span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If you use the properties of Rectangle</span>
    <span class="token comment">// and Circle here, a type error occurs.</span>
    <span class="token keyword">return</span> shape<span class="token punctuation">.</span>size <span class="token operator">*</span> shape<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// The rest is ommited</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function h(m,v){const e=i("ExternalLinkIcon");return o(),c("div",null,[l,s("p",null,[n("In TypeScript, the "),s("a",d,[n("Type Inference"),a(e)]),n(" to deduce each type. When checking TypeScript, use the "),s("a",u,[n("TypeScript Playground"),a(e)]),n(" You can check it out online.")]),k])}const y=p(r,[["render",h],["__file","union-type.html.vue"]]);export{y as default};
