const n=JSON.parse(`{"key":"v-075aed0b","path":"/fe-dev/paradigm/produce-oop.html","title":"immer 구현해보기 - OOP 버전","lang":"ko-KR","frontmatter":{"title":"immer 구현해보기 - OOP 버전","description":"immer 구현해보기 - OOP 버전 2019년 12월 1일에 작성한 포스트입니다. immer 구현해보기에서 작성된 코드를 OOP 버전으로 리팩토링한 코드이다. const isArray = value =&gt; Array.isArray(value) const assign = (...obj) =&gt; Object.assign(...obj) const canProduce = value =&gt; { return value === undefined || value === null ? false : isArray(value) || typeof value === 'object' } const shallowCopy = obj =&gt; { return !canProduce(obj) ? obj : isArray(obj) ? obj.concat() : assign({}, obj) } class LinkedList { constructor(base, parent, propName) { this.base = base this.parent = parent this.propName = propName this.copy = null } toBase() { return this.copy || this.base } changeLinkedList (propName, value) { const nextValue = {[propName]: value} this.copy ? assign(this.copy, nextValue) : assign(this, { copy: assign(shallowCopy(this.base), nextValue) }) if (this.parent) { this.parent.changeLinkedList(this.propName, this.copy) } } static create(base, parent = null, propName = null) { return new LinkedList(base, parent, propName) } } class LinkedListProxy { constructor(base, parentState, propName) { const {proxy, revoke} = this.createProxy(base) this.proxy = proxy this.revokeFn = revoke this.state = LinkedList.create(base, parentState, propName) this.children = [] } createProxy(base) { return Proxy.revocable(base, { get: (...args) =&gt; this.getter(...args), set: (...args) =&gt; this.setter(...args) }) } getter(target, propName) { const value = this.toBase()[propName] return canProduce(value) ? this.createChildProxy(value, propName) : value } createChildProxy(value, propName) { const child = LinkedListProxy.create(value, this.state, propName) this.children.push(child) return child.proxy } setter(target, propName, value) { this.state.changeLinkedList(propName, value) } revoke() { this.revokeFn() this.children.forEach(child =&gt; child.revoke()) } toBase() { return this.state.toBase() } toProxy() { return this.proxy } static create(base, parentState, propName) { return new LinkedListProxy(base, parentState, propName) } } const produceBase = (base, fn) =&gt; { const linkedListProxy = LinkedListProxy.create(base) fn(linkedListProxy.toProxy()) linkedListProxy.revoke() return linkedListProxy.toBase() } const produce = (fn) =&gt; (base) =&gt; { return canProduce(base) ? produceBase(base, fn) : base }","head":[["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/paradigm/produce-oop.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"immer 구현해보기 - OOP 버전"}],["meta",{"property":"og:description","content":"immer 구현해보기 - OOP 버전 2019년 12월 1일에 작성한 포스트입니다. immer 구현해보기에서 작성된 코드를 OOP 버전으로 리팩토링한 코드이다. const isArray = value =&gt; Array.isArray(value) const assign = (...obj) =&gt; Object.assign(...obj) const canProduce = value =&gt; { return value === undefined || value === null ? false : isArray(value) || typeof value === 'object' } const shallowCopy = obj =&gt; { return !canProduce(obj) ? obj : isArray(obj) ? obj.concat() : assign({}, obj) } class LinkedList { constructor(base, parent, propName) { this.base = base this.parent = parent this.propName = propName this.copy = null } toBase() { return this.copy || this.base } changeLinkedList (propName, value) { const nextValue = {[propName]: value} this.copy ? assign(this.copy, nextValue) : assign(this, { copy: assign(shallowCopy(this.base), nextValue) }) if (this.parent) { this.parent.changeLinkedList(this.propName, this.copy) } } static create(base, parent = null, propName = null) { return new LinkedList(base, parent, propName) } } class LinkedListProxy { constructor(base, parentState, propName) { const {proxy, revoke} = this.createProxy(base) this.proxy = proxy this.revokeFn = revoke this.state = LinkedList.create(base, parentState, propName) this.children = [] } createProxy(base) { return Proxy.revocable(base, { get: (...args) =&gt; this.getter(...args), set: (...args) =&gt; this.setter(...args) }) } getter(target, propName) { const value = this.toBase()[propName] return canProduce(value) ? this.createChildProxy(value, propName) : value } createChildProxy(value, propName) { const child = LinkedListProxy.create(value, this.state, propName) this.children.push(child) return child.proxy } setter(target, propName, value) { this.state.changeLinkedList(propName, value) } revoke() { this.revokeFn() this.children.forEach(child =&gt; child.revoke()) } toBase() { return this.state.toBase() } toProxy() { return this.proxy } static create(base, parentState, propName) { return new LinkedListProxy(base, parentState, propName) } } const produceBase = (base, fn) =&gt; { const linkedListProxy = LinkedListProxy.create(base) fn(linkedListProxy.toProxy()) linkedListProxy.revoke() return linkedListProxy.toBase() } const produce = (fn) =&gt; (base) =&gt; { return canProduce(base) ? produceBase(base, fn) : base }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-06-22T07:36:28.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"immer 구현해보기 - OOP 버전"}],["meta",{"property":"article:modified_time","content":"2023-06-22T07:36:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"immer 구현해보기 - OOP 버전\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-06-22T07:36:28.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1687349670000,"updatedTime":1687419388000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":3}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"fe-dev/paradigm/produce-oop.md","localizedDate":"2023년 6월 21일","excerpt":"<h1> immer 구현해보기 - OOP 버전</h1>\\n<blockquote>\\n<p>2019년 12월 1일에 작성한 포스트입니다.</p>\\n</blockquote>\\n<p><a href=\\"/fe-dev/paradigm/produce.html\\" target=\\"blank\\">immer 구현해보기</a>에서 작성된 코드를 OOP 버전으로 리팩토링한 코드이다.</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">isArray</span> <span class=\\"token operator\\">=</span> <span class=\\"token parameter\\">value</span> <span class=\\"token operator\\">=&gt;</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">assign</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token operator\\">...</span>obj</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">assign</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>obj<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">canProduce</span> <span class=\\"token operator\\">=</span> <span class=\\"token parameter\\">value</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> value <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token operator\\">||</span> value <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span>\\n    <span class=\\"token boolean\\">false</span> <span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">typeof</span> value <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">shallowCopy</span> <span class=\\"token operator\\">=</span> <span class=\\"token parameter\\">obj</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">!</span><span class=\\"token function\\">canProduce</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span>\\n    <span class=\\"token literal-property property\\">obj</span> <span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span>\\n      obj<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">concat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n      <span class=\\"token function\\">assign</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> obj<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LinkedList</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base<span class=\\"token punctuation\\">,</span> parent<span class=\\"token punctuation\\">,</span> propName</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>base <span class=\\"token operator\\">=</span> base\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>parent <span class=\\"token operator\\">=</span> parent\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>propName <span class=\\"token operator\\">=</span> propName\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>copy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">toBase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>copy <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>base\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">changeLinkedList</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">propName<span class=\\"token punctuation\\">,</span> value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> nextValue <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">[</span>propName<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">:</span> value<span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>copy <span class=\\"token operator\\">?</span>\\n      <span class=\\"token function\\">assign</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>copy<span class=\\"token punctuation\\">,</span> nextValue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n      <span class=\\"token function\\">assign</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">copy</span><span class=\\"token operator\\">:</span> <span class=\\"token function\\">assign</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">shallowCopy</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> nextValue<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>parent<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>parent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">changeLinkedList</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>propName<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>copy<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base<span class=\\"token punctuation\\">,</span> parent <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> propName <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkedList</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> parent<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LinkedListProxy</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base<span class=\\"token punctuation\\">,</span> parentState<span class=\\"token punctuation\\">,</span> propName</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span>proxy<span class=\\"token punctuation\\">,</span> revoke<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createProxy</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>proxy <span class=\\"token operator\\">=</span> proxy\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>revokeFn <span class=\\"token operator\\">=</span> revoke\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>state <span class=\\"token operator\\">=</span> LinkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> parentState<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">createProxy</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> Proxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">revocable</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function-variable function\\">get</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getter</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token function-variable function\\">set</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setter</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>args<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">getter</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> propName</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> value <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span>propName<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">canProduce</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createChildProxy</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span>\\n      value\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">createChildProxy</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value<span class=\\"token punctuation\\">,</span> propName</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> child <span class=\\"token operator\\">=</span> LinkedListProxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>state<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>child<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> child<span class=\\"token punctuation\\">.</span>proxy\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">setter</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">,</span> value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>state<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">changeLinkedList</span><span class=\\"token punctuation\\">(</span>propName<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">revoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">revokeFn</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">child</span> <span class=\\"token operator\\">=&gt;</span> child<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">revoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">toBase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>state<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">toProxy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>proxy\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">static</span> <span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base<span class=\\"token punctuation\\">,</span> parentState<span class=\\"token punctuation\\">,</span> propName</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">LinkedListProxy</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> parentState<span class=\\"token punctuation\\">,</span> propName<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">produceBase</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base<span class=\\"token punctuation\\">,</span> fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> linkedListProxy <span class=\\"token operator\\">=</span> LinkedListProxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span>linkedListProxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toProxy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  linkedListProxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">revoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">return</span> linkedListProxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">produce</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">fn</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">base</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">canProduce</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token function\\">produceBase</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> fn<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> base\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
