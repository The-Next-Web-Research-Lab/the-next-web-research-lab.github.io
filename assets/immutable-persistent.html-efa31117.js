import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,a as n,b as s,d as e,e as t}from"./app-af77b1c3.js";const l={},i=t(`<h1 id="불변-자료구조와-영속-자료구조" tabindex="-1"><a class="header-anchor" href="#불변-자료구조와-영속-자료구조" aria-hidden="true">#</a> 불변 자료구조와 영속 자료구조</h1><h2 id="불변-자료구조-immutable-data-structures" tabindex="-1"><a class="header-anchor" href="#불변-자료구조-immutable-data-structures" aria-hidden="true">#</a> 불변 자료구조 - Immutable Data Structures</h2><p>불변 자료 구조는 영원히 변하지 않는 상태를 말합니다. 변화가 필요할 때 새로운 상태를 만들어 내고 값을 변경합니다.</p><h3 id="json-클론을-사용한-예시" tabindex="-1"><a class="header-anchor" href="#json-클론을-사용한-예시" aria-hidden="true">#</a> JSON 클론을 사용한 예시</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clonedObj<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inner <span class="token operator">===</span> clonedObj<span class="token punctuation">.</span>inner<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="영속-자료-구조-pesistent-data-structures" tabindex="-1"><a class="header-anchor" href="#영속-자료-구조-pesistent-data-structures" aria-hidden="true">#</a> 영속 자료 구조 - Pesistent Data Structures</h2><p>영속성은 상태를 제거하지 않고 보존하는 것을 의미합니다.</p><p>영속 자료 구조는 상태에 변화가 필요할 때 새로운 상태를 반환하지만 이전 상태를 계속 유지하고 있는 자료구조입니다. 다시 상태 변화가 필요한 시점에 이전에 만들었던 상태와 동일하면 이전 상태를 사용합니다.</p><p>영속 자료 구조를 사용하면 변화가 필요할 때 새로 만듦으로 메모리 효율성이 비교적 떨어지는 불변 자료구조의 단점을 보완할 수 있습니다.</p>`,9),u={id:"immerjs을-사용한-예시",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#immerjs을-사용한-예시","aria-hidden":"true"},"#",-1),k={href:"https://immerjs.github.io/immer/docs/introduction",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>상태가 변경되어 객체를 새로 만들었지만 <code>inner</code>는 변경이 되지 않았기 때문에 기존 상태를 유지한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> immer<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  draft<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clonedObj<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inner <span class="token operator">===</span> clonedObj<span class="token punctuation">.</span>inner<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="참고자료" tabindex="-1"><a class="header-anchor" href="#참고자료" aria-hidden="true">#</a> 참고자료</h2>`,3),b={href:"https://ohgyun.com/585",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Persistent_data_structure",target:"_blank",rel:"noopener noreferrer"},v={href:"https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2",target:"_blank",rel:"noopener noreferrer"};function f(_,g){const a=p("ExternalLinkIcon");return c(),r("div",null,[i,n("h2",u,[d,s(),n("a",k,[s("immerJs"),e(a)]),s("을 사용한 예시")]),m,n("ul",null,[n("li",null,[n("a",b,[s("Immutable Data and React"),e(a)])]),n("li",null,[n("a",h,[s("Persistent data structure 위키"),e(a)])]),n("li",null,[n("a",v,[s("Immutable.js, persistent data structures and structural sharing"),e(a)])])])])}const x=o(l,[["render",f],["__file","immutable-persistent.html.vue"]]);export{x as default};
