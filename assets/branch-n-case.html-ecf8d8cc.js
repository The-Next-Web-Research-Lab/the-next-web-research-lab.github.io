import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as s,b as n,d as i,e as a}from"./app-e7b3b96f.js";const l={},r=a(`<h1 id="분기를-작성하는-방법-n가지" tabindex="-1"><a class="header-anchor" href="#분기를-작성하는-방법-n가지" aria-hidden="true">#</a> 분기를 작성하는 방법 n가지</h1><blockquote><p>2019년 12월 7일에 정리한 포스트입니다.</p></blockquote><h3 id="글의-목적" tabindex="-1"><a class="header-anchor" href="#글의-목적" aria-hidden="true">#</a> 글의 목적</h3><p>자바스크립트에서 분기를 작성하는 방법을 다양하다. 큰 카테고리로 보면 문(statement)와 식(expression)이 있다. 내가 사용하는 분기 작성 코드를 봤을 때, 문은 대표적으로 <code>switch</code>, <code>if</code>가 있고, 식은 삼항연산자, 리터럴이 있다.</p><p>문과 식이 대표적으로 다른점은 <strong>값으로 될 수 있나 없나</strong>의 차이다. 식은 값으로 되는 반면에 문은 값이 될 수 없다. 값이 될 수 있느냐의 차이가 문과 식의 분기 작성에 차이를 보인다.</p><p>자세하게 어떤 방법들이 있는 지 알아보자.</p><h3 id="순서" tabindex="-1"><a class="header-anchor" href="#순서" aria-hidden="true">#</a> 순서</h3><ul><li>문으로 분기 작성</li><li>식으로 분기 작성</li><li>요약</li></ul><h3 id="문으로-분기-작성" tabindex="-1"><a class="header-anchor" href="#문으로-분기-작성" aria-hidden="true">#</a> 문으로 분기 작성</h3><p>문으로 분기를 작성하는 방법은 대표적으로 두가지를 사용하고 있다.</p><h4 id="switch-문" tabindex="-1"><a class="header-anchor" href="#switch-문" aria-hidden="true">#</a> switch 문</h4><p>먼저 <code>switch</code>이다. <code>switch</code>는 <strong>같은 값을 다수 케이스로 분기</strong>하고 싶을 때, 그리고 <strong>판단을 연쇄적으로 하고 싶을 때</strong> 사용한다.</p><p>같은 값을 다수 케이스로 분기하는 예이다. <code>num</code> 값에 따라 다른 반환값을 가지고 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// A</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// BB</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// CCC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),u={href:"https://the-next-web-research-lab.github.io/fe-dev/design-patterns/gof/behavioral.html#%E1%84%8E%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%89%E1%85%AB-chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>조건식이 참이 되지 않을 때 연쇄적으로 다름 조건식으로 넘어간다. 이 형태는 <strong>조건식과 반환문이 동일 선상</strong>으로 코드를 기술 할 수 있는 게 장점이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token function">isObject</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;{}&#39;</span>
  <span class="token keyword">case</span> <span class="token function">isArray</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;[]&#39;</span>
  <span class="token keyword">case</span> <span class="token function">isBoolean</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;boolean&#39;</span>
  <span class="token keyword">case</span> <span class="token function">isNull</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="if-문" tabindex="-1"><a class="header-anchor" href="#if-문" aria-hidden="true">#</a> if 문</h4><p>이번에는 <code>if</code>이다. <code>if</code>는 <strong>옵셔널하게 처리하는 경우</strong>에 많이 사용된다. 내 주관적인 판단으로는 <code>if else</code>는 다른 문법들과 가독성을 비교했을 때, <code>if else</code>를 조합해서 사용할 경우 가독성이 저하된다. 그래서 <code>if</code>는 옵셔널하게 처리할 때 이외는 사용하지 않는 다.</p><p><code>if else</code>를 사용하는 케이스와 <code>if</code>만 사용하는 케이스이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// if else</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// if</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="식으로-분기-작성" tabindex="-1"><a class="header-anchor" href="#식으로-분기-작성" aria-hidden="true">#</a> 식으로 분기 작성</h3><p>식으로 분기를 작성하는 방법도 두가지가 있다.</p><h4 id="리터럴" tabindex="-1"><a class="header-anchor" href="#리터럴" aria-hidden="true">#</a> 리터럴</h4><p><strong>분기를 제거</strong>하기 위해 <strong>분기 만큼 데이터를 확보 가능할 때</strong> 사용한다. 분기가 많을 수록 코드의 난이도를 올라간다. 그래서 분기를 제거하는 방법중에 하나를 사용한다. 리터럴을 사용하면 <code>switch</code>를 쉽게 대체할 수 있다.</p><p><code>switch</code>로 작성된 코드를 리터럴로 대체한 예제이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// switch</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 리터럴</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CCC&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">A</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">BB</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">CCC</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">[</span>str<span class="token punctuation">]</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// A</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// BB</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// CCC</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">&#39;BB&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">&#39;CCC&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="삼항연산자" tabindex="-1"><a class="header-anchor" href="#삼항연산자" aria-hidden="true">#</a> 삼항연산자</h4><p><strong>참과 거짓의 평가를 강제할 때</strong> 사용한다. 지금까지 위에서 작성된 코드들을 특정 분기에 대한 처리는 가능하다. 하지만 예상되는 분기 이외 케이스는 강제하지 않고 있다.</p><p>예상되는 분기 이외 케이스를 처리는 가능하지만 <strong>강제하지 않는 게 삼항연산자와 큰 차이</strong>이다. <code>foo(3)</code>을 실행했을 때 아래 코드는 의도와 다른 동작을 한다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// switch</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
    <span class="token comment">// default: return &#39;Z&#39; (강제하지 않음)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// if</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;BB&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;CCC&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// return &#39;Z&#39; (강제하지 않음)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 리터럴</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CCC&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 삼항 연산자를 사용하여 예상치 못한 케이스를 대비할 수 있다. <strong>강제성을 띄기 때문에 실수를 줄일 수 있는 것</strong>이다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span>
    <span class="token string-property property">&#39;A&#39;</span><span class="token operator">:</span>
    num <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span>
      <span class="token string-property property">&#39;BB&#39;</span><span class="token operator">:</span>
      num <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span>
        <span class="token string-property property">&#39;CCC&#39;</span><span class="token operator">:</span>
        <span class="token string">&#39;Z&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="결론" tabindex="-1"><a class="header-anchor" href="#결론" aria-hidden="true">#</a> 결론</h3><p><strong>이해하기 쉬운 코드를 위한 가독성 측면</strong>과 <strong>코드 안정성을 위한 강제성 측면</strong>을 판단했을 때, 문법들중 하나만 사용하는 것은 선택하긴 힘들다. 각 코드별로 적재적소에 사용되는 게 가장 이상적으로 생각한다.</p><p>나는 최근에 이런 기준으로 코드를 사용하고 있다.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 참만 필요할 때: if 문
- 참과 거짓이 필요할 때, 분기가 2개 이하일 때: 삼항연산자
- 분기가 3개 이상일 때, 조건식이 3개 이상일 때: switch 문
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="요약" tabindex="-1"><a class="header-anchor" href="#요약" aria-hidden="true">#</a> 요약</h3><h4 id="문-statement" tabindex="-1"><a class="header-anchor" href="#문-statement" aria-hidden="true">#</a> 문(statement)</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>switch 문
- 같은 값을 다수 케이스로 판단할 때
- 판단을 연쇄적으로 할 때(책임 연쇄 패턴)

if 문
- 옵셔널하게 사용할 때
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="식-expression" tabindex="-1"><a class="header-anchor" href="#식-expression" aria-hidden="true">#</a> 식(expression)</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>리터럴
- 분기를 제거하기 위해 분기 만큼 데이터를 확보 가능할 때
- switch 문을 대체 하기 용이함

삼항연산자
- 참과 거짓의 평가를 강제할 때
- if 문을 대체 하기 용이함
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="끝" tabindex="-1"><a class="header-anchor" href="#끝" aria-hidden="true">#</a> 끝</h3>`,28);function k(v,m){const e=t("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("판단을 연쇄적으로 하고 싶을 때 예이다. 판단을 연쇄적으로 하여 "),s("a",u,[n("책임 연쇄 패턴"),i(e)]),n("과 일치한다.")]),d])}const g=p(l,[["render",k],["__file","branch-n-case.html.vue"]]);export{g as default};
