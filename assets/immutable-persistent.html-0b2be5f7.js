import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c,a as n,b as s,d as e,e as t}from"./app-36fbb5c6.js";const i={},l=t(`<h1 id="immutable-data-structures-and-persistent-data-structures" tabindex="-1"><a class="header-anchor" href="#immutable-data-structures-and-persistent-data-structures" aria-hidden="true">#</a> Immutable Data Structures and Persistent Data Structures</h1><h2 id="immutable-data-structures" tabindex="-1"><a class="header-anchor" href="#immutable-data-structures" aria-hidden="true">#</a> Immutable Data Structures</h2><p>Immutable data structures refer to states that never change. When a change is needed, a new state is created and the value is changed.</p><h3 id="example-using-json-clone" tabindex="-1"><a class="header-anchor" href="#example-using-json-clone" aria-hidden="true">#</a> Example using JSON clone</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clonedObj<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inner <span class="token operator">===</span> clonedObj<span class="token punctuation">.</span>inner<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="persistent-data-structures" tabindex="-1"><a class="header-anchor" href="#persistent-data-structures" aria-hidden="true">#</a> Persistent Data Structures</h2><p>Persistence means preserving the state without removing it.</p><p>Persistent data structures return a new state when a change is needed, but maintain the previous state. When a state change is needed again, if it is the same as the previous state, the previous state is used.</p><p>Using persistent data structures can compensate for the memory inefficiency of immutable data structures, which create new states when changes are needed.</p>`,9),u={id:"example-using-immerjs",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#example-using-immerjs","aria-hidden":"true"},"#",-1),k={href:"https://immerjs.github.io/immer/docs/introduction",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>Although the object was recreated because the state was changed, <code>inner</code> was not changed, so the previous state is maintained.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clonedObj <span class="token operator">=</span> immer<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">draft</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  draft<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clonedObj<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inner <span class="token operator">===</span> clonedObj<span class="token punctuation">.</span>inner<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,3),h={href:"https://ohgyun.com/585",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Persistent_data_structure",target:"_blank",rel:"noopener noreferrer"},v={href:"https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2",target:"_blank",rel:"noopener noreferrer"};function g(f,_){const a=p("ExternalLinkIcon");return r(),c("div",null,[l,n("h2",u,[d,s(" Example using "),n("a",k,[s("immerJs"),e(a)])]),m,n("ul",null,[n("li",null,[n("a",h,[s("Immutable Data and React"),e(a)])]),n("li",null,[n("a",b,[s("Persistent data structure wiki"),e(a)])]),n("li",null,[n("a",v,[s("Immutable.js, persistent data structures and structural sharing"),e(a)])])])])}const x=o(i,[["render",g],["__file","immutable-persistent.html.vue"]]);export{x as default};
