const e=JSON.parse(`{"key":"v-3462e624","path":"/fe-dev/javascript/union-type.html","title":"TypeScript - Union Type 정의와 사용법 간단 정리","lang":"ko-KR","frontmatter":{"title":"TypeScript - Union Type 정의와 사용법 간단 정리","description":"TypeScript - Union Type 정의와 사용법 간단 정리 Union Type 이란? Union Type은 두 개 이상의 타입을 조합해서 정의한 타입이다. 예를 들어 다수의 자료형이 있으면, interface Square { kind: 'square' size: number } interface Rectangle { kind: 'rectangle' width: number height: number } interface Circle { kind: 'circle' radius: number }","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://the-next-web-research-lab.github.io/en/fe-dev/javascript/union-type.html"}],["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/javascript/union-type.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"TypeScript - Union Type 정의와 사용법 간단 정리"}],["meta",{"property":"og:description","content":"TypeScript - Union Type 정의와 사용법 간단 정리 Union Type 이란? Union Type은 두 개 이상의 타입을 조합해서 정의한 타입이다. 예를 들어 다수의 자료형이 있으면, interface Square { kind: 'square' size: number } interface Rectangle { kind: 'rectangle' width: number height: number } interface Circle { kind: 'circle' radius: number }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-21T09:23:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"TypeScript - Union Type 정의와 사용법 간단 정리"}],["meta",{"property":"article:modified_time","content":"2023-07-21T09:23:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript - Union Type 정의와 사용법 간단 정리\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-07-21T09:23:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Union Type 이란?","slug":"union-type-이란","link":"#union-type-이란","children":[{"level":3,"title":"Union Type의 타입 추론","slug":"union-type의-타입-추론","link":"#union-type의-타입-추론","children":[]}]}],"git":{"createdTime":1689931437000,"updatedTime":1689931437000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":1}]},"readingTime":{"minutes":0.28,"words":83},"filePathRelative":"fe-dev/javascript/union-type.md","localizedDate":"2023년 7월 21일","excerpt":"<h1> TypeScript - Union Type 정의와 사용법 간단 정리</h1>\\n<h2> Union Type 이란?</h2>\\n<p>Union Type은 두 개 이상의 타입을 조합해서 정의한 타입이다.</p>\\n<p>예를 들어 다수의 자료형이 있으면,</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Square</span> <span class=\\"token punctuation\\">{</span>\\n  kind<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'square'</span>\\n  size<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Rectangle</span> <span class=\\"token punctuation\\">{</span>\\n  kind<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'rectangle'</span>\\n  width<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n  height<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Circle</span> <span class=\\"token punctuation\\">{</span>\\n  kind<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'circle'</span>\\n  radius<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
