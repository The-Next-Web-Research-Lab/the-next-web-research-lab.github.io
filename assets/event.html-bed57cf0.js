import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e as t}from"./app-e9b42d51.js";const i={},s=t(`<h1 id="history-and-definition-of-dom-event" tabindex="-1"><a class="header-anchor" href="#history-and-definition-of-dom-event" aria-hidden="true">#</a> History and Definition of DOM Event</h1><h2 id="history-of-dom-event" tabindex="-1"><a class="header-anchor" href="#history-of-dom-event" aria-hidden="true">#</a> History of DOM Event</h2><ul><li>The DOM Event API was an attempt to logically standardize in DOM Level 2.</li><li>Before the revision of DOM Level 2, IE and Netscape adopted opposite <code>event flow</code>.</li><li>IE supported event bubbling, and Netscape supported event capturing.</li><li>Currently, both event flows are supported.</li></ul><h2 id="definition-of-dom-event" tabindex="-1"><a class="header-anchor" href="#definition-of-dom-event" aria-hidden="true">#</a> Definition of DOM Event</h2><ul><li>Responsible for interaction between javascript and HTML.</li><li>Listeners are executed only when events occur using the observer pattern.</li></ul><h3 id="event-bubbling" tabindex="-1"><a class="header-anchor" href="#event-bubbling" aria-hidden="true">#</a> Event Bubbling</h3><ul><li>It starts from the element that is located most deeply in the document tree in the event flow and goes up.</li><li>It looks like bubbles rising as it flows up from the element located most deeply.</li></ul><h3 id="event-capturing" tabindex="-1"><a class="header-anchor" href="#event-capturing" aria-hidden="true">#</a> Event Capturing</h3><ul><li>The event occurs first at the top node and last at the most explicit node.</li><li>Event capturing is designed to catch events before they reach the intended element.</li></ul><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>addEventListener(
  [event name],
  [handler],
  [call time true: capturing, false: bubbling]
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">onLoad</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span>
  onLoad <span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[s];function l(d,r){return n(),a("div",null,o)}const p=e(i,[["render",l],["__file","event.html.vue"]]);export{p as default};
