import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-89a3734e.js";const p={},e=t(`<h1 id="코루틴을-사용한-지연-평가" tabindex="-1"><a class="header-anchor" href="#코루틴을-사용한-지연-평가" aria-hidden="true">#</a> 코루틴을 사용한 지연 평가</h1><h3 id="글의-목적" tabindex="-1"><a class="header-anchor" href="#글의-목적" aria-hidden="true">#</a> 글의 목적</h3><p>기존에 사용하던 콜스택 구조를 코루틴으로 변경하고, 코루틴를 통해 지연 평가를 발생시켜 콜스택과 차이를 설명한다.</p><h3 id="콜스택과-코루틴-비교" tabindex="-1"><a class="header-anchor" href="#콜스택과-코루틴-비교" aria-hidden="true">#</a> 콜스택과 코루틴 비교</h3><p>배열을 인자로 받아 홀수만 리턴하는 <strong>odd</strong>함수와 숫자를 인자로 받아 숫자만큼 리턴하는 <strong>take</strong>를 콜스택과 코루틴 동작을 비교한다.</p><h4 id="콜스택" tabindex="-1"><a class="header-anchor" href="#콜스택" aria-hidden="true">#</a> 콜스택</h4><p>중첩함수 중 내부에 사용된 <strong>odd</strong>가 실행된 뒤, <strong>take</strong>가 실행된다. 배열의 크기만큼 루프가 반복되는 것을 알 수 있다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">odd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newArr
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">take </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    count<span class="token operator">++</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newArr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token function">odd</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// odd 0</span>
<span class="token comment">// odd 1</span>
<span class="token comment">// odd 2</span>
<span class="token comment">// odd 3</span>
<span class="token comment">// odd 4</span>
<span class="token comment">// odd 5</span>
<span class="token comment">// take 1</span>
<span class="token comment">// take 3</span>
<span class="token comment">// 1 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="코루틴" tabindex="-1"><a class="header-anchor" href="#코루틴" aria-hidden="true">#</a> 코루틴</h4><p>코루틴을 통한 코드는 <strong>odd</strong>에서 <strong>yield</strong>를 만나면 <strong>take</strong>로 커서가 이동되고 <strong>take</strong>에서 <strong>yield</strong>를 사용하면 <strong>odd</strong>로 커서가 이동된다. 이러한 작업이 반복 된 뒤 <strong>break</strong>를 만나게 되면 <strong>done</strong>을 반환하여 루프가 종료하게 된다.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">odd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">yield</span> v
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">take </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    count<span class="token operator">++</span>
    <span class="token keyword">yield</span> v
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token function">odd</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// odd 0</span>
<span class="token comment">// odd 1</span>
<span class="token comment">// take 1</span>
<span class="token comment">// odd 2</span>
<span class="token comment">// odd 3</span>
<span class="token comment">// take 3</span>
<span class="token comment">// 1 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="코루틴이란" tabindex="-1"><a class="header-anchor" href="#코루틴이란" aria-hidden="true">#</a> 코루틴이란</h3><p>코루틴은 실행 지점을 코드 블럭으로 저장하여, 해당 지점을 실행/중단/재시작을 하는 것을 말한다. 그래서 자발적/주기적으로 유휴상태를 만들 수 있기 때문에 <strong>비선점 멀티태스킹</strong>이 가능하다. <strong>동시성</strong>과 <strong>병렬 처리</strong>가 가능하다. 그리고 코루틴 사이의 전환은 <strong>컨텍스트 전환</strong>이 발생하지 않는다.</p><h4 id="컨텍스트-전환" tabindex="-1"><a class="header-anchor" href="#컨텍스트-전환" aria-hidden="true">#</a> 컨텍스트 전환</h4><p>기존의 프로세스의 상태 또는 레지스터값을 저장 후 다음 프로세스를 수행하도록 새로운 프로세스의 상태 또는 레지스터값을 교체하는 작업이다.</p><h4 id="서브-루틴과-코루틴" tabindex="-1"><a class="header-anchor" href="#서브-루틴과-코루틴" aria-hidden="true">#</a> 서브 루틴과 코루틴</h4><p><strong>서브루틴</strong>은 <strong>호출자</strong>가 호출되면 <strong>호출자</strong>에게 항상 <strong>return</strong>을 한다. 반면에 <strong>코루틴</strong>은 특정 지점에서 실행/중단/재시작을 할 수 있다.</p><h4 id="스레드와-코루틴" tabindex="-1"><a class="header-anchor" href="#스레드와-코루틴" aria-hidden="true">#</a> 스레드와 코루틴</h4><p><strong>스레드</strong>는 <strong>선점식 멀티태스킹</strong>을 한다. 즉 <strong>동시성</strong>은 제공하만 <strong>병렬 처리</strong>는 제공하지 않는다. 반면에 <strong>코루틴</strong>은 <strong>컨텍스트 전환</strong>없이 <strong>동시성</strong>, <strong>병렬처리</strong>가 가능하다.</p><h4 id="재귀와-코루틴" tabindex="-1"><a class="header-anchor" href="#재귀와-코루틴" aria-hidden="true">#</a> 재귀와 코루틴</h4><p><strong>재귀</strong>는 반복적인 호출을 위해 새로운 <strong>스택 프레임</strong>이 필요하여 최악의 경우에는 <strong>스택 오버플로우</strong>가 발생한다. 반면에 <strong>코루틴</strong>은 특정 지점 코드 블럭이 저장되므로 데이터가 쌓이지 않는 다.</p>`,23),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","coroutine.html.vue"]]);export{d as default};
