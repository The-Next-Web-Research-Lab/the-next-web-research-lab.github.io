import{_ as e,c as t,o as a,a3 as o}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"Intellectual Production Skills for Those Who Work in IT","description":"","frontmatter":{"title":"Intellectual Production Skills for Those Who Work in IT"},"headers":[],"relativePath":"en/fe-dev/books/13.md","filePath":"en/fe-dev/books/13.md"}'),r={name:"en/fe-dev/books/13.md"},n=o('<h1 id="book-review-series-intellectual-production-skills-for-those-who-work-in-it" tabindex="-1">Book Review Series - Intellectual Production Skills for Those Who Work in IT <a class="header-anchor" href="#book-review-series-intellectual-production-skills-for-those-who-work-in-it" aria-label="Permalink to &quot;Book Review Series - Intellectual Production Skills for Those Who Work in IT&quot;">​</a></h1><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p>『Intellectual Production Skills for Those Who Work in IT』 Nishio Hirokazu / Kim Wansup (trans.) | Jpub | October 2019</p><h2 id="one-line-review" tabindex="-1">One-line review <a class="header-anchor" href="#one-line-review" aria-label="Permalink to &quot;One-line review&quot;">​</a></h2><p>A book for those who enjoy learning</p><h2 id="what-is-abstraction" tabindex="-1">What is abstraction? <a class="header-anchor" href="#what-is-abstraction" aria-label="Permalink to &quot;What is abstraction?&quot;">​</a></h2><h3 id="abstraction-abtract" tabindex="-1">Abstraction/abtract <a class="header-anchor" href="#abstraction-abtract" aria-label="Permalink to &quot;Abstraction/abtract&quot;">​</a></h3><p>Abstraction means <strong>extracting only the important parts that need to be paid attention to from a concrete object</strong>.</p><p>The upper part of abstraction is the Chinese character <strong>象</strong>, which means <strong>shape</strong>. For example, the upper part of the object is the same character, and it is also used in words such as conception, impression, state, image, landscape, etc. The lower part of abstraction, <strong>抽</strong>, means <strong>to pull out, to extract</strong>. It is the same character as in <strong>extraction</strong> or <strong>recommendation</strong>.</p><h3 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h3><p>The term model is especially interpreted as model in the field of natural science. For example, there is the Standard Model of elementary particles. A toy car model that a child plays with is different from a real car, but it achieves the purpose of <strong>running the car and playing with it</strong> by extracting only the important elements.</p><p>A model is a simplified representation of the structure of the real world. The phenomena that occur in the real world are complex, so it is a process of simplifying them by taking out only the important parts that can be processed within the limited cognitive ability of humans.</p><h3 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h3><p>Let&#39;s think about the module (Module) of the programming language in relation to the term model. Both model and module have Latin modulus as their origin.</p><p>When the term module is used to make physical things such as architecture, it means that there are many parts of the same shape.</p><p>There is a limit to human understanding. It is impossible to remember the entire source code in your head, so you tend to focus only on the important parts of what you are trying to do and ignore the rest. But if changing the code in a specific location affects other places, you can&#39;t ignore the rest.</p><h3 id="limiting-interaction" tabindex="-1">Limiting interaction <a class="header-anchor" href="#limiting-interaction" aria-label="Permalink to &quot;Limiting interaction&quot;">​</a></h3><p>The module concept was created to limit this interaction between codes. In 1975, Niklaus Wirth, the creator of the Pascal programming language, designed the Modula programming language. This language was based on Pascal and introduced the module concept.</p><p>In Modula, a module was <strong>a group of code with strong relevance</strong>. And the components inside the module could not be referenced from outside the module unless they were explicitly <strong>exported</strong>, and the components outside the module could not be referenced inside the module unless they were explicitly <strong>imported</strong>. That is, the module of the programming language was a structure that exposed only part of the content and hid the rest.</p><h3 id="hiding-unimportant-parts-extracting-important-parts" tabindex="-1">Hiding unimportant parts = extracting important parts <a class="header-anchor" href="#hiding-unimportant-parts-extracting-important-parts" aria-label="Permalink to &quot;Hiding unimportant parts = extracting important parts&quot;">​</a></h3><p>So far, we have learned that abstraction is extracting important parts from concrete objects. And we learned that a model is extracting only the important part from a complex system in reality. The purpose of the module in programming is this abstraction (modeling).</p><p>At the same time as Modula, there was a programming language called CLU, created by Barbara Liskov. In CLU, instead of collecting functions with modules, they collected them with types. And after collecting the data structure and the sequence to process it, they hid the detailed part of the data structure and exposed only the processing sequence, which they called <strong>abstract data type</strong>.</p><p>In Java, which was later distributed, this data and processing sequence were all called <strong>classes</strong>.</p><h3 id="pattern-discovery" tabindex="-1">Pattern discovery <a class="header-anchor" href="#pattern-discovery" aria-label="Permalink to &quot;Pattern discovery&quot;">​</a></h3><p>Pattern discovery means finding rules, common characteristics, repetitive things, etc. by collecting concrete examples. For example, by drawing the daily access count of a web page as a line graph, you can see that it shows a zigzag shape. It is discovering a periodic pattern by visualizing the facts.</p><h3 id="design-pattern" tabindex="-1">Design pattern <a class="header-anchor" href="#design-pattern" aria-label="Permalink to &quot;Design pattern&quot;">​</a></h3><p>Many people think of design patterns when they hear the word pattern. Design patterns are names given to structures that repeat when designing programs. For example, they named the structure that does not interact directly with each other but processes through a mediator as <strong>Mediator pattern</strong>. To give an example of a person, when holding an event with multiple participants, it would be chaotic if all the participants tried to coordinate the schedule by talking one-on-one. Therefore, they design to concentrate the information by appointing one mediator.</p>',27),i=[n];function s(h,l,c,d,p,u){return a(),t("div",null,i)}const f=e(r,[["render",s]]);export{g as __pageData,f as default};
