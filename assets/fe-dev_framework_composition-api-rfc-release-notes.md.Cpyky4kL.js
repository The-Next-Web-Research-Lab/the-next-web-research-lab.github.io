import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"Composition API RFC 릴리즈 노트 정리","description":"","frontmatter":{"title":"Composition API RFC 릴리즈 노트 정리"},"headers":[],"relativePath":"fe-dev/framework/composition-api-rfc-release-notes.md","filePath":"fe-dev/framework/composition-api-rfc-release-notes.md"}'),t={name:"fe-dev/framework/composition-api-rfc-release-notes.md"},n=e(`<h1 id="composition-api-rfc-릴리즈-노트-정리" tabindex="-1">Composition API RFC 릴리즈 노트 정리 <a class="header-anchor" href="#composition-api-rfc-릴리즈-노트-정리" aria-label="Permalink to &quot;Composition API RFC 릴리즈 노트 정리&quot;">​</a></h1><blockquote><p>초안작성일: 2020.02.29</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>@vue/composition-api</code>의 릴리즈 노트를 통해 어떤 변경 사항이 생길지 예상하기 위해 정리한 포스트입니다.</p></div><h2 id="v0-4-0" tabindex="-1">v0.4.0 <a class="header-anchor" href="#v0-4-0" aria-label="Permalink to &quot;v0.4.0&quot;">​</a></h2><ul><li>[리팩토링] 이름변경 <code>createComponent</code> =&gt; <code>defineComponent</code></li><li>[라이프사이클] <code>onUnmounted</code>의 호출 시점이 <code>destroyed</code>와 <code>deactivated</code> =&gt; <code>destroyed</code>로 변경 <a href="https://github.com/vuejs/composition-api/pull/217/files#diff-3749ddba11f730d062a1c8aec308f09cL37" target="_blank" rel="noreferrer">#217</a></li></ul><h2 id="v0-3-3" tabindex="-1">v0.3.3 <a class="header-anchor" href="#v0-3-3" aria-label="Permalink to &quot;v0.3.3&quot;">​</a></h2><ul><li>[라이프사이클] <code>onServerPrefetch</code> 추가</li><li>[컨텍스트] <code>ssrContext</code> 추가</li><li>[TypeScript] computed type 이슈 해결</li></ul><h2 id="v0-3-2" tabindex="-1">v0.3.2 <a class="header-anchor" href="#v0-3-2" aria-label="Permalink to &quot;v0.3.2&quot;">​</a></h2><ul><li>[TypeScript] <code>props</code> 옵션 타입 추론 개선</li></ul><h2 id="v0-3-1" tabindex="-1">v0.3.1 <a class="header-anchor" href="#v0-3-1" aria-label="Permalink to &quot;v0.3.1&quot;">​</a></h2><ul><li>[Fix] watcher 콜백이 정상적인 시점에 해제 안되는 현상 해결</li></ul><h2 id="v0-3-0" tabindex="-1">v0.3.0 <a class="header-anchor" href="#v0-3-0" aria-label="Permalink to &quot;v0.3.0&quot;">​</a></h2><ul><li>[TypeScript] TypeScript 타입 정의 개선</li><li>[컨텍스트] <code>context.slots</code>가 render전에 사용할 수 없는 현상 해결</li></ul><h2 id="v0-2-1" tabindex="-1">v0.2.1 <a class="header-anchor" href="#v0-2-1" aria-label="Permalink to &quot;v0.2.1&quot;">​</a></h2><ul><li>[TypeScript] prop 타입을 직접 선언 가능함</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createComponent, createElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vue/composition-api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     msg: {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// required by vue 2 runtime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, props.msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>[TypeScript] ref 타입 선언</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dateRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date);</span></span></code></pre></div><h2 id="v0-2-0" tabindex="-1">v0.2.0 <a class="header-anchor" href="#v0-2-0" aria-label="Permalink to &quot;v0.2.0&quot;">​</a></h2><ul><li>[리팩토링] 이름 변경 <code>onBeforeDestroy()</code> =&gt; <code>onBeforeUnmount()</code></li><li>[라이프사이클] <code>onCreated()</code>, <code>onDestroyed</code> 제거</li></ul><h2 id="v0-1-0" tabindex="-1">v0.1.0 <a class="header-anchor" href="#v0-1-0" aria-label="Permalink to &quot;v0.1.0&quot;">​</a></h2><ul><li>RFC로 되면서 패키지 이름 변경됨</li></ul>`,22),l=[n];function p(h,o,r,k,d,c){return a(),i("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
