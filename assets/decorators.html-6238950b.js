const e=JSON.parse('{"key":"v-687ed664","path":"/fe-dev/javascript/decorators.html","title":"JavaScript - Decorators","lang":"ko-KR","frontmatter":{"title":"JavaScript - Decorators","description":"JavaScript - Decorators Proposal과 실용성 Decorators Proposal tc39/proposal-decorators에 제안서 정의됨 Orthogonal Classes와 Class Evaluation Order 제안을 바탕으로 Decorators와 Class Field 및 Private methods를 함께 작동시키는 방법에 대한 결합된 비전을 제안 Decorators는 이미 정의된 클래스, 함수, 변수의 코드를 수정하지 않고, 기능을 추가하는 것에 유용함 메모이제이션, 접근 제어, 인증, 계측, 타이밍 처리, 로깅, 속도 제한 등에 사용된다.","head":[["meta",{"property":"og:url","content":"https://the-next-web-research-lab.github.io/fe-dev/javascript/decorators.html"}],["meta",{"property":"og:site_name","content":"더넥스트웹리서치랩"}],["meta",{"property":"og:title","content":"JavaScript - Decorators"}],["meta",{"property":"og:description","content":"JavaScript - Decorators Proposal과 실용성 Decorators Proposal tc39/proposal-decorators에 제안서 정의됨 Orthogonal Classes와 Class Evaluation Order 제안을 바탕으로 Decorators와 Class Field 및 Private methods를 함께 작동시키는 방법에 대한 결합된 비전을 제안 Decorators는 이미 정의된 클래스, 함수, 변수의 코드를 수정하지 않고, 기능을 추가하는 것에 유용함 메모이제이션, 접근 제어, 인증, 계측, 타이밍 처리, 로깅, 속도 제한 등에 사용된다."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://the-next-web-research-lab.github.io/images/og_image.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-07-21T09:36:38.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JavaScript - Decorators"}],["meta",{"property":"article:modified_time","content":"2023-07-21T09:36:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript - Decorators\\",\\"image\\":[\\"https://the-next-web-research-lab.github.io/images/og_image.png\\"],\\"dateModified\\":\\"2023-07-21T09:36:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Decorators Proposal","slug":"decorators-proposal","link":"#decorators-proposal","children":[]},{"level":2,"title":"Decorators 실용성","slug":"decorators-실용성","link":"#decorators-실용성","children":[{"level":3,"title":"코드 사용 예시","slug":"코드-사용-예시","link":"#코드-사용-예시","children":[]}]}],"git":{"createdTime":1689931437000,"updatedTime":1689932198000,"contributors":[{"name":"ChoDragon9","email":"04whdydrn30@gmail.com","commits":2}]},"readingTime":{"minutes":0.33,"words":98},"filePathRelative":"fe-dev/javascript/decorators.md","localizedDate":"2023년 7월 21일","excerpt":"<h1> JavaScript - Decorators Proposal과 실용성</h1>\\n<h2> Decorators Proposal</h2>\\n<ul>\\n<li><a href=\\"https://github.com/tc39/proposal-decorators\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">tc39/proposal-decorators</a>에 제안서 정의됨</li>\\n<li><a href=\\"https://github.com/erights/Orthogonal-Classes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Orthogonal Classes</a>와 <a href=\\"https://onedrive.live.com/view.aspx?resid=A7BBCE1FC8EE16DB!442046&amp;app=PowerPoint&amp;authkey=!AEeXmhZASk50KjA\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Class Evaluation Order</a> 제안을 바탕으로 Decorators와 <a href=\\"https://tc39.github.io/proposal-class-fields/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Class Field</a> 및 <a href=\\"https://github.com/tc39/proposal-private-methods\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Private methods</a>를 함께 작동시키는 방법에 대한 결합된 비전을 제안</li>\\n<li>Decorators는 이미 정의된 클래스, 함수, 변수의 코드를 수정하지 않고, 기능을 추가하는 것에 유용함</li>\\n<li>메모이제이션, 접근 제어, 인증, 계측, 타이밍 처리, 로깅, 속도 제한 등에 사용된다.</li>\\n</ul>","autoDesc":true}');export{e as data};
