export const data = JSON.parse("{\"key\":\"v-4082de24\",\"path\":\"/fe-dev/paradigm/produce.html\",\"title\":\"immer 구현해보기\",\"lang\":\"ko-KR\",\"frontmatter\":{\"title\":\"immer 구현해보기\",\"description\":\"immer 구현해보기 2019년 12월 1일에 작성한 포스트입니다. 글의 목적 ImmerJs의 produce 함수를 코드리뷰에서 우연히 봤다. 심플한 API로 영속 자료 구조를 구현할 수 있는 게 놀라웠다. ImmerJs에서는 상태 변경에 필요한 API를 제공하지 않는 다. produce(state, recipeFunction) 형태로 사용하면 변경된 상태를 전달해준다.\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://the-next-web-research-lab.github.io/fe-dev/paradigm/produce.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"더넥스트웹리서치랩\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"immer 구현해보기\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"immer 구현해보기 2019년 12월 1일에 작성한 포스트입니다. 글의 목적 ImmerJs의 produce 함수를 코드리뷰에서 우연히 봤다. 심플한 API로 영속 자료 구조를 구현할 수 있는 게 놀라웠다. ImmerJs에서는 상태 변경에 필요한 API를 제공하지 않는 다. produce(state, recipeFunction) 형태로 사용하면 변경된 상태를 전달해준다.\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://the-next-web-research-lab.github.io/images/og_image.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"ko-KR\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"immer 구현해보기\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"immer 구현해보기\\\",\\\"image\\\":[\\\"https://the-next-web-research-lab.github.io/images/og_image.png\\\"],\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":3,\"title\":\"글의 목적\",\"slug\":\"글의-목적\",\"link\":\"#글의-목적\",\"children\":[]},{\"level\":3,\"title\":\"목차\",\"slug\":\"목차\",\"link\":\"#목차\",\"children\":[]},{\"level\":3,\"title\":\"ImmerJs의 원리\",\"slug\":\"immerjs의-원리\",\"link\":\"#immerjs의-원리\",\"children\":[]},{\"level\":3,\"title\":\"프록시 기반 다지기\",\"slug\":\"프록시-기반-다지기\",\"link\":\"#프록시-기반-다지기\",\"children\":[]},{\"level\":3,\"title\":\"영속 자료 구조 만들기\",\"slug\":\"영속-자료-구조-만들기\",\"link\":\"#영속-자료-구조-만들기\",\"children\":[]},{\"level\":3,\"title\":\"프록시와 영속 자료 구조 병합하기\",\"slug\":\"프록시와-영속-자료-구조-병합하기\",\"link\":\"#프록시와-영속-자료-구조-병합하기\",\"children\":[]},{\"level\":3,\"title\":\"끝\",\"slug\":\"끝\",\"link\":\"#끝\",\"children\":[]}],\"readingTime\":{\"minutes\":2.71,\"words\":813},\"filePathRelative\":\"fe-dev/paradigm/produce.md\",\"excerpt\":\"<h1> immer 구현해보기</h1>\\n<blockquote>\\n<p>2019년 12월 1일에 작성한 포스트입니다.</p>\\n</blockquote>\\n<h3> 글의 목적</h3>\\n<p><a href=\\\"https://immerjs.github.io/immer/docs/introduction\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">ImmerJs</a>의 <code>produce</code> 함수를 코드리뷰에서 우연히 봤다. 심플한 API로 영속 자료 구조를 구현할 수 있는 게 놀라웠다.</p>\\n<p>ImmerJs에서는 상태 변경에 필요한 API를 제공하지 않는 다. <code>produce(state, recipeFunction)</code> 형태로 사용하면 변경된 상태를 전달해준다.</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
