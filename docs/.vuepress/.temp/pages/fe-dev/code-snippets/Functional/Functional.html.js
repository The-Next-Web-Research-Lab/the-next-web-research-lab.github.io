export const data = JSON.parse("{\"key\":\"v-5dbe1a72\",\"path\":\"/fe-dev/code-snippets/Functional/Functional.html\",\"title\":\"Functional\",\"lang\":\"ko-KR\",\"frontmatter\":{\"title\":\"Functional\",\"description\":\"unfold const unfold = (iteratorFn, seedValue, list = []) =&gt; { const either = iteratorFn(seedValue); if (either) { const [result, nextSeedValue] = either; return unfold(iteratorFn, nextSeedValue, [...list, result]) } else { return list; } }; const fn = n =&gt; { return n &gt; 50 ? false : [-n, n + 10] }; console.log(unfold(fn, 10)); //=&gt; [-10, -20, -30, -40, -50] console.log(unfold(fn, 60)); //=&gt; []\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://the-next-web-research-lab.github.io/fe-dev/code-snippets/Functional/Functional.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"더넥스트웹리서치랩\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Functional\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"unfold const unfold = (iteratorFn, seedValue, list = []) =&gt; { const either = iteratorFn(seedValue); if (either) { const [result, nextSeedValue] = either; return unfold(iteratorFn, nextSeedValue, [...list, result]) } else { return list; } }; const fn = n =&gt; { return n &gt; 50 ? false : [-n, n + 10] }; console.log(unfold(fn, 10)); //=&gt; [-10, -20, -30, -40, -50] console.log(unfold(fn, 60)); //=&gt; []\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://the-next-web-research-lab.github.io/images/og_image.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"ko-KR\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-20T17:05:44.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"Functional\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-20T17:05:44.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Functional\\\",\\\"image\\\":[\\\"https://the-next-web-research-lab.github.io/images/og_image.png\\\"],\\\"dateModified\\\":\\\"2023-06-20T17:05:44.000Z\\\",\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"unfold\",\"slug\":\"unfold\",\"link\":\"#unfold\",\"children\":[]},{\"level\":2,\"title\":\"always\",\"slug\":\"always\",\"link\":\"#always\",\"children\":[]},{\"level\":2,\"title\":\"boolean\",\"slug\":\"boolean\",\"link\":\"#boolean\",\"children\":[]},{\"level\":2,\"title\":\"curry\",\"slug\":\"curry\",\"link\":\"#curry\",\"children\":[]},{\"level\":2,\"title\":\"is-same\",\"slug\":\"is-same\",\"link\":\"#is-same\",\"children\":[]},{\"level\":2,\"title\":\"memoize\",\"slug\":\"memoize\",\"link\":\"#memoize\",\"children\":[]},{\"level\":2,\"title\":\"once\",\"slug\":\"once\",\"link\":\"#once\",\"children\":[]},{\"level\":2,\"title\":\"partial\",\"slug\":\"partial\",\"link\":\"#partial\",\"children\":[]},{\"level\":2,\"title\":\"pipe\",\"slug\":\"pipe\",\"link\":\"#pipe\",\"children\":[]},{\"level\":2,\"title\":\"plucker\",\"slug\":\"plucker\",\"link\":\"#plucker\",\"children\":[]},{\"level\":2,\"title\":\"range\",\"slug\":\"range\",\"link\":\"#range\",\"children\":[]},{\"level\":2,\"title\":\"tab\",\"slug\":\"tab\",\"link\":\"#tab\",\"children\":[]},{\"level\":2,\"title\":\"fp\",\"slug\":\"fp\",\"link\":\"#fp\",\"children\":[]}],\"git\":{\"createdTime\":1687279729000,\"updatedTime\":1687280744000,\"contributors\":[{\"name\":\"ChoDragon9\",\"email\":\"04whdydrn30@gmail.com\",\"commits\":2}]},\"readingTime\":{\"minutes\":0.29,\"words\":87},\"filePathRelative\":\"fe-dev/code-snippets/Functional/Functional.md\",\"localizedDate\":\"2023년 6월 21일\",\"excerpt\":\"<h2> unfold</h2>\\n<div class=\\\"language-javascript line-numbers-mode\\\" data-ext=\\\"js\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">unfold</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">iteratorFn<span class=\\\"token punctuation\\\">,</span> seedValue<span class=\\\"token punctuation\\\">,</span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> either <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">iteratorFn</span><span class=\\\"token punctuation\\\">(</span>seedValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>either<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>result<span class=\\\"token punctuation\\\">,</span> nextSeedValue<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> either<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">unfold</span><span class=\\\"token punctuation\\\">(</span>iteratorFn<span class=\\\"token punctuation\\\">,</span> nextSeedValue<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>list<span class=\\\"token punctuation\\\">,</span> result<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> list<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">n</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> n <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">50</span>\\n    <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">,</span> n <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">unfold</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//=&gt; [-10, -20, -30, -40, -50]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">unfold</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">60</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//=&gt; []</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
